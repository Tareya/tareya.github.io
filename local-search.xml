<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>腾讯蓝鲸（Go版） 快速入门手册</title>
    <link href="/2021/08/30/%E8%85%BE%E8%AE%AF%E8%93%9D%E9%B2%B8%EF%BC%88Go%E7%89%88%EF%BC%89-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/08/30/%E8%85%BE%E8%AE%AF%E8%93%9D%E9%B2%B8%EF%BC%88Go%E7%89%88%EF%BC%89-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="腾讯蓝鲸（Go版）-快速入门手册"><a href="#腾讯蓝鲸（Go版）-快速入门手册" class="headerlink" title="腾讯蓝鲸（Go版） 快速入门手册"></a>腾讯蓝鲸（Go版） 快速入门手册</h1><span id="more"></span><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/bk-cmdb.png" alt="bk-cmdb"></p><p><a href="https://bk.tencent.com/">蓝鲸官网</a></p><p><a href="https://github.com/Tencent/bk-cmdb">官方github</a></p><h3 id="1、蓝鲸简介"><a href="#1、蓝鲸简介" class="headerlink" title="1、蓝鲸简介"></a>1、蓝鲸简介</h3><p>蓝鲸配置平台（蓝鲸CMDB）是一个面向资产及应用的企业级配置管理平台。</p><p>蓝鲸配置平台提供了全新自定义模型管理，用户不仅可以方便地实现内置模型属性的拓展，同时也能够根据不同的企业需求随时新增模型和关联关系，把网络、中间件、虚拟资源等纳入到CMDB的管理中。除此之外还增加了更多符合场景需要的新功能：机器数据快照、数据自动发现、变更事件主动推送、更加精细的权限管理、可拓展的业务拓扑等功能。</p><p>在技术构建上，架构的核心聚焦于资源，我们把CMDB管理的原子资源分为主机、进程和通用对象三种类型，并构建了对这些资源的原子操作层。在这些原子操作之上，我们构建了更贴近用户操作的场景层，场景层通过对不同资源的组合操作来完成用户的请求。</p><h3 id="2、具体功能"><a href="#2、具体功能" class="headerlink" title="2、具体功能"></a>2、具体功能</h3><ul><li>拓扑化的主机管理：主机基础属性、主机快照数据、主机归属关系管理</li><li>组织架构管理：可扩展的基于业务的组织架构管理</li><li>模型管理：既能管理业务、集群、主机等内置模型，也能自定义模型</li><li>进程管理：基于模块的主机进程管理</li><li>事件注册与推送：提供基于回调方式的事件注册与推送</li><li>通用权限管理：灵活的基于用户组的权限管理</li><li>操作审计：用户操作行为的审计与回溯</li></ul><h3 id="3、架构设计"><a href="#3、架构设计" class="headerlink" title="3、架构设计"></a>3、架构设计</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826102802263.png" alt="Go蓝鲸架构设计"></p><h3 id="4、服务进程清单"><a href="#4、服务进程清单" class="headerlink" title="4、服务进程清单"></a>4、服务进程清单</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>cmdb_webserver</td><td>web server 服务子目录</td></tr><tr><td>cmdb_apiserver</td><td>场景层服务，api 服务</td></tr><tr><td>cmdb_coreservice</td><td>资源管理层，提供原子接口服务</td></tr><tr><td>cmdb_adminserver</td><td>负责系统数据的初始化以及配置管理工作</td></tr><tr><td>cmdb_authserver</td><td>鉴权认证服务</td></tr><tr><td>cmdb_cloudserver</td><td>云数据管理服务</td></tr><tr><td>cmdb_datacollection</td><td>场景层服务，数据采集服务</td></tr><tr><td>cmdb_eventserver</td><td>场景层服务，事件推送服务</td></tr><tr><td>cmdb_hostserver</td><td>场景层服务，主机数据维护</td></tr><tr><td>cmdb_operationserver</td><td>场景层服务，提供与运营统计相关功能服务</td></tr><tr><td>cmdb_procserver</td><td>场景层服务，负责进程数据的维护</td></tr><tr><td>cmdb_synchronizeserver</td><td>场景层服务，数据同步服务</td></tr><tr><td>cmdb_toposerver</td><td>场景层服务，负责模型的定义以及主机、业务、模块及进程等实例数据的维护</td></tr><tr><td>cmdb_taskserver</td><td>场景层服务，异步任务管理服务</td></tr></tbody></table><h3 id="5、代码结构"><a href="#5、代码结构" class="headerlink" title="5、代码结构"></a>5、代码结构</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826103025159.png" alt="Go蓝鲸代码结构"></p><h4 id="目录结构说明："><a href="#目录结构说明：" class="headerlink" title="目录结构说明："></a>目录结构说明：</h4><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>web-server</td><td>web层服务后端，基于 golang 的 gin框架</td></tr><tr><td>ui</td><td>web层服务前端，基于 vue.js</td></tr><tr><td>test</td><td>系统服务的测试用例，基于 golang 原生</td></tr><tr><td>tools</td><td>客户端管理工具（基于 golang）以及辅助脚本工具（基于 Javascript）</td></tr><tr><td>apiserver</td><td>接入层 api 服务层，基于 golang 的 go-restful 框架</td></tr><tr><td>scene_server</td><td>接入层 场景微服务层，基于 golang 的 go-restful 框架</td></tr><tr><td>source_controller</td><td>接入层 资源调度层，基于 golang 的 go-restful 框架，提供原子接口服务</td></tr><tr><td>common</td><td>项目公共依赖库，基于 golang 原生</td></tr><tr><td>storage</td><td>存储接入封装，基于 golang 原生</td></tr><tr><td>thirdpartyclient</td><td>第三方客户端接入封装，基于 golang 原生</td></tr></tbody></table><h2 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h2><h3 id="1、编译环境准备"><a href="#1、编译环境准备" class="headerlink" title="1、编译环境准备"></a>1、编译环境准备</h3><h4 id="1）环境需求"><a href="#1）环境需求" class="headerlink" title="1）环境需求"></a>1）环境需求</h4><ul><li>golang &gt;= 1.8</li><li>python &gt;= 2.7.5</li><li>nodejs &gt;= 4.0.0（编译过程中需要可以连公网下载依赖包）</li></ul><h4 id="2）安装-Go"><a href="#2）安装-Go" class="headerlink" title="2）安装 Go"></a>2）安装 Go</h4><p>推荐使用 g 进行 Go 的版本管理，参考如下文档</p><p><a href="https://tareya.github.io/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/#golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g">golang 多版本管理工具 — g</a></p><h4 id="3）安装-node-js"><a href="#3）安装-node-js" class="headerlink" title="3）安装 node.js"></a>3）安装 node.js</h4><h5 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h5><p><a href="https://nodejs.org/zh-cn/download/">官网下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://nodejs.org/dist/v14.17.5/node-v14.17.5-linux-x64.tar.xz\<br></code></pre></td></tr></table></figure><h5 id="2-解压并设置路径"><a href="#2-解压并设置路径" class="headerlink" title="2. 解压并设置路径"></a>2. 解压并设置路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf node-v14.17.5-linux-x64.tar.xz -C /data/applications/ &amp;&amp; \<br>cd /data/applications &amp;&amp; \<br>ln -s node-v14.17.5-linux-x64 node &amp;&amp; \<br>ln -s /data/applications/node/bin/* /usr/local/bin/<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v <br>npm -v<br></code></pre></td></tr></table></figure><h5 id="3-安装-cnpm"><a href="#3-安装-cnpm" class="headerlink" title="3. 安装 cnpm"></a>3. 安装 cnpm</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825165451698.png" alt="image-20210825165451698"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /data/applications/node/bin/cnpm /usr/local/bin/<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm -v<br></code></pre></td></tr></table></figure><h3 id="2、源码编译"><a href="#2、源码编译" class="headerlink" title="2、源码编译"></a>2、源码编译</h3><h4 id="1）源码下载"><a href="#1）源码下载" class="headerlink" title="1）源码下载"></a>1）源码下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/go/src &amp;&amp; \<br>export GOPATH=~/go &amp;&amp; \<br>cd $GOPATH/src &amp;&amp; \<br>git clone git@github.com:Tareya/configcenter.git<br></code></pre></td></tr></table></figure><h4 id="2）整体编译"><a href="#2）整体编译" class="headerlink" title="2）整体编译"></a>2）整体编译</h4><blockquote><p>🚩 <strong>三种编译模式</strong></p><p>官方提供的 Makefile 提供了多种编译模式</p><p>1⃣️ <strong>指定版本号的编译</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">VERSION=xxxx make<br></code></pre></td></tr></table></figure><p>2⃣️ <strong>本地代码分支编译</strong></p><p>Makefile 默认为支持 darwin 平台，且 默认情况是前后端一起编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make <br></code></pre></td></tr></table></figure><p>3⃣️ <strong>编译参数</strong></p><p>支持 linux 平台编译，需要指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make linux<br></code></pre></td></tr></table></figure><p>使用 cnpm 代替 npm 编译前端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make NPM=cnpm<br></code></pre></td></tr></table></figure></blockquote><h5 id="支持-Linux-平台编译"><a href="#支持-Linux-平台编译" class="headerlink" title="支持 Linux 平台编译"></a>支持 Linux 平台编译</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $GOPATH/src/configcenter/src &amp;&amp; \<br>export GOPATH=~/go &amp;&amp; \<br>make linux NPM=cnpm<br></code></pre></td></tr></table></figure><h5 id="问题记录-解决环境变量识别问题"><a href="#问题记录-解决环境变量识别问题" class="headerlink" title="问题记录: 解决环境变量识别问题"></a>问题记录: 解决环境变量识别问题</h5><h6 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h6><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825172030664.png" alt="image-20210825172030664"></p><h6 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因:"></a>问题原因:</h6><p>在官方提供的 Makefile 中，路径是写死的，所以如果路径不一致，会无法读取到对应的文件</p><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GOPATH=~/go<br></code></pre></td></tr></table></figure><h4 id="3）后端编译（可选）"><a href="#3）后端编译（可选）" class="headerlink" title="3）后端编译（可选）"></a>3）后端编译（可选）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make server <br></code></pre></td></tr></table></figure><h4 id="4）前端编译（可选）"><a href="#4）前端编译（可选）" class="headerlink" title="4）前端编译（可选）"></a>4）前端编译（可选）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make ui NPM=cnpm<br></code></pre></td></tr></table></figure><h5 id="问题记录-解决node编译oom问题"><a href="#问题记录-解决node编译oom问题" class="headerlink" title="问题记录: 解决node编译oom问题"></a>问题记录: 解决node编译oom问题</h5><h6 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h6><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825172156810.png" alt="image-20210825172156810"></p><h6 id="问题原因-1"><a href="#问题原因-1" class="headerlink" title="问题原因:"></a>问题原因:</h6><p>该问题是由于前端代码问题导致的 node 编译 OOM ，旧版本暂时没有此类问题，故推荐使用 release <a href="https://github.com/Tencent/bk-cmdb/releases/tag/release-v3.9.5">v3.9.5</a> 的源码</p><p><a href="https://github.com/Tencent/bk-cmdb/issues/5341">官方 github issue 记录</a></p><p><a href="https://tareya.github.io/2021/08/26/node-%E7%BC%96%E8%AF%91-JavaScript-heap-out-of-memory-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">类似问题解决方法</a></p><h3 id="3、打包镜像"><a href="#3、打包镜像" class="headerlink" title="3、打包镜像"></a>3、打包镜像</h3><h4 id="1）打包前后端编译结果"><a href="#1）打包前后端编译结果" class="headerlink" title="1）打包前后端编译结果"></a>1）打包前后端编译结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make package<br></code></pre></td></tr></table></figure><p>归档包存放位置：<code>~/go/src/configcenter/src/bin/pub/cmdb.tar.gz</code></p><h4 id="2）镜像制作"><a href="#2）镜像制作" class="headerlink" title="2）镜像制作"></a>2）镜像制作</h4><p>解压cmdb.tar.gz，进入cmdb目录执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -i 参数后面配置的参数是基础镜像，基础镜像可以自己制作，也可以使用公共镜像。v</span><br>./image.sh -i &lt;base_image&gt;<br></code></pre></td></tr></table></figure><h2 id="三、部署"><a href="#三、部署" class="headerlink" title="三、部署"></a>三、部署</h2><h3 id="1、依赖的三方组件清单"><a href="#1、依赖的三方组件清单" class="headerlink" title="1、依赖的三方组件清单"></a>1、依赖的三方组件清单</h3><ul><li>ZooKeeper &gt;= 3.4.11</li><li>Redis &gt;= 3.2.11</li><li>MongoDB &gt;= 4.2</li><li>Elasticsearch &gt;= 7.0.0 (用于全文检索功能)</li><li>Monstache &gt;= 6.0.0 (用于全文检索功能)</li></ul><h3 id="2、Docker-部署-Zookeeper（单机）"><a href="#2、Docker-部署-Zookeeper（单机）" class="headerlink" title="2、Docker 部署 Zookeeper（单机）"></a>2、Docker 部署 Zookeeper（单机）</h3><p><a href="https://zookeeper.apache.org/">Zookeeper 官网地址</a></p><h4 id="1）环境准备"><a href="#1）环境准备" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-3-4-12-版本）"><a href="#1-拉取镜像-（官方推荐-3-4-12-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 3.4.12 版本）"></a>1. 拉取镜像 （官方推荐 3.4.12 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull zookeeper:3.4.12<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录"><a href="#2-创建持久化目录" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/zookeepr/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件"><a href="#2）编辑配置文件" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件"><a href="#1-新建配置文件" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/zookeepr/conf/zoo.cfg</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">clientPort=2181<br>dataDir=/data<br>dataLogDir=/datalog<br>tickTime=2000<br></code></pre></td></tr></table></figure><h5 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>clientPort</td><td>zookeeper 监听端口</td></tr><tr><td>dataDir</td><td>Zookeeper 保存数据的目录</td></tr><tr><td>dataLogDir</td><td>Zookeeper 保存日志的目录</td></tr><tr><td>tickTime</td><td>Zookeeper 服务之间或与客户端之间心跳检测的间隔时间</td></tr></tbody></table><h4 id="3）启动容器"><a href="#3）启动容器" class="headerlink" title="3）启动容器"></a>3）启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name zookeeper -p 2181:2181 -v /data/bk-cmdb/zookeepr/data:/data -v /data/bk-cmdb/zookeepr/log:/datalog -v /etc/localtime:/etc/localtime --restart=always zookeeper:3.4.12<br></code></pre></td></tr></table></figure><h3 id="3、部署-Redis"><a href="#3、部署-Redis" class="headerlink" title="3、部署 Redis"></a>3、部署 Redis</h3><h4 id="1）环境准备-1"><a href="#1）环境准备-1" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-3-2-11-版本）"><a href="#1-拉取镜像-（官方推荐-3-2-11-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 3.2.11 版本）"></a>1. 拉取镜像 （官方推荐 3.2.11 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis:3.2.11-alpine<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-1"><a href="#2-创建持久化目录-1" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/redis/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-1"><a href="#2）编辑配置文件-1" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-1"><a href="#1-新建配置文件-1" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/redis/conf/redis.conf</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">port 6379<br>bind 0.0.0.0<br>loglevel notice<br>logfile &quot;/tmp/redis.log&quot;<br><br>dbfilename dump.rdb<br>dir ./<br>save 900 1<br>stop-writes-on-bgsave-error yes<br>rdbcompression yes<br>rdbchecksum yes<br><br>daemonize no<br>protected-mode no<br>requirepass &#x27;PassWord@123&#x27;<br><br>maxmemory 1g<br>maxmemory-policy volatile-lru<br></code></pre></td></tr></table></figure><h5 id="2-参数说明-1"><a href="#2-参数说明-1" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>port</td><td>redis 监听端口</td></tr><tr><td>bind</td><td>redis 监听地址，由于容器启动，故使用 0.0.0.0</td></tr><tr><td>loglevel</td><td>日志级别</td></tr><tr><td>logfile</td><td>redis 日志文件保存路径</td></tr><tr><td>dbfilename</td><td>开启 rdb 持久化</td></tr><tr><td>dir</td><td>持久化文件保存路径</td></tr><tr><td>save</td><td>满足条件则刷入持久化文件</td></tr><tr><td>stop-writes-on-bgsave-error</td><td>后台save出错,前台要停止写操作</td></tr><tr><td>rdbcompression</td><td>是否对 rdb 持久化进行数据压缩</td></tr><tr><td>rdbchecksum</td><td>是否对 rdb 持久化进行数据校验</td></tr><tr><td>daemonize</td><td>是否以后台方式启动，容器启动选择 no</td></tr><tr><td>protected-mode</td><td>关闭保护模式，允许所有 IP 访问</td></tr><tr><td>requirepass</td><td>开启认证，设置认证密码</td></tr><tr><td>maxmemory</td><td>允许使用的最大内存</td></tr><tr><td>maxmemory-policy</td><td>内存到达最大值时，key 回收的机制</td></tr></tbody></table><h4 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">docker run -itd --name redis -p 6379:6379 -v /data/bk-cmdb/redis/conf/redis.conf:/etc/redis/redis.conf -v /data/bk-cmdb/redis/data:/data -v /data/bk-cmdb/redis/log:/tmp -v /etc/localtime:/etc/localtime --restart=always redis:3.2.11-alpine <br></code></pre></td></tr></table></figure><h3 id="4、部署-MongoDB"><a href="#4、部署-MongoDB" class="headerlink" title="4、部署 MongoDB"></a>4、部署 MongoDB</h3><h4 id="1）环境准备-2"><a href="#1）环境准备-2" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-4-2-8-版本）"><a href="#1-拉取镜像-（官方推荐-4-2-8-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 4.2.8 版本）"></a>1. 拉取镜像 （官方推荐 4.2.8 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mongo:4.2.8<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-2"><a href="#2-创建持久化目录-2" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/mongodb/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-2"><a href="#2）编辑配置文件-2" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-2"><a href="#1-新建配置文件-2" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/mongodb/conf/mongod.conf.orig</code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">dbPath:</span> <span class="hljs-string">/data/db</span><br>  <span class="hljs-attr">journal:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#  engine:</span><br><span class="hljs-comment">#  mmapv1:</span><br><span class="hljs-comment">#  wiredTiger:</span><br><br><span class="hljs-comment"># where to write logging data.</span><br><span class="hljs-comment">#systemLog:</span><br><span class="hljs-comment">#  destination: file</span><br><span class="hljs-comment">#  logAppend: true</span><br><span class="hljs-comment">#  path: /var/log/mongodb/mongod.log</span><br><br><span class="hljs-comment"># network interfaces</span><br><span class="hljs-attr">net:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">27017</span><br><span class="hljs-comment">#开启远程访问</span><br>  <span class="hljs-attr">bindIp:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><br><br><span class="hljs-comment"># how the process runs</span><br><span class="hljs-attr">processManagement:</span><br>  <span class="hljs-attr">timeZoneInfo:</span> <span class="hljs-string">/usr/share/zoneinfo</span><br><br><span class="hljs-attr">setParameter:</span><br>   <span class="hljs-attr">enableLocalhostAuthBypass:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment">#security:</span><br><span class="hljs-comment">#  authorization: enable</span><br>  <br><span class="hljs-comment">#operationProfiling:</span><br><span class="hljs-comment">#副本集配置内容。</span><br><span class="hljs-attr">replication:</span><br>  <span class="hljs-attr">replSetName:</span> <span class="hljs-string">es</span><br>  <span class="hljs-attr">oplogSizeMB:</span> <span class="hljs-number">10240</span><br></code></pre></td></tr></table></figure><h5 id="2-参数说明-2"><a href="#2-参数说明-2" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>storage.dbPath</td><td>mongodb数据文件保存路径</td></tr><tr><td>storage.journal.enabled</td><td>记录操作日志，防止数据丢失</td></tr><tr><td>systemLog.destination</td><td>日志输出目标，file 或 syslog; 不配置则标准输出（容器推荐）</td></tr><tr><td>net.port</td><td>监听端口</td></tr><tr><td>net.bindIp</td><td>监听IP地址</td></tr><tr><td>processManagement.timeZoneInfo</td><td>时区配置</td></tr><tr><td>security.authorization</td><td>开启 auth 认证</td></tr><tr><td>replication.replSetName</td><td>副本集配置，副本集名称</td></tr><tr><td>replication.oplogSizeMB</td><td>副本集配置，指定oplog的最大尺寸</td></tr><tr><td>enableLocalhostAuthBypass</td><td>限制第一个用户也受 auth 认证控制</td></tr></tbody></table><h4 id="3）启动容器-1"><a href="#3）启动容器-1" class="headerlink" title="3）启动容器"></a>3）启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name mongodb -p 27017:27017 -e &quot;TZ=Asia/Shanghai&quot; -v /data/bk-cmdb/mongodb/conf/mongod.conf.orig:/etc/mongod.conf.orig -v /data/bk-cmdb/mongodb/data:/data/db -v /etc/localtime:/etc/localtime --restart=always mongo:4.2.8 --config /etc/mongod.conf.orig<br></code></pre></td></tr></table></figure><h3 id="5、配置数据库"><a href="#5、配置数据库" class="headerlink" title="5、配置数据库"></a>5、配置数据库</h3><h4 id="1）创建管理用户"><a href="#1）创建管理用户" class="headerlink" title="1）创建管理用户"></a>1）创建管理用户</h4><h5 id="1-进入容器"><a href="#1-进入容器" class="headerlink" title="1. 进入容器"></a>1. 进入容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mongodb /bin/bash<br></code></pre></td></tr></table></figure><h5 id="2-连接-mongo"><a href="#2-连接-mongo" class="headerlink" title="2. 连接 mongo"></a>2. 连接 mongo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mongo<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826165034092.png" alt="image-20210826165034092"></p><blockquote><p>⚠️ <strong>注意:</strong> </p><p>在启动 mongo 容器中，我们注释掉了 auth 认证，这是为了创建管理用户，否则我们无法进行认证，但是这种情况会导致风险报警，所以在创建完管理用户后，要将认证配置打开。</p></blockquote><h5 id="3-创建管理员用户"><a href="#3-创建管理员用户" class="headerlink" title="3. 创建管理员用户"></a>3. 创建管理员用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接 mongo 后，执行</span><br>use admin<br>db.createUser(&#123;user:&#x27;admin&#x27;, pwd:&#x27;admin&#x27;, roles:[&#123;role:&#x27;root&#x27;,db:&#x27;admin&#x27;&#125;]&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826165251592.png" alt="image-20210826165251592"></p><h5 id="4-打开-auth-配置"><a href="#4-打开-auth-配置" class="headerlink" title="4. 打开 auth 配置"></a>4. 打开 auth 配置</h5><p>文件路径: <code>/data/bk-cmdb/mongodb/conf/mongod.conf.orig</code>，取消 auth 的注释:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ...</span><br><br>security:<br>  authorization: enabled<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> ...</span><br></code></pre></td></tr></table></figure><h5 id="5-重启mongo容器"><a href="#5-重启mongo容器" class="headerlink" title="5. 重启mongo容器"></a>5. 重启mongo容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart mongodb<br></code></pre></td></tr></table></figure><h5 id="6-再次进入容器并连接-mongo，并认证"><a href="#6-再次进入容器并连接-mongo，并认证" class="headerlink" title="6. 再次进入容器并连接 mongo，并认证"></a>6. 再次进入容器并连接 mongo，并认证</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826161721885.png" alt="image-20210826161721885"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">use admin<br>db.auth(&#x27;admin&#x27;,&#x27;admin&#x27;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826165917027.png" alt="image-20210826165917027"></p><h4 id="2）配置-mongo-副本集"><a href="#2）配置-mongo-副本集" class="headerlink" title="2）配置 mongo 副本集"></a>2）配置 mongo 副本集</h4><blockquote><p>⚠️ <strong>注意:</strong></p><p>如果 mongo 是以副本集的方式启动的，需要对副本集进行初始化</p><p><code>replSetName</code> 即副本集的名称 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接mongo，并认证后执行</span><br><span class="hljs-meta">#</span><span class="bash"> _id 即使用 replSetName, host 为实例的 IP:Port</span><br>rs.initiate(&#123; _id : &quot;es&quot;,members: [&#123; _id: 0, host: &quot;192.168.3.206:27017&quot; &#125;]&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826171334054.png" alt="image-20210826171334054"></p><h4 id="3）创建-cmdb-库和用户"><a href="#3）创建-cmdb-库和用户" class="headerlink" title="3）创建 cmdb 库和用户"></a>3）创建 cmdb 库和用户</h4><h5 id="1-不使用-es-做全文检索"><a href="#1-不使用-es-做全文检索" class="headerlink" title="1. 不使用 es 做全文检索"></a>1. 不使用 es 做全文检索</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接mongo，并认证后执行</span><br>use cmdb<br>db.createUser(&#123;user: &quot;cc&quot;,pwd: &quot;cc&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;cmdb&quot; &#125; ]&#125;)<br></code></pre></td></tr></table></figure><h5 id="2-使用-mongo-monstache-es-做全文检索（本文选择）"><a href="#2-使用-mongo-monstache-es-做全文检索（本文选择）" class="headerlink" title="2. 使用 mongo + monstache + es 做全文检索（本文选择）"></a>2. 使用 mongo + monstache + es 做全文检索（本文选择）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接mongo，并认证后执行</span><br>use cmdb<br>db.createUser(&#123;user: &quot;cc&quot;,pwd: &quot;cc&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;cmdb&quot; &#125;,&#123; role: &quot;readWrite&quot;, db: &quot;monstache&quot; &#125; ]&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826170838042.png" alt="image-20210826170838042"></p><h3 id="6、部署-Elasticsearch（可选）"><a href="#6、部署-Elasticsearch（可选）" class="headerlink" title="6、部署 Elasticsearch（可选）"></a>6、部署 Elasticsearch（可选）</h3><h4 id="1）环境准备-3"><a href="#1）环境准备-3" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-7-0-0-版本）"><a href="#1-拉取镜像-（官方推荐-7-0-0-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 7.0.0 版本）"></a>1. 拉取镜像 （官方推荐 7.0.0 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.0.0<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-3"><a href="#2-创建持久化目录-3" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/elasticsearch/&#123;conf,data,log,plugins&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-3"><a href="#2）编辑配置文件-3" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-3"><a href="#1-新建配置文件-3" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/elasticsearch/conf/elasticsearch.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;network.host: 0.0.0.0&quot; &gt;&gt; /data/bk-cmdb/elasticsearch/conf/elasticsearch.yml<br></code></pre></td></tr></table></figure><h5 id="2-参数说明-3"><a href="#2-参数说明-3" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>network.host</td><td>es 监听端口</td></tr></tbody></table><h4 id="3）运行容器"><a href="#3）运行容器" class="headerlink" title="3）运行容器"></a>3）运行容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name elasticsearch -p 9200:9200 -p 9300:9300  -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -v /data/bk-cmdb/elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /data/bk-cmdb/elasticsearch/data:/usr/share/elasticsearch/data -v /data/bk-cmdb/elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /etc/localtime:/etc/localtime  elasticsearch:7.0.0 <br></code></pre></td></tr></table></figure><h3 id="7、部署-Monstache（可选）"><a href="#7、部署-Monstache（可选）" class="headerlink" title="7、部署 Monstache（可选）"></a>7、部署 Monstache（可选）</h3><h4 id="1）环境准备-4"><a href="#1）环境准备-4" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="Monstache-Mongodb-Es-版本选择"><a href="#Monstache-Mongodb-Es-版本选择" class="headerlink" title="Monstache-Mongodb-Es 版本选择:"></a><strong>Monstache-Mongodb-Es 版本选择:</strong></h5><table><thead><tr><th>Monstache version</th><th>Git branch (used to build plugin)</th><th>Docker tag</th><th>Description</th><th>Elasticsearch</th><th>MongoDB</th></tr></thead><tbody><tr><td>3</td><td>rel3</td><td>rel3</td><td>mgo community go driver</td><td>Versions 2 and 5</td><td>Version 3</td></tr><tr><td>4</td><td>master</td><td>rel4 (note this used to be latest)</td><td>mgo community go driver</td><td>Version 6</td><td>Version 3</td></tr><tr><td>5</td><td>rel5</td><td>rel5</td><td>MongoDB, Inc. go driver</td><td>Version 6</td><td>Version 4</td></tr><tr><td>6</td><td>rel6</td><td>rel6, latest</td><td>MongoDB, Inc. go driver</td><td>Version 7</td><td>Version 4</td></tr></tbody></table><h5 id="1-拉取镜像-（官方推荐-rel6-版本）"><a href="#1-拉取镜像-（官方推荐-rel6-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 rel6 版本）"></a>1. 拉取镜像 （官方推荐 rel6 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull rwynn/monstache:rel6<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-4"><a href="#2-创建持久化目录-4" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/monstache/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-4"><a href="#2）编辑配置文件-4" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-4"><a href="#1-新建配置文件-4" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/monstache/conf/config.toml</code>，文件内容如下:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># cmdb connection settings</span><br><br><span class="hljs-comment"># connect to MongoDB using the following URL</span><br><span class="hljs-attr">mongo-url</span> =  <span class="hljs-string">&quot;mongodb://cc:cc@192.168.3.206:27017/cmdb&quot;</span><br><span class="hljs-comment"># connect to the Elasticsearch REST API at the following node URLs</span><br><span class="hljs-attr">elasticsearch-urls</span> = [<span class="hljs-string">&quot;http://192.168.3.206:9200&quot;</span>]<br><br><span class="hljs-comment"># frequently required settings</span><br><br><span class="hljs-comment"># if you need to seed an index from a collection and not just listen and sync changes events</span><br><span class="hljs-comment"># you can copy entire collections or views from MongoDB to Elasticsearch</span><br><span class="hljs-attr">direct-read-namespaces</span> = [<span class="hljs-string">&quot;cmdb.cc_ApplicationBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_HostBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjectBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjDes&quot;</span>]<br><br><span class="hljs-comment"># if you want to use MongoDB change streams instead of legacy oplog tailing use change-stream-namespaces</span><br><span class="hljs-comment"># change streams require at least MongoDB API 3.6+</span><br><span class="hljs-comment"># if you have MongoDB 4+ you can listen for changes to an entire database or entire deployment</span><br><span class="hljs-comment"># in this case you usually don&#x27;t need regexes in your config to filter collections unless you target the deployment.</span><br><span class="hljs-comment"># to listen to an entire db use only the database name.  For a deployment use an empty string.</span><br><span class="hljs-attr">change-stream-namespaces</span> = [<span class="hljs-string">&quot;cmdb.cc_ApplicationBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_HostBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjectBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjDes&quot;</span>]<br><br><span class="hljs-comment"># additional settings</span><br><br><span class="hljs-comment"># compress requests to Elasticsearch</span><br><span class="hljs-attr">gzip</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># use the following user name for Elasticsearch basic auth</span><br><span class="hljs-attr">elasticsearch-user</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># use the following password for Elasticsearch basic auth</span><br><span class="hljs-attr">elasticsearch-password</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># use 4 go routines concurrently pushing documents to Elasticsearch</span><br><span class="hljs-attr">elasticsearch-max-conns</span> = <span class="hljs-number">4</span> <br><span class="hljs-comment"># propagate dropped collections in MongoDB as index deletes in Elasticsearch</span><br><span class="hljs-attr">dropped-collections</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># propagate dropped databases in MongoDB as index deletes in Elasticsearch</span><br><span class="hljs-attr">dropped-databases</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># resume processing from a timestamp saved in a previous run</span><br><span class="hljs-attr">resume</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># do not validate that progress timestamps have been saved</span><br><span class="hljs-attr">resume-write-unsafe</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment"># override the name under which resume state is saved</span><br><span class="hljs-attr">resume-name</span> = <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-comment"># use a custom resume strategy (tokens) instead of the default strategy (timestamps)</span><br><span class="hljs-comment"># tokens work with MongoDB API 3.6+ while timestamps work only with MongoDB API 4.0+</span><br><span class="hljs-attr">resume-strategy</span> = <span class="hljs-number">0</span><br><span class="hljs-comment"># print detailed information including request traces</span><br><span class="hljs-attr">verbose</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># mapping settings</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_ApplicationBase&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_applicationbase&quot;</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_HostBase&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_hostbase&quot;</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_ObjectBase&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_objectbase&quot;</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_ObjDes&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_objdes&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-参数说明-4"><a href="#2-参数说明-4" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>mongo-url</td><td>MongoDB实例的主节点访问地址。详情请参见。<a href="https://rwynn.github.io/monstache-site/config/#mongo-url">mongo-url</a>，开启认证后配置为 <code>mongodb://user:password@host/dbname</code></td></tr><tr><td>elasticsearch-urls</td><td>Elasticsearch的访问地址。详情请参见 <a href="https://rwynn.github.io/monstache-site/config/#elasticsearch-urls">elasticsearch-urls</a></td></tr><tr><td>direct-read-namespaces</td><td>指定待同步的集合，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#direct-read-namespaces">direct-read-namespaces</a>。</td></tr><tr><td>change-stream-namespaces</td><td>如果要使用MongoDB变更流功能，需要指定此参数。启用此参数后，oplog追踪会被设置为无效，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#change-stream-namespaces">change-stream-namespaces</a>。</td></tr><tr><td>namespace-regex</td><td>通过正则表达式指定需要监听的集合。此设置可以用来监控符合正则表达式的集合中数据的变化。</td></tr><tr><td>elasticsearch-user</td><td>访问Elasticsearch的用户名。</td></tr><tr><td>elasticsearch-password</td><td>访问Elasticsearch的用户密码。</td></tr><tr><td>elasticsearch-max-conns</td><td>定义连接ES的线程数。默认为4，即使用4个Go线程同时将数据同步到ES。</td></tr><tr><td>dropped-collections</td><td>默认为true，表示当删除MongoDB集合时，会同时删除ES中对应的索引。</td></tr><tr><td>dropped-databases</td><td>默认为true，表示当删除MongoDB数据库时，会同时删除ES中对应的索引。</td></tr><tr><td>resume</td><td>默认为false。设置为true，Monstache会将已成功同步到ES的MongoDB操作的时间戳写入monstache.monstache集合中。当Monstache因为意外停止时，可通过该时间戳恢复同步任务，避免数据丢失。如果指定了cluster-name，该参数将自动开启，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#resume">resume</a>。</td></tr><tr><td>resume-strategy</td><td>指定恢复策略。仅当resume为true时生效，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#resume-strategy">resume-strategy</a>。</td></tr><tr><td>verbose</td><td>默认为false，表示不启用调试日志。</td></tr><tr><td>cluster-name</td><td>指定集群名称。指定后，Monstache将进入高可用模式，集群名称相同的进程将进行协调，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#cluster-name">cluster-name</a>。</td></tr><tr><td>mapping</td><td>指定ES索引映射。默认情况下，数据从MongoDB同步到ES时，索引会自动映射为<code>数据库名.集合名</code>。如果需要修改索引名称，可通过该参数设置，详情请参见<a href="https://rwynn.github.io/monstache-site/advanced/#index-mapping">Index Mapping</a>。</td></tr></tbody></table><h4 id="3）启动容器-2"><a href="#3）启动容器-2" class="headerlink" title="3）启动容器"></a>3）启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name monstache -v /data/bk-cmdb/monstache/conf/config.toml:/app/monstache.config.toml -v /etc/localtime:/etc/localtime --restart=always rwynn/monstache:rel6 -f /app/monstache.config.toml<br></code></pre></td></tr></table></figure><h3 id="8、部署蓝鲸"><a href="#8、部署蓝鲸" class="headerlink" title="8、部署蓝鲸"></a>8、部署蓝鲸</h3><h4 id="1）解压编译后的-cmdb-tar-gz"><a href="#1）解压编译后的-cmdb-tar-gz" class="headerlink" title="1）解压编译后的 cmdb.tar.gz"></a>1）解压编译后的 <code>cmdb.tar.gz</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf ~/go/src/configcenter/src/bin/pub/cmdb.tar.gz -C /data/softwares &amp;&amp; \<br>cd /data/softwares/cmdb<br></code></pre></td></tr></table></figure><h4 id="2）初始化配置"><a href="#2）初始化配置" class="headerlink" title="2）初始化配置"></a>2）初始化配置</h4><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">python init.py  \<br>      --discovery          192.168.3.206:2181 \<br>      --database           cmdb \<br>      --redis_ip           192.168.3.206 \<br>      --redis_port         6379 \<br>      --redis_pass         PassWord@123 \<br>      --mongo_ip           192.168.3.206 \<br>      --mongo_port         27017 \<br>      --mongo_user         cc \<br>      --mongo_pass         cc \<br>      --rs_name            es \<br>      --blueking_cmdb_url  http://bk-cmdb.example.com:80 \<br>      --listen_port        8083 \<br>      --auth_scheme        internal \<br>      --auth_enabled       false \<br>      --auth_sync_workers  1 \<br>      --auth_sync_interval_minutes  45 \<br>      --full_text_search   on \<br>      --es_url             http://192.168.3.206:9200 \<br>      --es_user            cc \<br>      --es_pass            cc \<br>      --log_level          3 \<br>      --register_ip        192.168.3.206 \<br>      --user_info          admin:admin<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826175509596.png" alt="image-20210826175509596"></p><p>生成的配置文件如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826175651688.png" alt="image-20210826175651688"></p><h5 id="2-init-py-参数详解："><a href="#2-init-py-参数详解：" class="headerlink" title="2. init.py 参数详解："></a>2. init.py 参数详解：</h5><table><thead><tr><th>参数</th><th>用途说明</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>–discovery</td><td>服务发现组件，ZooKeeper 服务地址</td><td>是</td><td>无</td></tr><tr><td>–database</td><td>数据库名字</td><td>mongodb 中数据库名</td><td>否</td></tr><tr><td>–redis_ip</td><td>Redis监听的IP</td><td>是</td><td>无</td></tr><tr><td>–redis_port</td><td>Redis监听的端口</td><td>否</td><td>6379</td></tr><tr><td>–redis_pass</td><td>Redis登陆密码</td><td>是</td><td>无</td></tr><tr><td>–mongo_ip</td><td>MongoDB服务监听的IP</td><td>是</td><td>无</td></tr><tr><td>–mongo_port</td><td>MongoDB端口</td><td>否</td><td>27017</td></tr><tr><td>–mongo_user</td><td>MongoDB中CMDB数据库用户名</td><td>是</td><td>无</td></tr><tr><td>–mongo_pass</td><td>MongoDB中CMDB数据库用户名密码</td><td>是</td><td>无</td></tr><tr><td>–blueking_cmdb_url</td><td>该值表示部署完成后,输入到浏览器中访问的cmdb 网址, 格式: <a href="http://xx.xxx.com/">http://xx.xxx.com:80</a>, 用户自定义填写;在没有配置 DNS 解析的情况下, 填写服务器的 IP:PORT。端口为当前cmdb_webserver监听的端口。</td><td>是</td><td>无</td></tr><tr><td>–blueking_paas_url</td><td>蓝鲸PAAS 平台的地址，对于独立部署的CC版本可以不配置</td><td>否</td><td>无</td></tr><tr><td>–listen_port</td><td>cmdb_webserver服务监听的端口，默认是8083</td><td>是</td><td>8083</td></tr><tr><td>–full_text_search</td><td>全文检索功能开关(取值：off/on)，默认是off，开启是on</td><td>否</td><td>off</td></tr><tr><td>–es_url</td><td>elasticsearch服务监听url，默认是<a href="http://192.168.3.206:9200/">http://192.168.3.206:9200</a></td><td>否</td><td><a href="http://192.168.3.206:9200/">http://192.168.3.206:9200</a></td></tr><tr><td>–auth_scheme</td><td>权限模式，web页面使用，可选值: internal, iam</td><td>否</td><td>internal</td></tr><tr><td>–auth_enabled</td><td>是否采用蓝鲸权限中心鉴权</td><td>否</td><td>false</td></tr><tr><td>–auth_address</td><td>蓝鲸权限中心地址</td><td>auth_enabled 为真时必填</td><td><a href="https://iam.domain.com/">https://iam.domain.com/</a></td></tr><tr><td>–auth_app_code</td><td>cmdb项目在蓝鲸权限中心的应用编码</td><td>auth_enabled 为真时必填</td><td>bk_cmdb</td></tr><tr><td>–auth_app_secret</td><td>cmdb项目在蓝鲸权限中心的应用密钥</td><td>auth_enabled 为真时必填</td><td>xxxxxxx</td></tr><tr><td>–log_level</td><td>日志级别0-9, 9日志最详细</td><td>否</td><td>3</td></tr><tr><td>–register_ip</td><td>进程注册到zookeeper上的IP地址，可以是域名</td><td>否</td><td>无</td></tr><tr><td>–user_info</td><td>登陆 web 页面的账号密码</td><td>否</td><td>无</td></tr></tbody></table><blockquote><p>🚩 init.py 执行成功后会自动生成cmdb各服务进程所需要的配置。</p></blockquote><h4 id="3）启动服务"><a href="#3）启动服务" class="headerlink" title="3）启动服务"></a>3）启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/cmdb &amp;&amp; \<br>./start.sh<br></code></pre></td></tr></table></figure><h5 id="问题记录-adminserver-redis-认证问题"><a href="#问题记录-adminserver-redis-认证问题" class="headerlink" title="问题记录: adminserver redis 认证问题"></a>问题记录: adminserver redis 认证问题</h5><h6 id="错误信息-1"><a href="#错误信息-1" class="headerlink" title="错误信息:"></a>错误信息:</h6><p>启动服务时，部分服务无法正常启动，特别是管理配置的 adminserver</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827130549678.png" alt="image-20210827130549678"></p><p>查看日志后，问题的原因在于 redis 的认证上</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827130612873.png" alt="image-20210827130612873"></p><h6 id="问题原因-2"><a href="#问题原因-2" class="headerlink" title="问题原因:"></a>问题原因:</h6><p>redis 开启认证后，在内存中并没有确实的生成对应的key，导致程序在加载配置时，无法正确加载认证配置（程序读取的是本地 redis 的 config 中的 key <code>requirepass</code>）</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827130902618.png" alt="image-20210827130902618"></p><h6 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案:"></a>解决方案:</h6><p>因此只要将 key 对应的值（也就是我们设置的密码） set 到 redis 中，即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG SET requirepass myPassword<br></code></pre></td></tr></table></figure><h4 id="4）初始化数据库"><a href="#4）初始化数据库" class="headerlink" title="4）初始化数据库"></a>4）初始化数据库</h4><blockquote><p>⚠️ <strong>注意:</strong>  <strong>此步骤必需要所有cmdb进程成功启动后执行。</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/cmdb &amp;&amp; \<br>./init_db.sh<br></code></pre></td></tr></table></figure><p>返回值中返回 <code>migrate_success</code>，即数据库初始化成功</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827131349118.png" alt="image-20210827131349118"></p><h4 id="5）停止服务"><a href="#5）停止服务" class="headerlink" title="5）停止服务"></a>5）停止服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/cmdb &amp;&amp; \<br>./stop.sh<br></code></pre></td></tr></table></figure><h2 id="四、效果展示"><a href="#四、效果展示" class="headerlink" title="四、效果展示"></a>四、效果展示</h2><p><strong>打开浏览器:</strong> 输入 cmdb_webserver 监听的地址，如本文档中示例服务监听的地址: <a href="http://bk-cmdb.example.com/">http://bk-cmdb.example.com</a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827141908936.png" alt="image-20210827141908936"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将配置文件反向持久化至 Kubernetes Configmap 解决方案</title>
    <link href="/2021/08/30/%E5%B0%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8D%E5%90%91%E6%8C%81%E4%B9%85%E5%8C%96%E8%87%B3-Kubernetes-Configmap-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/30/%E5%B0%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8D%E5%90%91%E6%8C%81%E4%B9%85%E5%8C%96%E8%87%B3-Kubernetes-Configmap-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="将配置文件反向持久化至-Kubernetes-Configmap-解决方案"><a href="#将配置文件反向持久化至-Kubernetes-Configmap-解决方案" class="headerlink" title="将配置文件反向持久化至 Kubernetes Configmap 解决方案"></a>将配置文件反向持久化至 Kubernetes Configmap 解决方案</h1><span id="more"></span><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>近期产线环境发生的一起程序导致的离奇问题，相应模块由 PHP 开发，使用 consul 作为配管中心，统一管理一些通用性配置，公司研发自己造轮子二开的 swoole 框架，会以循环的方式读取 consul 的公共配置（主要是一些连接数据库、中间件信息的配置），并结合本地源码中的配置信息生成最终使用版本的配置，记录在一个临时文件中，并最终加载至内存。</p><p>也就是说，这个临时文件中记录着当前服务进程实际使用的配置，是否存在问题，一定程度上是可以从中了解到的。但是也存在一个问题，该文件仅为一临时文件并不永久性保留，且程序启动设定为一旦重启就会重新拉取 consul 的配置并生成新的临时文件覆盖掉原来的文件（实际上是一种减少代码发布，讨巧取懒的方法，因为之前对公司的版本发布做了较严格的规范，但是也算是一种配置管理方式，当然个人比较推荐将业务相关配置作为数据库配置项，而非以配管这类并算不上安全的方式进行）。</p><p>回归正题，我们之前说过，临时文件记录这服务进程当前实际在使用的配置信息，这在排查问题的时候有一定的帮助，但是临时文件又没有持久化，一旦重启就会被覆盖（无论是自愈还是发版），这也导致实际在使用的配置信息并不存在版本概念，那么一旦出现要追溯版本的情况就只能抓瞎了。</p><p>实际上，目前产线出现的问题就是出现了这样的情况，因此出于 SRE 的需求，提出了本方案，对后续类似的问题，可以能有一个追溯问题的机会。</p><h2 id="二、原因追溯"><a href="#二、原因追溯" class="headerlink" title="二、原因追溯"></a>二、原因追溯</h2><h3 id="1、配置记录"><a href="#1、配置记录" class="headerlink" title="1、配置记录"></a>1、配置记录</h3><h4 id="1）consul-中对应的项目配置"><a href="#1）consul-中对应的项目配置" class="headerlink" title="1）consul 中对应的项目配置"></a>1）consul 中对应的项目配置</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830104627124.png" alt="image-20210830104627124"></p><h4 id="2）consul-中-redis-相关的通用配置（PHP用）"><a href="#2）consul-中-redis-相关的通用配置（PHP用）" class="headerlink" title="2）consul 中 redis 相关的通用配置（PHP用）"></a>2）consul 中 redis 相关的通用配置（PHP用）</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830103827383.png" alt="image-20210830103827383"></p><h4 id="3）项目生成临时文件中-redis-相关配置（实际使用）"><a href="#3）项目生成临时文件中-redis-相关配置（实际使用）" class="headerlink" title="3）项目生成临时文件中 redis 相关配置（实际使用）"></a>3）项目生成临时文件中 redis 相关配置（实际使用）</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830103639172.png" alt="image-20210830103639172"></p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="1、原理讲解"><a href="#1、原理讲解" class="headerlink" title="1、原理讲解"></a>1、原理讲解</h3><h3 id="2、方案实施"><a href="#2、方案实施" class="headerlink" title="2、方案实施"></a>2、方案实施</h3>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、项目管理基础</title>
    <link href="/2021/08/27/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/08/27/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、项目管理基础"><a href="#第1章、项目管理基础" class="headerlink" title="第1章、项目管理基础"></a>第1章、项目管理基础</h1><span id="more"></span><h2 id="一、十大知识点"><a href="#一、十大知识点" class="headerlink" title="一、十大知识点"></a>一、十大知识点</h2><blockquote><p>🌈 <strong>速记词：</strong></p><table><thead><tr><th>速记词</th><th>知识点</th></tr></thead><tbody><tr><td>范</td><td>范围管理</td></tr><tr><td>进</td><td>进度管理</td></tr><tr><td>整</td><td>整体管理</td></tr><tr><td>狗</td><td>沟通管理</td></tr><tr><td>子</td><td>质量管理</td></tr><tr><td>成</td><td>成本管理</td></tr><tr><td>人</td><td>人力资源管理</td></tr><tr><td>风</td><td>风险管理</td></tr><tr><td>采</td><td>采购管理</td></tr><tr><td>干杯</td><td>干系人管理</td></tr></tbody></table></blockquote><h2 id="二、五大过程组"><a href="#二、五大过程组" class="headerlink" title="二、五大过程组"></a>二、五大过程组</h2><h3 id="1、启动过程组"><a href="#1、启动过程组" class="headerlink" title="1、启动过程组"></a>1、启动过程组</h3><h3 id="2、计划过程组"><a href="#2、计划过程组" class="headerlink" title="2、计划过程组"></a>2、计划过程组</h3><h3 id="3、实施过程组"><a href="#3、实施过程组" class="headerlink" title="3、实施过程组"></a>3、实施过程组</h3><h3 id="4、监控过程组"><a href="#4、监控过程组" class="headerlink" title="4、监控过程组"></a>4、监控过程组</h3><h3 id="5、收尾过程组"><a href="#5、收尾过程组" class="headerlink" title="5、收尾过程组"></a>5、收尾过程组</h3>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node 编译 JavaScript heap out of memory 内存溢出问题解决方案</title>
    <link href="/2021/08/26/node-%E7%BC%96%E8%AF%91-JavaScript-heap-out-of-memory-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/26/node-%E7%BC%96%E8%AF%91-JavaScript-heap-out-of-memory-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="node-编译-JavaScript-heap-out-of-memory-内存溢出问题解决方案"><a href="#node-编译-JavaScript-heap-out-of-memory-内存溢出问题解决方案" class="headerlink" title="node 编译 JavaScript heap out of memory 内存溢出问题解决方案"></a>node 编译 JavaScript heap out of memory 内存溢出问题解决方案</h1><span id="more"></span><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>最近在使用node编译项目时，遇到了这样的错误，按照字面意思理解，就是内存溢出了。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825172156810.png" alt="image-20210825172156810"></p><h2 id="二、根因追溯"><a href="#二、根因追溯" class="headerlink" title="二、根因追溯"></a>二、根因追溯</h2><blockquote><p><a href="https://github.com/nodejs/node/wiki/FAQ">官方FAQ</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the memory <span class="hljs-keyword">limit</span> <span class="hljs-keyword">on</span> a node process?Currently, <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> v8 has a memory <span class="hljs-keyword">limit</span> <span class="hljs-keyword">of</span> <span class="hljs-number">512</span>MB <span class="hljs-keyword">on</span> <span class="hljs-number">32</span>-<span class="hljs-type">bit</span> systems, <span class="hljs-keyword">and</span> <span class="hljs-number">1.4</span>GB <span class="hljs-keyword">on</span> <span class="hljs-number">64</span>-<span class="hljs-type">bit</span> systems. The <span class="hljs-keyword">limit</span> can be raised <span class="hljs-keyword">by</span> setting <span class="hljs-comment">--max_old_space_size to a maximum of ~1024 (~1 GB) (32-bit) and ~4096 (~4GB) (64-bit), but it is recommended that you split your single process into several workers if you are hitting memory limits.</span><br></code></pre></td></tr></table></figure></blockquote><p>在官方给出的介绍中可以了解到，nodejs 的 v8 引擎默认给的内存配置比较小（64位系统：1.4 GB，32位系统：0.7 GB）并且内存大小最大为 4g，也就是说，如果前端项目非常的庞大，Webpack编译时就会占用很多的系统资源，如果超出了V8引擎对Node默认的内存限制大小时，就会产生内存泄露(JavaScript heap out of memory)的错误。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>既然问题已经非常明确了，那么解决起来也就比较容易了，解决的方案有以下三种:</p><h3 id="1、修改-bin-下的命令"><a href="#1、修改-bin-下的命令" class="headerlink" title="1、修改 ./bin 下的命令"></a>1、修改 ./bin 下的命令</h3><p><a href="https://www.cnblogs.com/liugang-vip/p/6857595.html">方案参考</a></p><h3 id="2、修改-node-参数-–max-old-space-size"><a href="#2、修改-node-参数-–max-old-space-size" class="headerlink" title="2、修改 node 参数 –max-old-space-size"></a>2、修改 node 参数 –max-old-space-size</h3><p>在项目的 package.json 文件的 script 模块中的 build 指令中添加 <code>--max-old-space-size=8192</code>，意思是将内存可使用内存调整到 8G，足够使用了（虽然官方建议如果使用较大内存的话则需要分成多个子 worker 这样来规避大内存的使用）</p><p>如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;node --max-old-space-size=8192 build/build.js&quot;</span>,<br>   <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、使用-increase-memory-limit"><a href="#3、使用-increase-memory-limit" class="headerlink" title="3、使用 increase-memory-limit"></a>3、使用 increase-memory-limit</h3><h4 id="1）下载-increase-memory-limit"><a href="#1）下载-increase-memory-limit" class="headerlink" title="1）下载 increase-memory-limit"></a>1）下载 <code>increase-memory-limit</code></h4><p><a href="https://www.npmjs.com/package/increase-memory-limit">npm包地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install increase-memory-limit<br></code></pre></td></tr></table></figure><h4 id="2）修改前端项目的-package-josn"><a href="#2）修改前端项目的-package-josn" class="headerlink" title="2）修改前端项目的 package.josn"></a>2）修改前端项目的 <code>package.josn</code></h4><p>文件路径: <code>~/go/src/configcenter/src/ui/package.json</code>，修改以下内容:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// ...</span><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;fix-memory-limit&quot;</span>: <span class="hljs-string">&quot;cross-env LIMIT=16384 increase-memory-limit&quot;</span>,<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br><span class="hljs-comment">// ...</span><br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;increase-memory-limit&quot;</span>: <span class="hljs-string">&quot;^1.0.3&quot;</span>,<br>    <span class="hljs-attr">&quot;cross-env&quot;</span>: <span class="hljs-string">&quot;^5.0.5&quot;</span><br>  &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="3）运行修复内存限制任务"><a href="#3）运行修复内存限制任务" class="headerlink" title="3）运行修复内存限制任务"></a>3）运行修复内存限制任务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run fix-memory-limit<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825171914179.png" alt="image-20210825171914179"></p><p>可以看出，这个包实际上就是自动处理方案一的过程。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 多版本管理工具 — g</title>
    <link href="/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/"/>
    <url>/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-多版本管理工具-—-g"><a href="#golang-多版本管理工具-—-g" class="headerlink" title="golang 多版本管理工具 — g"></a>golang 多版本管理工具 — g</h1><span id="more"></span><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1、什么是-g-？"><a href="#1、什么是-g-？" class="headerlink" title="1、什么是 g ？"></a>1、什么是 g ？</h3><p>GVM是一个golang虚拟环境配置工具，其允许一台机器上安装多个golang版本，gvm是第三方开发的Go多版本管理工具，类似ruby里面的rvm工具，或者nodejs的版本管理工具nvm。它是以shell脚本开发的工具，同时兼容bash和zsh，用法和ruby的rvm很像，能做到Go语言版本的切换以及GOPATH的修改。</p><h3 id="2、g-的特性"><a href="#2、g-的特性" class="headerlink" title="2、g 的特性"></a>2、g 的特性</h3><ul><li>支持列出可供安装的go版本号</li><li>支持列出已安装的go版本号</li><li>支持在本地安装多个go版本</li><li>支持卸载已安装的go版本</li><li>支持在已安装的go版本之间自由切换</li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1、Linux-macOS-下自动安装（使用于-bash、zsh-终端）"><a href="#1、Linux-macOS-下自动安装（使用于-bash、zsh-终端）" class="headerlink" title="1、Linux / macOS 下自动安装（使用于 bash、zsh 终端）"></a>1、Linux / macOS 下自动安装（使用于 bash、zsh 终端）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 建议安装前清空`GOROOT`、`GOBIN`等环境变量</span><br>wget -qO- https://raw.githubusercontent.com/voidint/g/master/install.sh | bash<br></code></pre></td></tr></table></figure><blockquote><p>🚩 如果有其他程序的别名占用了 <code>g</code>，比如 git，执行以下操作清除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unalias g<br></code></pre></td></tr></table></figure></blockquote><h3 id="2、手动安装-（可选）"><a href="#2、手动安装-（可选）" class="headerlink" title="2、手动安装 （可选）"></a>2、手动安装 （可选）</h3><h4 id="1）下载对应平台的二进制压缩包"><a href="#1）下载对应平台的二进制压缩包" class="headerlink" title="1）下载对应平台的二进制压缩包"></a>1）下载对应平台的二进制压缩包</h4><p><a href="https://github.com/voidint/g/releases">下载地址</a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825160732431.png" alt="image-20210825160732431"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 以当前最新版本为例</span><br>wget -c https://github.com/voidint/g/releases/download/v1.2.0/g1.2.0.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h4 id="2）解压缩"><a href="#2）解压缩" class="headerlink" title="2）解压缩"></a>2）解压缩</h4><p>将压缩包解压至<code>PATH</code>环境变量目录下，如<code>/usr/local/bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf g1.2.0.linux-amd64.tar.gz -C /usr/local/bin/<br></code></pre></td></tr></table></figure><h4 id="3）验证"><a href="#3）验证" class="headerlink" title="3）验证"></a>3）验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g -h<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825162431942.png" alt="image-20210825162431942"></p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><h4 id="1）编辑环境变量配置文件"><a href="#1）编辑环境变量配置文件" class="headerlink" title="1）编辑环境变量配置文件"></a>1）编辑环境变量配置文件</h4><p>新建文件，文件路径: <code>/etc/profile.d/g.sh</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export G_MIRROR=https://golang.google.cn/dl/<br>export G_HOME=~/.g<br>export GOROOT=$G_HOME/go<br>export PATH=$GOROOT/bin:$PATH<br></code></pre></td></tr></table></figure><h4 id="2）加载环境变量配置"><a href="#2）加载环境变量配置" class="headerlink" title="2）加载环境变量配置"></a>2）加载环境变量配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/g.sh<br></code></pre></td></tr></table></figure><blockquote><p>🌈 <code>G_MIRROR</code> 的作用:</p><p>由于中国大陆无法自由访问 Golang官网，导致查询及下载go版本都变得困难，因此可以通过该环境变量指定一个镜像站点（如<code>https://golang.google.cn/dl/</code>），g将从该站点查询、下载可用的go版本，其作用相当于 <code>GOPROXY</code> 之于 Go 的依赖包。</p></blockquote><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="1、安装-go-版本"><a href="#1、安装-go-版本" class="headerlink" title="1、安装 go 版本"></a>1、安装 go 版本</h3><h4 id="1）查询当前稳定版本的-go"><a href="#1）查询当前稳定版本的-go" class="headerlink" title="1）查询当前稳定版本的 go"></a>1）查询当前稳定版本的 go</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g ls-remote stable<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825162918755.png" alt="image-20210825162918755"></p><h4 id="2）安装目标-go-版本-1-16-7"><a href="#2）安装目标-go-版本-1-16-7" class="headerlink" title="2）安装目标 go 版本 1.16.7"></a>2）安装目标 go 版本 <code>1.16.7</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g install 1.16.7<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825163148164.png" alt="image-20210825163148164"></p><h4 id="3）验证-1"><a href="#3）验证-1" class="headerlink" title="3）验证"></a>3）验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g ls<br></code></pre></td></tr></table></figure><blockquote><p>🚩 带 <code>*</code> 的就表示当前正在使用的版本</p></blockquote><h3 id="2、常用命令详解"><a href="#2、常用命令详解" class="headerlink" title="2、常用命令详解"></a>2、常用命令详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">g ls # 查询已安装的go版本<br>g ls-remote # 查询可供安装的所有go版本<br>g ls-remote stable # 查询当前可供安装的stable状态的go版本<br>g install 1.16.7# 安装目标go版本1.16.7<br>g use 1.15.15 # 切换至1.15.15版本<br>g uninstall 1.15.15 # 卸载一个已安装的go版本<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、初识 GoAdmin</title>
    <link href="/2021/08/24/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-GoAdmin/"/>
    <url>/2021/08/24/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-GoAdmin/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、初识-GoAdmin"><a href="#第1章、初识-GoAdmin" class="headerlink" title="第1章、初识 GoAdmin"></a>第1章、初识 GoAdmin</h1><span id="more"></span><h2 id="一、GoAdmin-简介"><a href="#一、GoAdmin-简介" class="headerlink" title="一、GoAdmin 简介"></a>一、GoAdmin 简介</h2><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210824171658211.png" alt="GoAdmin Logo"></p><p><a href="https://github.com/go-admin-team/go-admin">GoAdmin 官方github</a></p><p><a href="https://doc.zhangwj.com/">GoAdmin 官网文档</a></p><h3 id="1、GoAdmin-是什么？"><a href="#1、GoAdmin-是什么？" class="headerlink" title="1、GoAdmin 是什么？"></a>1、GoAdmin 是什么？</h3><h4 id="1）项目特性"><a href="#1）项目特性" class="headerlink" title="1）项目特性"></a>1）项目特性</h4><h4 id="2）内置功能"><a href="#2）内置功能" class="headerlink" title="2）内置功能"></a>2）内置功能</h4><h3 id="2、GoAdmin-可以实现什么？"><a href="#2、GoAdmin-可以实现什么？" class="headerlink" title="2、GoAdmin 可以实现什么？"></a>2、GoAdmin 可以实现什么？</h3><h2 id="二、本地开发环境调试"><a href="#二、本地开发环境调试" class="headerlink" title="二、本地开发环境调试"></a>二、本地开发环境调试</h2><h3 id="1、实现准备"><a href="#1、实现准备" class="headerlink" title="1、实现准备"></a>1、实现准备</h3><h3 id="2、本地调试"><a href="#2、本地调试" class="headerlink" title="2、本地调试"></a>2、本地调试</h3>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GoAdmin 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab SSL 证书自动化续期解决方案</title>
    <link href="/2021/08/24/Gitlab-SSL-%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/24/Gitlab-SSL-%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitlab-SSL-证书自动续期解决方案"><a href="#Gitlab-SSL-证书自动续期解决方案" class="headerlink" title="Gitlab SSL 证书自动续期解决方案"></a>Gitlab SSL 证书自动续期解决方案</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、初识 Golang</title>
    <link href="/2021/08/21/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Golang/"/>
    <url>/2021/08/21/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Golang/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、初识-Golang"><a href="#第1章、初识-Golang" class="headerlink" title="第1章、初识 Golang"></a>第1章、初识 Golang</h1><span id="more"></span><h2 id="一-、Golang-简介"><a href="#一-、Golang-简介" class="headerlink" title="一 、Golang  简介"></a>一 、Golang  简介</h2><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/golang.jpeg" alt="golang"></p><h3 id="1、什么是-Golang-？"><a href="#1、什么是-Golang-？" class="headerlink" title="1、什么是 Golang ？"></a>1、什么是 Golang ？</h3><p>Golang 是一门高并发支持、垃圾回收的<strong>编译型</strong>系统编程语言，旨在创造一门即具有 C/C++ 这类静态编译语言的<strong>高性能</strong>，又具备 Python 这类动态语言的<strong>开发效率</strong>，并在两者之间获得良好平衡的编程语言。</p><p>相较于其他编程语言，Go 无疑是非常年轻的，它诞生于 2006年1月2日下午15点4份5秒，由Google公司开发，并于 2009年11月开源，2012年发布了第一个稳定版本。</p><p>它在多核并发上拥有原生的设计优势，将多线程并发、线程间通信的能力内置在语法层面，无需像 C/C++ 或者 java 那般借助各种第三方框架或者库去实现，大大减轻了分布式系统开发人员在实现底层功能上的负担。</p><p>目前世界上很多公司，特别是中国的互联网公司，即将或者已经完成了使用 Go 语言改造旧系统的过程（没错，和 Java 一样，Go 在中国可能相交于其出身地美国更火）。经过 Go 语言重构的系统能使用更少的硬件资源获得更高的并发和I/O吞吐表现。尤其是目前广泛运用的容器技术，诸如 docker、Kubernetes 等皆是基于 Golang 开发，这一类技术可以充分挖掘硬件设备的潜力，以更小的成本，实现同样的性能需求，这更加能都满足当前精细化运营的市场大环境。</p><h3 id="2、Golang-的主要特性介绍"><a href="#2、Golang-的主要特性介绍" class="headerlink" title="2、Golang  的主要特性介绍"></a>2、Golang  的主要特性介绍</h3><ul><li>数据类型安全  和 内存安全</li><li>高效率的垃圾回收机制</li><li>以非常直观和极低代价的方案实现高并发</li><li>快速编译（同时解决 C语言中头文件太多的问题）</li><li>跨平台性，支持交叉编译</li><li>为多核计算机提供高性能提升的方案</li><li>支持 UTF-8 编码</li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、部署 prometheus-operator</title>
    <link href="/2021/08/17/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%83%A8%E7%BD%B2-prometheus-operator/"/>
    <url>/2021/08/17/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%83%A8%E7%BD%B2-prometheus-operator/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、部署-prometheus-operator"><a href="#第1章、部署-prometheus-operator" class="headerlink" title="第1章、部署 prometheus-operator"></a>第1章、部署 prometheus-operator</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、k8s 部署 prometheus</title>
    <link href="/2021/08/17/%E7%AC%AC2%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-prometheus/"/>
    <url>/2021/08/17/%E7%AC%AC2%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-prometheus/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、k8s-部署-prometheus"><a href="#第2章、k8s-部署-prometheus" class="headerlink" title="第2章、k8s 部署 prometheus"></a>第2章、k8s 部署 prometheus</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、k8s 部署 metrics-server</title>
    <link href="/2021/08/17/%E7%AC%AC4%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-metrics-server/"/>
    <url>/2021/08/17/%E7%AC%AC4%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-metrics-server/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、k8s-部署-metrics-server"><a href="#第4章、k8s-部署-metrics-server" class="headerlink" title="第4章、k8s 部署 metrics-server"></a>第4章、k8s 部署 metrics-server</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、k8s 部署 kube-state-metrics</title>
    <link href="/2021/08/16/%E7%AC%AC3%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-kube-state-metrics/"/>
    <url>/2021/08/16/%E7%AC%AC3%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-kube-state-metrics/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、k8s-部署-kube-state-metrics"><a href="#第3章、k8s-部署-kube-state-metrics" class="headerlink" title="第3章、k8s 部署 kube-state-metrics"></a>第3章、k8s 部署 kube-state-metrics</h1><span id="more"></span><h2 id="一、K8s-yaml-安装-kube-state-metrics"><a href="#一、K8s-yaml-安装-kube-state-metrics" class="headerlink" title="一、K8s yaml 安装 kube-state-metrics"></a>一、K8s yaml 安装 kube-state-metrics</h2><h3 id="1、版本选择"><a href="#1、版本选择" class="headerlink" title="1、版本选择"></a>1、版本选择</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210816153327662.png" alt="image-20210816153327662"></p><blockquote><p>⚠️ <strong>注意:</strong></p><p>根据官方版本的提示，当前最新版的 metrics 版本<code>(v2.0.0+)</code>支持的为 <code>V1.17</code> 和 <code>V1.18</code> 以后的 k8s 版本，如果是之前的 k8s 版本则选用 <code>v1.9.8</code> 的 metrics 版本，并且当前 1.9.x 的发布版本已经升级到了最新的 v1.9.8 的最新版本了。</p><p><a href="https://github.com/kubernetes/kube-state-metrics/tree/release-1.9/examples/standard">yaml 文件下载地址</a></p><p>由于本文所属 k8s 版本为 <code>V1.15</code> ， <code>v1.9.8</code> 的 kube-state-metrics，对于其并不能兼容，因为 v1.15 版本中使用的某些 API 尚属于 Beta 版本，例如: <strong><code>admissionregistration</code></strong> </p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823162144898.png" alt="v1.9.7版本的概念"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823145521128.png" alt="image-20210823145521128"></p><p>而 v1.9.8 调用时使用的是正式版本，因此就就会导致问题，因此需要对该API进行一定的修改，以兼容 1.15 老版本的 K8S API。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823145901994.png" alt="kube-state-metrics 1.9.8 源码"></p><p><strong>笔者修改完后的docker 镜像地址:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tareya/kube-state-metrics:v1.9.8-for-k8s1.15<br></code></pre></td></tr></table></figure></blockquote><h3 id="2、下载-yaml"><a href="#2、下载-yaml" class="headerlink" title="2、下载 yaml"></a>2、下载 yaml</h3><h4 id="1）创建目录"><a href="#1）创建目录" class="headerlink" title="1）创建目录"></a>1）创建目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/sofeware/kube-state-metrics<br></code></pre></td></tr></table></figure><h4 id="2）批量下载"><a href="#2）批量下载" class="headerlink" title="2）批量下载"></a>2）批量下载</h4><blockquote><p>🚩 使用 cdn 加速地址下载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for file in cluster-role-binding.yaml cluster-role.yaml deployment.yaml service-account.yaml service.yaml;do wget -c https://cdn.jsdelivr.net/gh/kubernetes/kube-state-metrics@release-1.9/examples/standard/$file -O /data/softwares/kube-state-metrics/$file;done<br></code></pre></td></tr></table></figure><p>下载下来的文件目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/softwares/kube-state-metrics/<br>├── cluster-role-binding.yaml<br>├── cluster-role.yaml<br>├── deployment.yaml<br>├── service-account.yaml<br>└── service.yaml<br></code></pre></td></tr></table></figure><h3 id="3、具体配置"><a href="#3、具体配置" class="headerlink" title="3、具体配置"></a>3、具体配置</h3><h4 id="1）service-account-yaml"><a href="#1）service-account-yaml" class="headerlink" title="1）service-account.yaml"></a>1）service-account.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/service-account.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br></code></pre></td></tr></table></figure><h4 id="2）cluster-role-yaml"><a href="#2）cluster-role-yaml" class="headerlink" title="2）cluster-role.yaml"></a>2）cluster-role.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/cluster-role.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limitranges</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apps</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">batch</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cronjobs</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jobs</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">autoscaling</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">horizontalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authentication.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tokenreviews</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authorization.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">subjectaccessreviews</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">policy</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">poddisruptionbudgets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificates.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificatesigningrequests</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">storage.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">storageclasses</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">volumeattachments</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">admissionregistration.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mutatingwebhookconfigurations</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">validatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networking.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networkpolicies</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br></code></pre></td></tr></table></figure><h4 id="3）cluster-role-binding-yaml"><a href="#3）cluster-role-binding-yaml" class="headerlink" title="3）cluster-role-binding.yaml"></a>3）cluster-role-binding.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/cluster-role-binding.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><h4 id="4）service-yaml"><a href="#4）service-yaml" class="headerlink" title="4）service.yaml"></a>4）service.yaml</h4><blockquote><p>🚩 如果 prometheus 部署在 k8s 内部，则需要开启 prometheus 自动发现功能。</p></blockquote><p>文件路径: <code>/data/softwares/kube-state-metrics/service.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br>  <span class="hljs-attr">annotations:</span>  <br>   <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span>       <span class="hljs-comment">##添加此参数，允许prometheus自动发现</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">telemetry</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">telemetry</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br></code></pre></td></tr></table></figure><h4 id="5）deployment-yaml"><a href="#5）deployment-yaml" class="headerlink" title="5）deployment.yaml"></a>5）deployment.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/deployment.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">tareya/kube-state-metrics:v1.9.8-for-k8s1.15</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8081</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">telemetry</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">2048m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">2048Mim</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2048MiMi</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kube-state-metrics</span><br></code></pre></td></tr></table></figure><h3 id="4、发布应用"><a href="#4、发布应用" class="headerlink" title="4、发布应用"></a>4、发布应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/sofeware/kube-state-metrics &amp;&amp; \<br>kubectl apply -f ./<br></code></pre></td></tr></table></figure><h3 id="5、grafana-面板集成"><a href="#5、grafana-面板集成" class="headerlink" title="5、grafana 面板集成"></a>5、grafana 面板集成</h3><blockquote><p>Create ==&gt; Import ==&gt; 8588</p></blockquote><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823152852054.png" alt="image-20210823152852054"></p><h4 id="1）整体使用率和-node、pod-CPU-使用情况"><a href="#1）整体使用率和-node、pod-CPU-使用情况" class="headerlink" title="1）整体使用率和 node、pod CPU 使用情况"></a>1）整体使用率和 node、pod CPU 使用情况</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823153053012.png" alt="image-20210823153053012"></p><h4 id="2）node、pod-内存使用情况"><a href="#2）node、pod-内存使用情况" class="headerlink" title="2）node、pod 内存使用情况"></a>2）node、pod 内存使用情况</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823153252971.png" alt="image-20210823153252971"></p><h4 id="3）node、pod-网络-I-O-使用情况"><a href="#3）node、pod-网络-I-O-使用情况" class="headerlink" title="3）node、pod 网络 I/O 使用情况"></a>3）node、pod 网络 I/O 使用情况</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823155409078.png" alt="image-20210823155409078"></p><h2 id="二、Helm3-安装-kube-state-metrics"><a href="#二、Helm3-安装-kube-state-metrics" class="headerlink" title="二、Helm3 安装 kube-state-metrics"></a>二、Helm3 安装 kube-state-metrics</h2><p><a href="https://github.com/Tareya/kube-state-metrics-helm">chart github地址</a></p><h3 id="1、自定义-chart"><a href="#1、自定义-chart" class="headerlink" title="1、自定义 chart"></a>1、自定义 chart</h3><h4 id="1）创建-chart"><a href="#1）创建-chart" class="headerlink" title="1）创建 chart"></a>1）创建 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares &amp;&amp; \<br>helm create kube-state-metrics<br></code></pre></td></tr></table></figure><h4 id="2）删除无用模版"><a href="#2）删除无用模版" class="headerlink" title="2）删除无用模版"></a>2）删除无用模版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/kube-state-metrics &amp;&amp; \<br>rm templates/&#123;hpa.yaml,ingress.yaml&#125;<br></code></pre></td></tr></table></figure><h4 id="3）自定义模版文件"><a href="#3）自定义模版文件" class="headerlink" title="3）自定义模版文件"></a>3）自定义模版文件</h4><h5 id="1-ServiceAccount"><a href="#1-ServiceAccount" class="headerlink" title="1. ServiceAccount"></a>1. ServiceAccount</h5><p>修改文件，文件路径: <code>/data/softwares/kube-state-metrics/templates/serviceaccount.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.serviceAccount.create</span> <span class="hljs-string">-</span>&#125;&#125;<br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.serviceAccountName&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.serviceAccount.annotations</span> &#125;&#125;<br>  <span class="hljs-attr">annotations:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-ClusterRole"><a href="#2-ClusterRole" class="headerlink" title="2. ClusterRole"></a>2. ClusterRole</h5><p>新建文件，文件路径: <code>/data/softwares/kube-state-metrics/templates/clusterrole.yaml</code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span>&#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">rules:</span><br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.certificatesigningrequests</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificatesigningrequests</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.configmaps</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.cronjobs</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cronjobs</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.daemonsets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.deployments</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.endpoints</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.horizontalpodautoscalers</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;autoscaling&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">horizontalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.ingresses</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;networking.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.jobs</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jobs</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.limitranges</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limitranges</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.mutatingwebhookconfigurations</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;admissionregistration.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mutatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.namespaces</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.networkpolicies</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;networking.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networkpolicies</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.nodes</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumeclaims</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumes</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumes</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.poddisruptionbudgets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;policy&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">poddisruptionbudgets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.pods</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicasets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicationcontrollers</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.resourcequotas</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.secrets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.services</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.statefulsets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.storageclasses</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;storage.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">storageclasses</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.validatingwebhookconfigurations</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;admissionregistration.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">validatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.volumeattachments</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;storage.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">volumeattachments</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.verticalpodautoscalers</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;autoscaling.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">verticalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-ClusterRoleBinding"><a href="#3-ClusterRoleBinding" class="headerlink" title="3. ClusterRoleBinding"></a>3. ClusterRoleBinding</h5><p>新建文件，文件路径: <code>/data/softwares/kube-state-metrics/templates/clusterrolebinding.yaml</code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">and</span> <span class="hljs-string">.Values.rbac.create</span> <span class="hljs-string">.Values.rbac.useClusterRole</span> <span class="hljs-string">-</span>&#125;&#125;<br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span>&#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.rbac.useExistingRole</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.rbac.useExistingRole</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">else</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="4-Service"><a href="#4-Service" class="headerlink" title="4. Service"></a>4. Service</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/templates/service.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.service.annotations</span> &#125;&#125;<br>  <span class="hljs-attr">annotations:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> &#123;&#123; <span class="hljs-string">.Values.service.type</span> &#125;&#125;<br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>      <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>      <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="5-Deployment"><a href="#5-Deployment" class="headerlink" title="5. Deployment"></a>5. Deployment</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/templates/deployment.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">else</span> &#125;&#125;<br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.customLabels</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.customLabels</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">4</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> &#123;&#123; <span class="hljs-string">.Values.replicas</span> &#125;&#125;<br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">template</span> <span class="hljs-string">&quot;kube-state-metrics.name&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br>  <span class="hljs-attr">serviceName:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">volumeClaimTemplates:</span> []<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.name&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.customLabels</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.customLabels</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.podAnnotations</span> &#125;&#125;<br>      <span class="hljs-attr">annotations:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.podAnnotations</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.serviceAccountName&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.imagePullSecrets</span> &#125;&#125;<br>      <span class="hljs-attr">imagePullSecrets:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.imagePullSecrets</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;        <br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.securityContext.enabled</span> &#125;&#125;<br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">fsGroup:</span> &#123;&#123; <span class="hljs-string">.Values.securityContext.fsGroup</span> &#125;&#125;<br>        <span class="hljs-attr">runAsGroup:</span> &#123;&#123; <span class="hljs-string">.Values.securityContext.runAsGroup</span> &#125;&#125;<br>        <span class="hljs-attr">runAsUser:</span> &#123;&#123; <span class="hljs-string">.Values.securityContext.runAsUser</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.priorityClassName</span> &#125;&#125;<br>      <span class="hljs-attr">priorityClassName:</span> &#123;&#123; <span class="hljs-string">.Values.priorityClassName</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">imagePullPolicy:</span> &#123;&#123; <span class="hljs-string">.Values.image.pullPolicy</span> &#125;&#125;<br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.port</span> &#125;&#125;<br>          <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.port</span> &#125;&#125;<br>          <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>      <br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAMESPACE</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>        <span class="hljs-attr">args:</span><br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.extraArgs</span>  &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">.Values.extraArgs</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">.</span> &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.certificatesigningrequests</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=certificatesigningrequests</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.configmaps</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=configmaps</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.cronjobs</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=cronjobs</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.daemonsets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=daemonsets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.deployments</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=deployments</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.endpoints</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=endpoints</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.horizontalpodautoscalers</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=horizontalpodautoscalers</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.ingresses</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=ingresses</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.jobs</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=jobs</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.limitranges</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=limitranges</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.mutatingwebhookconfigurations</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=mutatingwebhookconfigurations</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.namespaces</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=namespaces</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.networkpolicies</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=networkpolicies</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.nodes</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=nodes</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumeclaims</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=persistentvolumeclaims</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumes</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=persistentvolumes</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.poddisruptionbudgets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=poddisruptionbudgets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.pods</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=pods</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicasets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=replicasets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicationcontrollers</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=replicationcontrollers</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.resourcequotas</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=resourcequotas</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.secrets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=secrets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.services</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=services</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.statefulsets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=statefulsets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.storageclasses</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=storageclasses</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.validatingwebhookconfigurations</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=validatingwebhookconfigurations</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.verticalpodautoscalers</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=verticalpodautoscalers</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.volumeattachments</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=volumeattachments</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=&#123;&#123;</span> <span class="hljs-string">.Values.namespace</span> <span class="hljs-string">|</span> <span class="hljs-string">join</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#125;&#125;</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--pod=$(POD_NAME)</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--pod-namespace=$(POD_NAMESPACE)</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.kubeconfig.enabled</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubeconfig=/opt/k8s/.kube/config</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.selfMonitor.telemetryHost</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--telemetry-host=&#123;&#123;</span> <span class="hljs-string">.Values.selfMonitor.telemetryHost</span> <span class="hljs-string">&#125;&#125;</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--telemetry-port=8081</span><br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.resources</span> &#125;&#125;<br>        <span class="hljs-attr">resources:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.resources</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">10</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.affinity</span> &#125;&#125;<br>      <span class="hljs-attr">affinity:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.affinity</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.tolerations</span> &#125;&#125;<br>      <span class="hljs-attr">tolerations:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.tolerations</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="6-Chart-yaml"><a href="#6-Chart-yaml" class="headerlink" title="6. Chart.yaml"></a>6. Chart.yaml</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/Chart.yaml </code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v2<br>name: kube-state-metrics<br>type: application<br>version: 1.0.0<br>appVersion: &quot;1.9.8&quot;<br></code></pre></td></tr></table></figure><h5 id="7-values-yaml"><a href="#7-values-yaml" class="headerlink" title="7. values.yaml"></a>7. values.yaml</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/values.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">tareya/kube-state-metrics</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-comment"># Overrides the image tag whose default is the chart appVersion.</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;v1.9.8-for-k8s1.15&quot;</span><br><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;kube-system&quot;</span><br><br><span class="hljs-attr">labels:</span> &#123;<br>  <span class="hljs-attr">&quot;k8s-app&quot;:</span> <span class="hljs-string">&quot;kube-state-metrics&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;:</span> <span class="hljs-string">&quot;v1.9.8&quot;</span><br>&#125;<br><br><span class="hljs-attr">imagePullSecrets:</span> []<br><span class="hljs-attr">nameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">fullnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">serviceAccount:</span><br>  <span class="hljs-comment"># Specifies whether a service account should be created</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Annotations to add to the service account</span><br>  <span class="hljs-attr">annotations:</span> &#123;&#125;<br>  <span class="hljs-comment"># The name of the service account to use.</span><br>  <span class="hljs-comment"># If not set and create is true, a name is generated using the fullname template</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;kube-state-metrics&quot;</span><br><br><br><span class="hljs-attr">rbac:</span><br>  <span class="hljs-comment"># If true, create &amp; use RBAC resources</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">useClusterRole:</span> <span class="hljs-literal">true</span><br>  <br><span class="hljs-attr">podAnnotations:</span> &#123;&#125;<br><br><span class="hljs-attr">podSecurityContext:</span> &#123;&#125;<br>  <span class="hljs-comment"># fsGroup: 2000</span><br><br><span class="hljs-attr">securityContext:</span> &#123;&#125;<br>  <span class="hljs-comment"># capabilities:</span><br>  <span class="hljs-comment">#   drop:</span><br>  <span class="hljs-comment">#   - ALL</span><br>  <span class="hljs-comment"># readOnlyRootFilesystem: true</span><br>  <span class="hljs-comment"># runAsNonRoot: true</span><br>  <span class="hljs-comment"># runAsUser: 1000</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><br>  <span class="hljs-attr">http:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;http-metrics&quot;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">telemetry:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;telemetry&quot;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><br>  <span class="hljs-attr">annotations:</span> &#123;<br>    <span class="hljs-attr">&quot;prometheus.io/scrape&quot;:</span> <span class="hljs-string">&quot;true&quot;</span><br>  &#125;<br><br><span class="hljs-attr">customLabels:</span> &#123;&#125;<br><br><span class="hljs-attr">resources:</span> <br>  <span class="hljs-comment"># We usually recommend not to specify default resources and to leave this as a conscious</span><br>  <span class="hljs-comment"># choice for the user. This also increases chances charts run on environments with little</span><br>  <span class="hljs-comment"># resources, such as Minikube. If you do want to specify resources, uncomment the following</span><br>  <span class="hljs-comment"># lines, adjust them as necessary, and remove the curly braces after &#x27;resources:&#x27;.</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1024m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1024m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br><br><span class="hljs-attr">autosharding:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">ingress:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">kubeconfig:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">selfMonitor:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-attr">affinity:</span><br>  <span class="hljs-attr">podAntiAffinity:</span><br>    <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>        <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">exterior-gateway</span><br>      <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br><br><span class="hljs-attr">collectors:</span><br>  <span class="hljs-attr">certificatesigningrequests:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">configmaps:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">cronjobs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">daemonsets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">deployments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">endpoints:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">horizontalpodautoscalers:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ingresses:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">jobs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">limitranges:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mutatingwebhookconfigurations:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">namespaces:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">networkpolicies:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">nodes:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">persistentvolumeclaims:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">persistentvolumes:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">poddisruptionbudgets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">pods:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">replicasets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">replicationcontrollers:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">resourcequotas:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">secrets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">services:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">statefulsets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">storageclasses:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">validatingwebhookconfigurations:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">verticalpodautoscalers:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">volumeattachments:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="2、发布应用"><a href="#2、发布应用" class="headerlink" title="2、发布应用"></a>2、发布应用</h3><h4 id="1）部署"><a href="#1）部署" class="headerlink" title="1）部署"></a>1）部署</h4><blockquote><p>🚩 本文使用 helm3 进行管理，helm3 中会将 release 的名字独立在各个命名空间中，可以更清晰的进行管理，kube-state-metrics 是 K8S 组件，故将其放到 <code>kube-system</code> 这个 namespace 中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -n kube-system kube-state-metrics /data/softwares/kube-state-metrics<br></code></pre></td></tr></table></figure><h4 id="2）查看发布版本"><a href="#2）查看发布版本" class="headerlink" title="2）查看发布版本"></a>2）查看发布版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list -n kube-system<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210824141007622.png" alt="image-20210824141007622"></p><h4 id="3）检查容器情况"><a href="#3）检查容器情况" class="headerlink" title="3）检查容器情况"></a>3）检查容器情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl describe pod -n kube-system `kubectl get pod -n kube-system|awk &#x27;NR&gt;1&#123;print $1&#125;&#x27;|grep kube-state-metrics`<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210824141436622.png" alt="image-20210824141436622"></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab(Runner)+Dokcerfile+K8S(MiniKube)实现自动化部署</title>
    <link href="/2021/08/10/Gitlab-Runner-Dokcerfile-K8S-MiniKube-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/08/10/Gitlab-Runner-Dokcerfile-K8S-MiniKube-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitlab-Runner-Dockerfile-K8S-Minikube-实现自动化部署"><a href="#Gitlab-Runner-Dockerfile-K8S-Minikube-实现自动化部署" class="headerlink" title="Gitlab(Runner) + Dockerfile + K8S(Minikube) 实现自动化部署"></a>Gitlab(Runner) + Dockerfile + K8S(Minikube) 实现自动化部署</h1><span id="more"></span><h2 id="一、Minikube-配置"><a href="#一、Minikube-配置" class="headerlink" title="一、Minikube 配置"></a>一、Minikube 配置</h2><blockquote><p>🌈 minikube 安装使用见<br><a href="">Minikube 快速入门手册</a></p></blockquote><p>默认情况下，minikube 的 apiserver 是无法通过外部访问的，所以我们的 gitlab 如果要访问 minikube 就需要开启代理，使 minikube 的 apiserver 可以被外部访问。</p><h3 id="1、配置-apiserver-代理"><a href="#1、配置-apiserver-代理" class="headerlink" title="1、配置 apiserver 代理"></a>1、配置 apiserver 代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl proxy --port=45396 --address=0.0.0.0 --accept-hosts=&quot;^.*&quot;<br></code></pre></td></tr></table></figure><p>参数说明:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–port</td><td>本地监听端口，默认 8001</td></tr><tr><td>–address</td><td>本地监听网卡地址，如果要外部访问，建议设为 0.0.0.0，即监听所有网卡地址</td></tr><tr><td>–accept-hosts</td><td>允许接受所有主机的请求，支持正则表达式</td></tr></tbody></table><h2 id="二、Gitlab-配置"><a href="#二、Gitlab-配置" class="headerlink" title="二、Gitlab 配置"></a>二、Gitlab 配置</h2><h3 id="1、添加-Kubernetes-集群"><a href="#1、添加-Kubernetes-集群" class="headerlink" title="1、添加 Kubernetes 集群"></a>1、添加 Kubernetes 集群</h3><p>![image-20210810170140628](/Users/shenlei/Library/Application Support/typora-user-images/image-20210810170140628.png)</p><h3 id="2、配置-CI-CD"><a href="#2、配置-CI-CD" class="headerlink" title="2、配置 CI/CD"></a>2、配置 CI/CD</h3><h2 id="三、Dockerfile"><a href="#三、Dockerfile" class="headerlink" title="三、Dockerfile"></a>三、Dockerfile</h2>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MiniKube 快速入门手册</title>
    <link href="/2021/08/10/MiniKube-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/08/10/MiniKube-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="MiniKube-快速入门手册"><a href="#MiniKube-快速入门手册" class="headerlink" title="MiniKube 快速入门手册"></a>MiniKube 快速入门手册</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minikube 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第8章、Helm 私有仓库搭建</title>
    <link href="/2021/08/10/%E7%AC%AC8%E7%AB%A0%E3%80%81Helm-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/08/10/%E7%AC%AC8%E7%AB%A0%E3%80%81Helm-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第7章、Helm2 迁移 Helm3</title>
    <link href="/2021/08/10/%E7%AC%AC7%E7%AB%A0%E3%80%81Helm2-%E8%BF%81%E7%A7%BB-Helm3/"/>
    <url>/2021/08/10/%E7%AC%AC7%E7%AB%A0%E3%80%81Helm2-%E8%BF%81%E7%A7%BB-Helm3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章、Chart 模版进阶</title>
    <link href="/2021/08/10/%E7%AC%AC5%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%BF%9B%E9%98%B6/"/>
    <url>/2021/08/10/%E7%AC%AC5%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第6章、初识 Release</title>
    <link href="/2021/08/10/%E7%AC%AC6%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Release/"/>
    <url>/2021/08/10/%E7%AC%AC6%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Release/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、Chart 模版详解</title>
    <link href="/2021/07/24/%E7%AC%AC4%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/07/24/%E7%AC%AC4%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Chart-模版详解"><a href="#第4章、Chart-模版详解" class="headerlink" title="第4章、Chart 模版详解"></a>第4章、Chart 模版详解</h1><span id="more"></span><h2 id="一、编写第一个模版"><a href="#一、编写第一个模版" class="headerlink" title="一、编写第一个模版"></a>一、编写第一个模版</h2><h3 id="1、前期准备"><a href="#1、前期准备" class="headerlink" title="1、前期准备"></a>1、前期准备</h3><blockquote><p>🚩 <strong>写在开始之前</strong></p><p>上一章中我们说到过，Helm 出来可以安装官方或者三方提供的 <em>chart</em> 包外，更重要的是支持创建自己的 <code>chart</code>，就行 <em>docker image</em> 和 <em>dockerfile</em>，通过自定义编排，方能实现通过 Helm 来管理我们自己的应用。</p><p>从之前的学习中，我们不难得出 <code>chart</code> 的核心是资源模版 <code>templates</code> 和渲染 <code>.Values</code>，而其中的关键，则是如何写资源模版，虽然其整体声明式和 K8s 的 <em>yaml</em> 表达式是一样的，但是既然模版，自然就要为需要渲染的地方保留变量，并通过语法去获取对应的值，最终才能发生渲染的效果。这个章节我们就来学习如何通过 <code>Chart 模版</code> 的语法来写我们自己的模版。</p></blockquote><h4 id="1）创建一个空的-chart"><a href="#1）创建一个空的-chart" class="headerlink" title="1）创建一个空的 chart"></a>1）创建一个空的 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm create mychart<br></code></pre></td></tr></table></figure><h4 id="2）删除所有默认生成的模版"><a href="#2）删除所有默认生成的模版" class="headerlink" title="2）删除所有默认生成的模版"></a>2）删除所有默认生成的模版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">\rm -rf mychart/templates/*<br></code></pre></td></tr></table></figure><p>然后，我们就可以开始这一章的学习之旅了！！</p><h3 id="2、创建-ConfigMap-模版"><a href="#2、创建-ConfigMap-模版" class="headerlink" title="2、创建 ConfigMap 模版"></a>2、创建 ConfigMap 模版</h3><h4 id="1）创建文件"><a href="#1）创建文件" class="headerlink" title="1）创建文件"></a>1）创建文件</h4><p>文件路径: <code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h5 id="表达式说明"><a href="#表达式说明" class="headerlink" title="表达式说明"></a>表达式说明</h5><p>1⃣️ <code>&#123;&#123; &#125;&#125;</code> 和 <code>.</code> 是什么？</p><p>相较于经典的 yaml 声明式，我们可以发现，最大的变化在于 <code>&#123;&#123; .Release.Name &#125;&#125;</code>。<code>&#123;&#123; &#125;&#125;</code> 就是模版调用的方法，其中加上要引用的元素，模版命令就会将其对用的值作为一个对象注入模版之中，其中 <code>.</code> 用于分割每个命令空间内需要搜索元素，最前面的 <code>.</code>表示从作用域的最顶层搜索对象。模版会从最顶层的命令空间开始搜索 <code>.</code> 指定的对象。</p><p>由此，<code>&#123;&#123; .Release.Name &#125;&#125;</code> 就应当解读为 “<strong>从最顶层的命名空间开始搜索 <code>Release</code> 对象，然后在其中搜索 <code>Name</code> 对象</strong>“。<code>Relase</code> 是 Helm 的内置对象，表示发布本身。</p><p>2⃣️ 为什么要这么处理？</p><p>模版的意义在于复用。通过传入不同的值来渲染出不同的结果，才是模版存在的意义，因此针对模版我们应当坚持 “<strong>可变量化</strong>“的原则，将非通用性的字段进行变量化处理，这样才能使得我们的模版更具备泛用性，增加复用的可能。</p><blockquote><p>⚠️ <strong>注意: Release 名称的长度限制</strong>  </p><p>DNS 系统限制 <code>name</code> 字段的长度不能超过 <strong>63</strong> 个字符，因此 Helm 对 <code>Release</code> 的名称是有长度限制的，<strong>Helm3 对于其长度限制为 53 个字符</strong>。</p></blockquote><h4 id="2）发布-chart"><a href="#2）发布-chart" class="headerlink" title="2）发布 chart"></a>2）发布 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回值如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705160256966.png" alt="image-20210705160256966"></p><p>查看发布:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705161041080.png" alt="image-20210705161041080"></p><h4 id="3）查看-manifest"><a href="#3）查看-manifest" class="headerlink" title="3）查看 manifest"></a>3）查看 manifest</h4><blockquote><p>执行 <code>helm get manifest</code> 可以打印出 <code>release</code> 已经上传到 <code>api server</code> 的资源。每个文件都会以 <code>---</code> `开头，并自动生成注释。</p></blockquote><p>我们可以发现模版中的 <code>&#123;&#123; .Release.Name &#125;&#125;</code> 调用已经渲染成了 Release 的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm get manifest &lt;release_name&gt;</span><br>helm get manifest test-chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705160402893.png" alt="image-20210705160402893"></p><h4 id="4）查看渲染效果（不发布）"><a href="#4）查看渲染效果（不发布）" class="headerlink" title="4）查看渲染效果（不发布）"></a>4）查看渲染效果（不发布）</h4><h5 id="1-卸载应用"><a href="#1-卸载应用" class="headerlink" title="1. 卸载应用"></a>1. 卸载应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm uninstall test-chart<br></code></pre></td></tr></table></figure><h5 id="2-渲染测试"><a href="#2-渲染测试" class="headerlink" title="2. 渲染测试"></a>2. 渲染测试</h5><h6 id="1⃣️-dry-run"><a href="#1⃣️-dry-run" class="headerlink" title="1⃣️ --dry-run"></a>1⃣️ <code>--dry-run</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705162015141.png" alt="image-20210705162015141"></p><h6 id="2⃣️-debug"><a href="#2⃣️-debug" class="headerlink" title="2⃣️ --debug"></a>2⃣️ <code>--debug</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run --debug test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705161728732.png" alt="image-20210705161728732"></p><h3 id="3、Values-的使用"><a href="#3、Values-的使用" class="headerlink" title="3、Values 的使用"></a>3、Values 的使用</h3><p>确切的说，<code>Values</code> 是一个对象，它提供了对于传递到 chart 模版的值的访问方法。其内容的主要来源如下:</p><blockquote><ul><li>chart 中默认的 <code>values.yaml</code> 文件</li><li>如果是<em>子 chart</em>，则为<em>父 chart</em> 的 <code>values.yaml</code> 文件</li><li>命令行使用 <code>-f</code> 指定的 values 文件</li><li>命令行使用 <code>--set</code> 传入的单个参数</li></ul><p>🚩其优先级顺序按照上述列表自下而上，依次减弱。</p></blockquote><h4 id="1）删除默认的-values-yaml"><a href="#1）删除默认的-values-yaml" class="headerlink" title="1）删除默认的 values.yaml"></a>1）删除默认的 values.yaml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f mychart/values.yaml <br></code></pre></td></tr></table></figure><h4 id="2）基本使用"><a href="#2）基本使用" class="headerlink" title="2）基本使用"></a>2）基本使用</h4><h5 id="1-创建-values-yaml"><a href="#1-创建-values-yaml" class="headerlink" title="1. 创建 values.yaml"></a>1. 创建 values.yaml</h5><p>文件路径: <code>mychart/values.yaml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aaa:</span> <span class="hljs-string">bbb</span><br></code></pre></td></tr></table></figure><h5 id="2-在-ConfigMap-模版中引用"><a href="#2-在-ConfigMap-模版中引用" class="headerlink" title="2. 在 ConfigMap 模版中引用"></a>2. 在 <code>ConfigMap</code> 模版中引用</h5><p>文件路径: <code>mychart/templates/configmap.yaml </code>，内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<span class="hljs-comment"># 追加内容</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版"><a href="#3-渲染模版" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染结果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707143605000.png" alt="image-20210707143605000"></p><h4 id="3）多结构化表达式"><a href="#3）多结构化表达式" class="headerlink" title="3）多结构化表达式"></a>3）多结构化表达式</h4><h5 id="1-创建-values-yaml-1"><a href="#1-创建-values-yaml-1" class="headerlink" title="1. 创建 values.yaml"></a>1. 创建 values.yaml</h5><p>文件路径：<code>mychart/other_values.yaml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Tareya</span><br>  <span class="hljs-attr">gender:</span> <span class="hljs-string">male</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h5 id="2-在模版中引用"><a href="#2-在模版中引用" class="headerlink" title="2. 在模版中引用"></a>2. 在模版中引用</h5><p>文件路径：<code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.person.name</span> &#125;&#125;<span class="hljs-comment"># 追加内容</span><br>  <span class="hljs-attr">gender:</span> &#123;&#123; <span class="hljs-string">.Values.person.gender</span> &#125;&#125;<br>  <span class="hljs-attr">age:</span> &#123;&#123; <span class="hljs-string">.Values.person.age</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-1"><a href="#3-渲染模版-1" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><p>你可以发现我们创建的文件名并非默认的 <code>values.yaml</code>。还记得我们之前说过，可以通过 <code>-f</code> 的方式指定 <code>Values</code> 的配置文件吗？这边我们来试验下，执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -f mychart/other_values.yaml --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染结果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707145708150.png" alt="image-20210707145708150"></p><p>可以发现，渲染结果不但读取了默认的 <code>values.yaml</code> ，还读取了我们指定的 <code>other_values.yaml</code>。</p><h4 id="4）使用-set-指定配置参数"><a href="#4）使用-set-指定配置参数" class="headerlink" title="4）使用 --set 指定配置参数"></a>4）使用 <code>--set</code> 指定配置参数</h4><p>还记得我们上面说的 Values 的优先级吗？我们在这边做个简单的验证，上面我们已经在 <code>values.yaml</code> 中设置了 <code>aaa</code> 的值为 <code>bbb</code>，接下来，让我们执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set aaa=abcdefg --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p>渲染结果如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707144128673.png" alt="image-20210707144128673"></p><p>可以发现，原本 <code>values.yaml</code> 中的默认配置被我们命令行指定的配置覆盖了。</p><h4 id="5）通过设置-null-删除默认配置"><a href="#5）通过设置-null-删除默认配置" class="headerlink" title="5）通过设置 null 删除默认配置"></a>5）通过设置 <code>null</code> 删除默认配置</h4><p>我们知道 <code>Values</code> 的配置其实就是一个 Key:Vaule 对，所以如果要从默认的 <code>Values</code> 中删除配置，其实只要将 Key 设置为 <code>null</code>，Helm 在进行渲染的过程中，就会合并并删除对应的 Key。</p><h5 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h5><p>下面我们用一个示例来说明。比如，稳定的 <code>Drupal</code> chart 允许在配置自定义镜像时配置动态探针，默认值如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如果我们想用 <code>exec</code> 来代替 <code>httpGet</code> 重写动态探针，我们可以使用 <code>--set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt]</code> ，在进行最终渲染合并后，生产的 manifest 内容会如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">exec:</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>但是，由于同时存在2个动态探针句柄，所以 K8s 在部署时会报错，这个时候可以执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null<br></code></pre></td></tr></table></figure><p>这种情况下，最终生成的 manifest 如下，<code>httpGet</code> 句柄会被删除：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">exec:</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如此，K8s 才能够正常安装。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、初识 Chart</title>
    <link href="/2021/07/24/%E7%AC%AC3%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Chart%20/"/>
    <url>/2021/07/24/%E7%AC%AC3%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Chart%20/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、初识-Chart"><a href="#第3章、初识-Chart" class="headerlink" title="第3章、初识 Chart"></a>第3章、初识 Chart</h1><span id="more"></span><h2 id="一、Chart-是什么？"><a href="#一、Chart-是什么？" class="headerlink" title="一、Chart 是什么？"></a>一、Chart 是什么？</h2><p>还记得我们在第一章节时介绍 Helm 的三大概念时是如何介绍 <code>chart</code> 这个概念的吗？是的，<code>chart</code> 就像许多语言封装的源码包一样，它是 Helm 使用的封装包的总称。</p><p>我们知道，Kubernetes 将其管理的对象称为资源，例如 deployment、service、ingress 等。而 Helm 作为 K8s 的包管理器，其最大的作用就是通过 chart 的方式整合需要管理的 K8s 中的资源，再通过 Helm 客户端 <strong>统一交由</strong> K8s api server 去执行。</p><hr><h2 id="二、Chart-基础使用"><a href="#二、Chart-基础使用" class="headerlink" title="二、Chart 基础使用"></a>二、Chart 基础使用</h2><h3 id="1、查找-Chart"><a href="#1、查找-Chart" class="headerlink" title="1、查找 Chart"></a>1、查找 Chart</h3><blockquote><p>Helm 提供了2种搜索命令，可用用来从两种来源中进行搜索：</p><ul><li><code>helm search hub</code>：从 <a href="https://artifacthub.io/">Artifact Hub</a> 中查找并列出 helm charts。 Artifact Hub中存放了大量不同的仓库。</li><li><code>helm search repo</code>：从你添加（使用 <code>helm repo add</code>）到本地 helm 客户端中的仓库中进行查找。该命令基于本地数据进行搜索，无需连接互联网。</li></ul></blockquote><h4 id="1）搜索所有公开可用的-charts"><a href="#1）搜索所有公开可用的-charts" class="headerlink" title="1）搜索所有公开可用的 charts"></a>1）搜索所有公开可用的 <code>charts</code></h4><p>执行以下命令从 <code>Artifact Hub</code> 中搜索所有的 <code>wordpress</code> charts：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search hub &lt;chart_name&gt;</span> <br>helm search hub wordpress<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629102731888.png" alt="image-20210629102731888"></p><h4 id="2）搜索本地-stable-源中可用的-charts"><a href="#2）搜索本地-stable-源中可用的-charts" class="headerlink" title="2）搜索本地 stable 源中可用的 charts"></a>2）搜索本地 <code>stable</code> 源中可用的 <code>charts</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search repo &lt;repo_name&gt;</span><br>helm search repo stable<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210628152107519.png" alt="image-20210628152107519"></p><h4 id="3）模糊匹配搜索"><a href="#3）模糊匹配搜索" class="headerlink" title="3）模糊匹配搜索"></a>3）模糊匹配搜索</h4><p>Helm 的搜素使用模糊字符串匹配算法，只需要输入名字的一部分就可以从本地仓库记录中进行搜索，如下搜索 <code>word</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search repo &lt;string&gt;</span><br>helm search repo word<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629103454469.png" alt="image-20210629103454469"></p><h3 id="2、安装-Chart"><a href="#2、安装-Chart" class="headerlink" title="2、安装 Chart"></a>2、安装 Chart</h3><blockquote><p>使用 <code>helm search</code> 找到你想要安装的 helm包后，就可以使用 <code>helm install</code> 来进行安装。最简单使用方案只需要传入两个参数：<code>release的名字</code> 和 <code>chart的名称</code>。</p></blockquote><h4 id="1）安装helm包"><a href="#1）安装helm包" class="headerlink" title="1）安装helm包"></a>1）安装helm包</h4><p>执行以下命令，即创建了一个新的 <code>release</code> 对象，命名为 <code>happy-panda</code> ，如果想要自动生成一名名称，可以使用<code>--generate-name</code> 参数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm install &lt;release_name&gt; &lt;chart_name&gt; （chart名称须具体，如 bitnami/wordpress。不能只是关键字）</span><br>helm install happy-panda bitnami/wordpress<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629104631960.png" alt="image-20210629104631960"></p><h4 id="2）查看运行状态"><a href="#2）查看运行状态" class="headerlink" title="2）查看运行状态"></a>2）查看运行状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list<br></code></pre></td></tr></table></figure><p>返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME     NAMESPACEREVISIONUPDATED                                STATUS  CHART            APP VERSION<br>happy-pandadefault  1       2021-06-29 10:51:13.437131205 +0800 CSTdeployedwordpress-11.0.165.7.2  <br></code></pre></td></tr></table></figure><h4 id="3）查看发布状态"><a href="#3）查看发布状态" class="headerlink" title="3）查看发布状态"></a>3）查看发布状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm status &lt;release_name&gt;</span><br>helm status happy-panda<br></code></pre></td></tr></table></figure><p>返回值和安装时的返回一样。</p><h4 id="4）卸载helm包"><a href="#4）卸载helm包" class="headerlink" title="4）卸载helm包"></a>4）卸载helm包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm uninstall &lt;release_name&gt;</span><br>helm uninstall happy-panda<br></code></pre></td></tr></table></figure><h3 id="3、下载-Chart"><a href="#3、下载-Chart" class="headerlink" title="3、下载 Chart"></a>3、下载 Chart</h3><blockquote><p>Helm 的 chart 同时也支持下载，下载下来的是一个tar包，解压后即可获得官方的 chart 目录，基于目录中提供的文件，我们可以对其中的内容进行修改，进行自定义的发布，同时也可以学习其语法。</p></blockquote><h4 id="1）下载"><a href="#1）下载" class="headerlink" title="1）下载"></a>1）下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm pull &lt;chart_name&gt; （chart名称须具体，如 bitnami/kong。不能只是关键字）</span><br>helm pull bitnami/kong<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701103804465.png" alt="image-20210701103804465"></p><h4 id="2）解压"><a href="#2）解压" class="headerlink" title="2）解压"></a>2）解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf kong-3.7.5.tgz <br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701103958115.png" alt="image-20210701103958115"></p><h4 id="3）目录结构"><a href="#3）目录结构" class="headerlink" title="3）目录结构"></a>3）目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">kong<br>├── Chart.lock<br>├── charts# kong 的 chart 依赖的其他 chart，数据库<br>│   ├── cassandra<br>│   ├── common<br>│   └── postgresql<br>├── Chart.yaml# 包含了chart信息的YAML文件<br>├── ci<br>│   ├── values-editing-containers.yaml<br>│   ├── values-external-cassandra.yaml<br>│   ├── values-external-postgresql.yaml<br>│   ├── values-ingress.yaml<br>│   └── values-metrics-hpa-pdb.yaml<br>├── crds# 自定义资源<br>│   └── custom-resource-definitions.yaml<br>├── README.md<br>├── templates# 资源模版，配置 values 进行渲染，生产有效的 K8s manifest<br>│   ├── dep-ds.yaml<br>│   ├── external-database-secret.yaml<br>│   ├── extra-list.yaml<br>│   ├── _helpers.tpl<br>│   ├── hpa.yaml<br>│   ├── ingress-controller-rbac.yaml<br>│   ├── ingress.yaml<br>│   ├── kong-prometheus-rolebinding.yaml<br>│   ├── kong-prometheus-role.yaml<br>│   ├── kong-script-configmap.yaml<br>│   ├── metrics-exporter-configmap.yaml<br>│   ├── metrics-script-configmap.yaml<br>│   ├── metrics-service.yaml<br>│   ├── migrate-job.yaml<br>│   ├── NOTES.txt<br>│   ├── pdb.yaml<br>│   ├── servicemonitor.yaml<br>│   ├── service.yaml<br>│   └── tls-secrets.yaml<br>└── values.yaml# chart 默认的配置值<br><br></code></pre></td></tr></table></figure><h3 id="4、自建-Chart"><a href="#4、自建-Chart" class="headerlink" title="4、自建 Chart"></a>4、自建 Chart</h3><blockquote><p>除了从远程 helm 仓库中获取官方或三方的 chart 外，Helm 更加重要的功能在于自建 chart，它会创建一个 chart 需要的最小化目录结构以及各必要文件的模版。chart 的整体构造比较类似 ansible 的 roles。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm create &lt;chart_name&gt;</span><br>helm create test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701180328092.png" alt="image-20210701180328092"></p><h3 id="5、检查-Chart"><a href="#5、检查-Chart" class="headerlink" title="5、检查 Chart"></a>5、检查 Chart</h3><blockquote><p>Helm 自动了语法检查工具，其作用类似 <code>nginx -t</code>，会对 chart 的格式或者一些信息进行自检，并返回检查结果，在发布前，进行语法检查是很好的选择。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm lint &lt;chart_name&gt;</span><br>helm lint test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705142216832.png" alt="image-20210705142216832"></p><h3 id="6、上传-Chart"><a href="#6、上传-Chart" class="headerlink" title="6、上传 Chart"></a>6、上传 Chart</h3><h4 id="1）打包-Chart"><a href="#1）打包-Chart" class="headerlink" title="1）打包 Chart"></a>1）打包 Chart</h4><blockquote><p>在上面的一系列操作中我们知道，Helm 仓库中存放的是一个个的 tar 包，而不是目录，因此如果你想上传自建的 chart，就需要将其先行打包。Helm 提供了这样一个命名来将你自建的 chart 打包出 Helm 可识别的格式。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm package &lt;chart_name&gt;</span><br>helm package test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701111357599.png" alt="image-20210701111357599"></p><blockquote><p>🚩 <strong>为什么版本是 0.1.0？</strong></p><p>这是由 Chart.yaml 中的 <code>version</code> 字段决定的。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701111524833.png" alt="image-20210701111524833"></p></blockquote><h4 id="2）上传至私有仓库"><a href="#2）上传至私有仓库" class="headerlink" title="2）上传至私有仓库"></a>2）上传至私有仓库</h4><blockquote><p><strong>四个步骤：</strong></p><p>1）自建私有仓库</p><p>2）生成、更新 chart 索引文件</p><p>3）上传 chart 和索引文件</p><p>4）更新本地 chart 仓库</p></blockquote><h4 id="3）上传至-Helm-Hub"><a href="#3）上传至-Helm-Hub" class="headerlink" title="3）上传至 Helm Hub"></a>3）上传至 Helm Hub</h4><blockquote><p>🚩 <strong>参考文档:</strong></p><p><a href="https://blog.csdn.net/jeffzhesi/article/details/106565173">https://blog.csdn.net/jeffzhesi/article/details/106565173</a></p></blockquote><hr><h2 id="三、Chart-语法释义"><a href="#三、Chart-语法释义" class="headerlink" title="三、Chart 语法释义"></a>三、Chart 语法释义</h2><h3 id="1、chart-基本元素释义："><a href="#1、chart-基本元素释义：" class="headerlink" title="1、chart 基本元素释义："></a>1、chart 基本元素释义：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_chart<br>├── charts# 可选: 本 chart 依赖的其他 chart<br>├── Chart.yaml# 必需: 用于描述 chart 相关信息，包括名称、描述信息、api版本等<br>├── templates# 必需: 做用于 K8s 资源的 yaml 模版<br>│   ├── deployment.yaml# 用于生成 K8s deployment 资源的 yaml 模版，发布应用的基本元素<br>│   ├── _helpers.tpl# 用于定义一些可重用的模板片断，在此文件中的定义在任何资源定义模板中都可用<br>│   ├── hpa.yaml# 用于生成 K8s hpa 的 yaml 模版，如服务需要弹性伸缩策略，则在该模版中定义<br>│   ├── ingress.yaml# 用于生成 K8s ingress 的 yaml 模版，如果服务需要对外放出，则在该模版中定义 ingress<br>│   ├── NOTES.txt# 必需: 用于介绍 chart 部署后的一些信息，比如如何使用这个 chart、列出缺省设置等<br>│   ├── serviceaccount.yaml# 用于生成 K8s serviceaccount 资源的 yaml 模版，如需要创建特定认证对象，则在该模版中定义<br>│   ├── service.yaml# 用于生成 K8s service 资源的 yaml 模版，发布应用的基本元素<br>│   └── tests# helm 的测试钩子<br>│       └── test-connection.yaml<br>└── values.yaml# 必需: 用于存储要渲染至 templates/ 下模版文件中的值<br></code></pre></td></tr></table></figure><h3 id="2、Chart-yaml"><a href="#2、Chart-yaml" class="headerlink" title="2、Chart.yaml"></a>2、Chart.yaml</h3><p>一个标准的 Chart.yaml 包含以下字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-comment"># 必需: chart API 版本, v2 版本为 helm3 语法，v1 版本仍然保留使用</span><br><span class="hljs-attr">name:</span> <span class="hljs-comment"># 必需: chart名称</span><br><span class="hljs-attr">version:</span> <span class="hljs-comment"># 必需: chart 的版本控制标识</span><br><span class="hljs-attr">kubeVersion:</span> <span class="hljs-comment"># 可选: 兼容Kubernetes版本的语义化版本，可以使用运算符，形式如 &gt;= 1.13.0 &lt; 1.15.0</span><br><span class="hljs-attr">description:</span> <span class="hljs-comment"># 可选: 对于这个 chart 的描述信息</span><br><span class="hljs-attr">type:</span> <span class="hljs-comment"># 可选: chart类型, 支持2种类型，application 和 library，默认使用 application</span><br><span class="hljs-attr">keywords:</span><span class="hljs-comment"># 可选: 关于项目的一组关键字</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">home:</span> <span class="hljs-comment"># 可选: 项目home页面的URL</span><br><span class="hljs-attr">sources:</span><span class="hljs-comment"># 可选: 项目源码的URL列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">dependencies:</span> <span class="hljs-comment"># 可选: chart 的依赖项，执行 `helm dep up &lt;chart_name&gt;` 更新依赖，依赖的 chart包 会下载至 charts/ </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-comment"># chart名称, 如 nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-comment"># chart版本, 如 &quot;1.2.3&quot;</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-comment"># 可选: 仓库的完整URL (&quot;https://example.com/charts&quot;) 或别名 (&quot;@repo-name&quot;)</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-comment"># 可选: 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled )</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-comment"># 可选: 用于一次启用/禁用 一组chart的tag</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">import-values:</span>  <span class="hljs-comment"># 可选: 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ImportValue</span>  <br>    <span class="hljs-attr">alias:</span> <span class="hljs-comment"># 可选: 依赖 chart 的别名。当你要多次添加相同的chart时会很有用</span><br><span class="hljs-attr">maintainers:</span> <span class="hljs-comment"># 可选: 维护者信息</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-comment"># 维护者名字 （每个维护者都需要）</span><br>    <span class="hljs-attr">email:</span> <span class="hljs-comment"># 维护者邮箱 （每个维护者可选）</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-comment"># 维护者URL （每个维护者可选）</span><br><span class="hljs-attr">icon:</span> <span class="hljs-comment"># 可选: 用做icon的SVG或PNG图片URL</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-comment"># 可选: 与版本控制的 version 无关，用于指定应用的版本</span><br><span class="hljs-attr">deprecated:</span> <span class="hljs-comment"># 可选: 标记该 chart 已废弃，使用方法为布尔值</span><br><span class="hljs-attr">annotations:</span><br>  <span class="hljs-attr">example:</span> <span class="hljs-comment"># 可选: 按名称输入的批注列表</span><br></code></pre></td></tr></table></figure><h4 id="1）使用-dependencies-表达式管理依赖"><a href="#1）使用-dependencies-表达式管理依赖" class="headerlink" title="1）使用 dependencies 表达式管理依赖"></a>1）使用 dependencies 表达式管理依赖</h4><h5 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><p>Helm3 中，弃用了 <code>requeirements.yaml</code> ，<code>dependencies</code> 字段被合并至了 <code>Chart.yaml</code> 中，但是就语法表达式来说，和之前没有太大的变化。使用方式比较类似 ansible 的 playbook 或 docker compose，其表达式如下，是一个列表形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://example.com/charts</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">3.2</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://another.example.com/charts</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><p><code>name</code> 字段：所需依赖 chart 的名称</p></li><li><p><code>version</code> 字段：所需依赖 chart 的版本</p></li><li><p><code>repository</code> 字段：chart 仓库的完整 URL 或者 仓库的名称</p><p>使用 URL ：<code>https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</code></p><p>使用 仓库名称：<code>@stable</code></p></li></ul><p>🚩  仓库必须事先使用 <code>helm repo add</code> 添加，执行类似如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure></blockquote><h5 id="2-示例说明"><a href="#2-示例说明" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><h6 id="1⃣️-添加仓库"><a href="#1⃣️-添加仓库" class="headerlink" title="1⃣️ 添加仓库"></a>1⃣️ 添加仓库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add bitnami https://charts.bitnami.com/bitnami  <br></code></pre></td></tr></table></figure><h6 id="2⃣️-写依赖表达式"><a href="#2⃣️-写依赖表达式" class="headerlink" title="2⃣️ 写依赖表达式"></a>2⃣️ 写依赖表达式</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">9.3</span><span class="hljs-number">.3</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">&quot;@bitnami&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mariadb</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2.1</span><span class="hljs-number">.6</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">&quot;@bitnami&quot;</span><br></code></pre></td></tr></table></figure><h6 id="3⃣️-更新依赖"><a href="#3⃣️-更新依赖" class="headerlink" title="3⃣️ 更新依赖"></a>3⃣️ 更新依赖</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm dependency update<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210702105136710.png" alt="image-20210702105136710"></p><p>依赖的 chart 包 会被下载到 <code>charts/</code> 目录下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210702105157112.png" alt="image-20210702105157112"></p><h4 id="2）通过-charts-目录手动管理依赖"><a href="#2）通过-charts-目录手动管理依赖" class="headerlink" title="2）通过 charts/ 目录手动管理依赖"></a>2）通过 charts/ 目录手动管理依赖</h4><p>Helm 提供了两种管理依赖的方式，一种是如上所述的 <code>dependencies</code> 表达式，它会遵循语法原则，自动的管理依赖，依赖包会被下载到 <code>charts/</code> 中；另一种方式就是通过 <code>charts/</code> 目录来手动管理依赖，这种方式可以对依赖的 chart 做更多的自定义设置。</p><h5 id="1-基本原则-1"><a href="#1-基本原则-1" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><blockquote><ul><li><code>charts/</code> 下管理的依赖必须是一个 <strong>chart 包</strong> （<code>xxx-1.0.1.tgz</code>）或是一个解压的 <strong>chart 目录</strong></li><li><strong>依赖的名称不能以 <code>_</code> 或 <code>.</code> 开头</strong>，否则会被 chart 加载器忽略</li><li>可以使用 <code>helm pull</code> 将依赖下载到 <code>charts/</code>下</li></ul></blockquote><h5 id="2-示例说明-1"><a href="#2-示例说明-1" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><p>比如 WordPress 的 chart 依赖 Apache 和 mariadb，其目录形式应该如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">wordpress:<br>  Chart.yaml<br><span class="hljs-meta">  #</span><span class="bash"> ...</span><br>  charts/<br>    apache/<br>      Chart.yaml<br>      # ...<br>    mariadb/<br>      Chart.yaml<br>      # ...<br>    memcached/<br>    Chart.yaml<br>      # ...<br></code></pre></td></tr></table></figure><h4 id="3）dependencies-中-condition-和-tags-使用释义"><a href="#3）dependencies-中-condition-和-tags-使用释义" class="headerlink" title="3）dependencies 中 condition 和 tags 使用释义"></a>3）dependencies 中 condition 和 tags 使用释义</h4><h5 id="1-基本原则："><a href="#1-基本原则：" class="headerlink" title="1. 基本原则："></a>1. 基本原则：</h5><blockquote><ul><li><p>条件（condition）优先</p><p>当设置 value 时，如果同时存在 <code>condition</code> 和 <code>tags</code> 的值，那么 <code>condition</code> 的效果会覆盖 <code>tags</code> 的效果。</p></li><li><p>标签（tags）最小化元素</p><p>当 <code>tags</code> 中的任意一个元素的值被设置为 <code>true</code> 时，带有该 <code>tags</code> 的 chart 就会被启用。</p></li><li><p><code>condition</code> 和 <code>tags</code> 在 values.yaml 中必需在缩进的最顶层</p></li><li><p><code>tags</code> 在 values.yaml 中需以以下形式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-string">xxx</span><br>  <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="2-示例说明："><a href="#2-示例说明：" class="headerlink" title="2. 示例说明："></a>2. 示例说明：</h5><p>文件: <code>test_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-string">subchart1.enabled,</span> <span class="hljs-string">global.subchart1.enabled</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-end</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">subchart1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart2</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-string">subchart2.enabled,global.subchart2.enabled</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-end</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">subchart2</span><br></code></pre></td></tr></table></figure><p>文件: <code>test_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">subchart1:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式表示，<code>condition</code> 中带有 <code>subchart1</code> 的 chart 会被启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-attr">front-end:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">back-end:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式表示，<code>tags</code> 中带有 <code>back-end</code> 的 chart 会被启动，而带有 <code>front-end</code> 的则不会被启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">subchart1:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-attr">front-end:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">back-end:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式，当 <code>condition</code> 和 <code>tags</code> 一起使用时，是会发生效果覆盖的，比如，虽然 <code>front-end</code> 设置为了 <code>false</code>，但是由于 <code>subchart1.enabled</code> 设置为 <code>true</code>，条件发生覆盖，所以 chart <code>subchart1</code> 还是会被启用。</p><p>而当 <code>back-end</code> 设置为 <code>true</code> 的时候，条件读取的就是 <code>back-end: true</code> ，因此，即使没有设置 <code>subchart2.enabled</code> 为 <code>true</code>，chart <code>subchart2</code> 也会被启用。</p><h4 id="4）dependencies-中的-alias-使用释义（了解）"><a href="#4）dependencies-中的-alias-使用释义（了解）" class="headerlink" title="4）dependencies  中的 alias 使用释义（了解）"></a>4）dependencies  中的 alias 使用释义（了解）</h4><h5 id="1-基本原则-2"><a href="#1-基本原则-2" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><p>在 <code>dependencies</code> 的表达式中，可以使用 <code>alias</code> 对需求项添加别名，当存在依赖多次复用的时候就可以通过别名的方式来访问该需求项，以此加以区分。（比如 数据库的主从、集群等使用场景）</p><h5 id="2-示例说明-2"><a href="#2-示例说明-2" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><p>文件: <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">alias:</span> <span class="hljs-string">new-subchart-1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">alias:</span> <span class="hljs-string">new-subchart-2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>如上情况，<code>parent_chart</code> 中相当于有 3 个依赖项，<code>subchart</code>、<code>new-subchart-1</code> 、<code>new-subchart-2</code> ，虽然他们是基于同一个 chart 的，但是可以被区别对待。</p><h4 id="5）dependencies-中的-import-values-使用释义（了解）"><a href="#5）dependencies-中的-import-values-使用释义（了解）" class="headerlink" title="5）dependencies  中的 import-values 使用释义（了解）"></a>5）dependencies  中的 import-values 使用释义（了解）</h4><p>从上文中，我们知道，在 <code>charts/</code> 目录下面管理的其实也是 chart，那么它就会遵循 chart 的原则，那么这种情况下，目录结构就是一种  <code>父-子</code> 的关系。在某些场景中，我们可能会需要读取 <em>子 char</em> 的值，Helm 则提供了 <code>import-values</code> 这样一种实现方式。</p><h5 id="1-基本原则-3"><a href="#1-基本原则-3" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><blockquote><ul><li><p>目录结构和文件关系如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">parent_chart:# 父 chart<br>  Chart.yaml# dependencies - child_chart - import-values - Key<br><span class="hljs-meta">  #</span><span class="bash"> ...</span><br>  charts/<br>    child_chart/# 子 chart<br>      Chart.yaml<br>      values.yaml# exports - Key - value<br>      # ...<br></code></pre></td></tr></table></figure></li><li><p>加载器会根据 <code>dependencies - name</code> 找 <em>子 chart</em>，根据 <code>dependencies - import-values</code> 的 key 解析 <em>子 chart</em> 中对应的值</p></li><li><p>加载器默认识别 <code>exports</code></p></li><li><p>没有 <code>exports</code> ，需要以 <code>parent-child</code> 方式明确指明要注入的 <em>子 chart</em> 的值的 Key 和 要被注入的 <em>父 chart</em> 的值的名称</p></li><li><p>import <em>子 chart</em> 所得的值最终会被合并入 <em>父 chart</em> 的 values 中，并会覆盖原有键值</p></li></ul></blockquote><h5 id="2-示例说明-3"><a href="#2-示例说明-3" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><h6 id="1⃣️-使用-exports-的方式"><a href="#1⃣️-使用-exports-的方式" class="headerlink" title="1⃣️ 使用 exports 的方式"></a>1⃣️ 使用 <code>exports</code> 的方式</h6><p>文件:  <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">child_chart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">import-values:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data</span><span class="hljs-comment"># 引用子 chart 的变量 - data</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/charts/child_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">exports:</span><span class="hljs-comment"># 声明变量 data</span><br><span class="hljs-attr">data:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>Helm 会在 <code>import-values</code> 的列表到入内容时，将其中的元素作为 Key，并以此到 <em>子 chart</em> 的 <code>exports</code> 字段查找对应的 Key，并将对应的 value 注入 <em>父 chart</em>  的 values 中，所以最终我们可以在 <em>父 chart</em> 中可获取到的值为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><h6 id="2⃣️-使用-parent-—-child-的方式"><a href="#2⃣️-使用-parent-—-child-的方式" class="headerlink" title="2⃣️ 使用 parent — child 的方式"></a>2⃣️ 使用 <code>parent — child</code> 的方式</h6><blockquote><p>⚠️ <strong>注意:</strong></p><p>如果在 <em>子 chart</em> 的 values.yaml 中没有使用 <code>exports</code> ，就必须指定要注入的 <em>子 chart</em> 值的 源Key 以及 被注入的 <em>父 chart</em> 的值的名称。</p></blockquote><p>文件: <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">child_chart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-attr">import-values:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">child:</span> <span class="hljs-string">default.data</span><br>        <span class="hljs-attr">parent:</span> <span class="hljs-string">myimports</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/charts/child_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">default:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">myint:</span> <span class="hljs-number">999</span><br>    <span class="hljs-attr">mybool:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">myimports:</span><br>  <span class="hljs-attr">myint:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">mybool:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mystring:</span> <span class="hljs-string">&quot;helm tests!&quot;</span><br></code></pre></td></tr></table></figure><p>如上述示例，<code>import-values</code> 的加载器，根据 <code>child</code> 去 child_chart 的 values.yaml 中找 <code>default - data</code> ，并解析出其值，并将其注入到 <em>父 chart</em> 中，并会覆盖原有的键值，由此 <em>父 chart</em> 最终的 values 会合并如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">myimports:</span><br>  <span class="hljs-attr">myint:</span> <span class="hljs-number">999</span><br>  <span class="hljs-attr">mybool:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mystring:</span> <span class="hljs-string">&quot;helm tests!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3、templates-和-values-yaml"><a href="#3、templates-和-values-yaml" class="headerlink" title="3、templates/ 和 values.yaml"></a>3、templates/ 和 values.yaml</h3><h4 id="1）Values-的生效机制"><a href="#1）Values-的生效机制" class="headerlink" title="1）Values 的生效机制"></a>1）Values 的生效机制</h4><p>Values 通过模板中<code>.Values</code>对象可访问的<code>values.yaml</code>文件，也可以通过 <code>.Chart</code> 对象可访问的 <code>Chart.yaml</code> ，以此类推。另外 ，Helm 中有一些预定义的 values，可以将其视为环境变量，具体如下:</p><blockquote><ul><li><p><strong>Release</strong></p><p>该对象描述了版本发布本身。</p><p>使用方法如，<code>&#123;&#123; .Release.Name &#125;&#125;</code> (获取 release 的名称)</p></li><li><p><strong>.Values</strong></p><p>访问 <code>values.yaml</code> 的内容。</p><p>使用方法如，<code>&#123;&#123; .Values.image.repository &#125;&#125;</code> (获取 values.yaml 中 <code>image - repository</code> 的值)</p></li><li><p><strong>.Chart</strong></p><p>访问 <code>Chart.yaml</code> 的内容。</p><p>使用方法如， <code>&#123;&#123; .Chart.Version &#125;&#125;</code> (获得 chart 的版本)、<code>&#123;&#123; .Chart.Maintainers &#125;&#125;</code> (获取 chart 的维护者) </p><p>语法风格遵循 go 模版规则，类似 jinja2。是一种层级检索的方式，<code>.</code> 表示层级，最顶层的 <code>.</code> 即 <code>根</code> 。</p></li><li><p><strong>.Files</strong></p><p>访问 chart 中存在的文件的内容 (<code>.helmignore</code> 除外)。</p><p>使用方法如，<code>&#123;&#123; index .Files "file.name" &#125;&#125;</code> (获取该文件中 <code>name</code>的值)，它等效于 <code>&#123;&#123; .Files.Get name &#125;&#125;</code> 方法。</p><p><code>&#123;&#123; .Files.GetBytes &#125;&#125;</code> 方法等效于访问文件中的 <code>[]byte</code> 对象</p></li><li><p><strong>.Capabilities</strong></p><p>访问 K8s 的 <code>Capabilities</code> 对象。</p><p>使用方法如，<code>&#123;&#123; .Capabilities.KubeVersion &#125;&#125;</code> (获取 K8s 版本)、<code>&#123;&#123; .Capabilities.APIVersions.Has "batch/v1" &#125;&#125;</code>(获取支持的 K8s API 版本)</p></li></ul></blockquote><h4 id="2）templates-中的模版"><a href="#2）templates-中的模版" class="headerlink" title="2）templates/ 中的模版"></a>2）templates/ 中的模版</h4><p>模板文件遵守书写Go模板的标准惯例（查看 <a href="https://golang.org/pkg/text/template/">文本/模板 Go 包文档</a>了解更多）。以发布一个 nginx 的 <code>templates/deployment.yaml</code> 的示例模版为例，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">not</span> <span class="hljs-string">.Values.autoscaling.enabled</span> &#125;&#125;<br>  <span class="hljs-attr">replicas:</span> &#123;&#123; <span class="hljs-string">.Values.replicaCount</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> &#123;&#123; <span class="hljs-string">.Values.image.pullPolicy</span> &#125;&#125;<br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.port</span> &#125;&#125;<br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.resources</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">12</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.nodeSelector</span> &#125;&#125;<br>      <span class="hljs-attr">nodeSelector:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.affinity</span> &#125;&#125;<br>      <span class="hljs-attr">affinity:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.tolerations</span> &#125;&#125;<br>      <span class="hljs-attr">tolerations:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="3）取值-values-yaml-渲染模版"><a href="#3）取值-values-yaml-渲染模版" class="headerlink" title="3）取值 values.yaml 渲染模版"></a>3）取值 values.yaml 渲染模版</h4><p>根据如上模版的变量关系，进行对应文件 value 的配置，涉及到 <code>Chart.yaml</code> 和 <code>values.yaml</code> 两个文件：</p><h5 id="1-Chart-yaml-的必要值"><a href="#1-Chart-yaml-的必要值" class="headerlink" title="1. Chart.yaml 的必要值"></a>1. <code>Chart.yaml</code> 的必要值</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Helm</span> <span class="hljs-string">chart</span> <span class="hljs-string">for</span> <span class="hljs-string">Kubernetes</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">application</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-string">&quot;1.16.0&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-values-yaml-的必要值"><a href="#2-values-yaml-的必要值" class="headerlink" title="2. values.yaml 的必要值"></a>2. <code>values.yaml</code> 的必要值</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;stable&quot;</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br>  <span class="hljs-comment"># targetMemoryUtilizationPercentage: 80</span><br><br><span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br><br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-attr">affinity:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-验证渲染效果"><a href="#3-验证渲染效果" class="headerlink" title="3. 验证渲染效果"></a>3. 验证渲染效果</h5><p>我们可以通过在 <code>helm install</code> 时使用 <code>--dry-run</code> 参数来只渲染模版，而不进行直接部署，这样我们就可以验证效果了。执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run demo test_chart/<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;nginx:stable&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><h4 id="4）-set-指定参数渲染"><a href="#4）-set-指定参数渲染" class="headerlink" title="4）--set 指定参数渲染"></a>4）<code>--set</code> 指定参数渲染</h4><p>当我们在执行 <code>helm install</code> 或者 <code>helm upgrade</code> 时，除了直接通过 <em>values.yaml</em> 渲染外，也支持直接在命令行通过 <code>--set</code> 参数传参，<strong>传入的参数会覆盖 <em>values.yaml</em> 中的预设值</strong>。</p><h5 id="示例：通过-set-修改-镜像版本-和-端口"><a href="#示例：通过-set-修改-镜像版本-和-端口" class="headerlink" title="示例：通过 --set 修改 镜像版本 和 端口"></a>示例：通过 <code>--set</code> 修改 <code>镜像版本</code> 和 <code>端口</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set image.tag=&quot;1.16.0&quot; --set service.port=9999 --dry-run demo test_chart/<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;nginx:1.16.0&quot;</span><span class="hljs-comment"># 镜像版本由原来的 stable 更改为 1.16.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9999</span><span class="hljs-comment"># 端口由原来的 80 更改为 9999</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><h4 id="5）通过-f-指定-Values-文件"><a href="#5）通过-f-指定-Values-文件" class="headerlink" title="5）通过 -f 指定 Values 文件"></a>5）通过 <code>-f</code> 指定 Values 文件</h4><p>chart 默认的 Values 文件命名为 <code>values.yaml</code>，当你在执行 <code>helm install</code> 或 <code>helm upgrade</code> 时，如果名称不是 <code>values.yaml</code>，执行就会出错。<strong>通过命令行 <code>-f</code> 参数，可以指定 Values 文件</strong>，这样文件的名称就不受限制了。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>创建文件 <code>test_chart/demo.yaml</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">replicaCount: 1<br><br>image:<br>  repository: mysql<br>  tag: &quot;8.7.0&quot;<br>  pullPolicy: IfNotPresent<br><br>service:<br>  type: ClusterIP<br>  port: 3306<br><br>resources:<br>  limits:<br>    cpu: 100m<br>    memory: 128Mi<br>  requests:<br>    cpu: 100m<br>    memory: 128Mi<br><br>autoscaling:<br>  enabled: false<br>  minReplicas: 1<br>  maxReplicas: 100<br>  targetCPUUtilizationPercentage: 80<br><span class="hljs-meta">  #</span><span class="bash"> targetMemoryUtilizationPercentage: 80</span><br><br>nodeSelector: &#123;&#125;<br><br>tolerations: []<br><br>affinity: &#123;&#125;<br></code></pre></td></tr></table></figure><p>执行如下命令，进行渲染测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -f test_chart/demo.yaml --dry-run demo test_chart<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;mysql:8.7.0&quot;</span><span class="hljs-comment"># 镜像已更改</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><span class="hljs-comment"># 端口已更改</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br><br></code></pre></td></tr></table></figure><h3 id="4、架构文件-values-schema-json"><a href="#4、架构文件-values-schema-json" class="headerlink" title="4、架构文件 values.schema.json"></a>4、架构文件 <code>values.schema.json</code></h3><p>是否还记得，在第1章中我们介绍过 Helm3 的新功能中增加了 <code>使用JSON Schema</code> 来验证 Chart 的 Values 的机制？事实上，它在 Chart 的表现就是 <code>values.schema.json</code> 文件。在其中<code>required</code> 可以用于定义哪些字段是必须的，<code>type</code> 可用用于定义哪些字段需要是什么字段类型等。</p><blockquote><p>🚩 <strong>当我们在执行如下命令时，Helm 将会以该 Json 定义的架构格式去验证 .Values 对象是否符合规格，只有当验证通过后，才能正常发送给 K8s 执行。</strong></p><ul><li>helm install</li><li>helm upgrade</li><li>helm lint</li><li>helm template</li></ul></blockquote><h4 id="1）格式示例"><a href="#1）格式示例" class="headerlink" title="1）格式示例"></a>1）格式示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://json-schema.org/draft-07/schema#&quot;</span>,<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;image&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Container Image&quot;</span>,<br>      <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;repo&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;tag&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Service name&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;port&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Port&quot;</span>,<br>      <span class="hljs-attr">&quot;minimum&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;required&quot;</span>: [<br>    <span class="hljs-string">&quot;protocol&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;Values&quot;</span>,<br>  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）示例说明"><a href="#2）示例说明" class="headerlink" title="2）示例说明"></a>2）示例说明</h4><p><code>required</code> 字段定义了 Values 中必要的字段，如上例所示，即 <code>protocol</code> 和 <code>port</code> 。另外，<code>name</code> 默也是必须的，因为 <code>service name</code> 是一个 <code>Release</code> 的必要元素，因此，一个符合该架构要求的最精简 <em>values.yaml</em> 应该如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">http</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>上面有提到过，架构文件验证的对象是 <code>.Values 对象</code>，而不是 <em>values.yaml</em> ，也就是说，使用 <code>--set</code> 指定的参数也属于其检测的范畴，因此，如下这种情况也是可以的通过检查的：</p><p><strong>values.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">fronend</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">https</span><br></code></pre></td></tr></table></figure><p><strong>命令行指定 port</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set port=443<br></code></pre></td></tr></table></figure></blockquote><h3 id="5、用户自定义资源-——-CRD"><a href="#5、用户自定义资源-——-CRD" class="headerlink" title="5、用户自定义资源 —— CRD"></a>5、用户自定义资源 —— CRD</h3><p><strong>CRD</strong>（<code>Custom Resource Definition</code>）是 K8s 提供的一种自定义资源对象的机制。在 Helm3 中，使用 <code>crds/</code> 目录来对其进行管理，Helm3 会在安装 <em>chart</em> 之前检查该目录是否存在 CRD 的 yaml 文件，如果存在，则会先加载该目录下的 <strong>所有yaml文件</strong>至 K8s，然后再进行 <em>chart</em> 的发布。</p><blockquote><p>⚠️ <strong>注意以下几点:</strong></p><ul><li>多个 CRD 的表达式可以写在一个 yaml 文件中，但需要以 <strong>开始结束符 “ <code>---</code> “</strong> 进行分割</li><li>CRD文件<strong>无法套用 Helm 模版</strong>，必须是普通的 yaml 格式文件</li><li>安装 chart 时，会先上传 CRD（如有），并同时暂停安装，直到 CRD 被 api server 调用，才会开始后续 chart 渲染步骤。</li></ul></blockquote><h4 id="1）使用示例"><a href="#1）使用示例" class="headerlink" title="1）使用示例"></a>1）使用示例</h4><p>如果要创建一个针对 <code>crontab</code> 的 CRD，需要遵循以下目录结构和语法规则：</p><h5 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_chart/<br>  Chart.yaml<br>  crds/<br>    crontab.yaml<br>  templates/<br>    mycrontab.yaml<br></code></pre></td></tr></table></figure><h5 id="2-crontab-yaml-的写法"><a href="#2-crontab-yaml-的写法" class="headerlink" title="2. crontab.yaml 的写法"></a>2. crontab.yaml 的写法</h5><blockquote><p>⚠️ <strong>注意:</strong> CRD 不支持 Helm 模版指令，所以 crontab.yaml 只能使用 K8s 经典声明表达式。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">crontabs.stable.example.com</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">stable.example.com</span><br>  <span class="hljs-attr">versions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attr">served:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">crontabs</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">crontab</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">CronTab</span><br></code></pre></td></tr></table></figure><h5 id="3-mycrontab-yaml-模版文件"><a href="#3-mycrontab-yaml-模版文件" class="headerlink" title="3. mycrontab.yaml 模版文件"></a>3. mycrontab.yaml 模版文件</h5><p>CRD 的信息在被加载至 K8s 后，就会在 Helm 模版的 <code>.Capabilities</code> 中生效，指定 <code>apiVersion</code> 就可以引用。和其他资源对象一样，你需要通过创建模版，并通过 Values 渲染来创建实例。CRD 的模版文件同其他 template 文件一样。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">stable.example.com</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronTab</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.name</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>   <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h4 id="2）CRD-的限制"><a href="#2）CRD-的限制" class="headerlink" title="2）CRD 的限制"></a>2）CRD 的限制</h4><p>和大部分的 K8s 资源对象不同，CRD 是全局性的，故 Helm 对其的管理较为慎重，并对其设置了一下限制：</p><blockquote><ul><li><p><strong>不会重复安装</strong></p><p>如果 <code>crds/</code> 目录下的 CRD已存在，无论是否有版本区别，都不会重新安装覆盖，不会自动升级</p></li><li><p><strong>不会在升级、回滚时安装</strong></p><p>只有在第一次 <code>helm install</code> 时才会被安装</p></li><li><p><strong>不会被自动删除</strong></p><p>自动删除 CRD 会删除所有 <code>namespace</code> 中的所有 <code>CRD</code> ，故不能通过 Helm 删除</p><p>希望升级或删除 CRD，需要进行手动操作，操作需谨慎</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Helm3 安装部署</title>
    <link href="/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Helm3-安装部署"><a href="#第2章、Helm3-安装部署" class="headerlink" title="第2章、Helm3 安装部署"></a>第2章、Helm3 安装部署</h1><span id="more"></span><h2 id="一、各环境安装部署"><a href="#一、各环境安装部署" class="headerlink" title="一、各环境安装部署"></a>一、各环境安装部署</h2><h3 id="1、Linux"><a href="#1、Linux" class="headerlink" title="1、Linux"></a>1、Linux</h3><h4 id="1）二进制包安装"><a href="#1）二进制包安装" class="headerlink" title="1）二进制包安装"></a>1）二进制包安装</h4><h5 id="1⃣️-下载二进制包"><a href="#1⃣️-下载二进制包" class="headerlink" title="1⃣️ 下载二进制包"></a>1⃣️ 下载二进制包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2⃣️-下载校验文件"><a href="#2⃣️-下载校验文件" class="headerlink" title="2⃣️ 下载校验文件"></a>2⃣️ 下载校验文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://github.com/helm/helm/releases#:~:text=Linux%20amd64%20(-,checksum,-/%20a8ddb4e30435b5fd45308ecce5eaad676d64a5de9c89660b56face3fe990b318)<br></code></pre></td></tr></table></figure><h5 id="3⃣️-md5校验"><a href="#3⃣️-md5校验" class="headerlink" title="3⃣️ md5校验"></a>3⃣️ md5校验</h5><blockquote><p>如果没有<code>shasum</code>命令，需先行安装，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y perl-Digest-SHA <br></code></pre></td></tr></table></figure><p>安装完成后，进行校验</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shasum -a 256 -c helm-v3.5.4-linux-amd64.tar.gz.sha256sum <br></code></pre></td></tr></table></figure><p>如果验证通过，返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm-v3.5.4-linux-amd64.tar.gz: OK<br></code></pre></td></tr></table></figure><p>如果验证失败，返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm-v3.5.4-linux-amd64.tar.gz: FAILED<br>shasum: WARNING: 1 computed checksum did NOT match<br></code></pre></td></tr></table></figure><h5 id="4⃣️-解压安装"><a href="#4⃣️-解压安装" class="headerlink" title="4⃣️ 解压安装"></a>4⃣️ 解压安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf helm-v3.5.4-linux-amd64.tar.gz &amp;&amp; \<br>cd linux-amd64 &amp;&amp; \<br>install -o root -g root -m 0755 helm /usr/local/bin/helm<br></code></pre></td></tr></table></figure><h5 id="5⃣️-验证版本"><a href="#5⃣️-验证版本" class="headerlink" title="5⃣️ 验证版本"></a>5⃣️ 验证版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm version<br></code></pre></td></tr></table></figure><p>正常返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">version.BuildInfo&#123;Version:&quot;v3.5.4&quot;, GitCommit:&quot;1b5edb69df3d3a08df77c9902dc17af864ff05d1&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.15.11&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="2）Apt-安装（Debian-Ubuntu）"><a href="#2）Apt-安装（Debian-Ubuntu）" class="headerlink" title="2）Apt 安装（Debian/Ubuntu）"></a>2）Apt 安装（Debian/Ubuntu）</h4><blockquote><p>官方提供了针对Apt的一个 <code>Helm包</code>，可以使用 <code>Apt命令</code> 自动安装最新版本的 helm。</p></blockquote><h5 id="1⃣️-添加镜像源"><a href="#1⃣️-添加镜像源" class="headerlink" title="1⃣️ 添加镜像源"></a>1⃣️ 添加镜像源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -<br>sudo apt-get install apt-transport-https --yes<br>echo &quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list<br></code></pre></td></tr></table></figure><h5 id="2⃣️-更新缓存"><a href="#2⃣️-更新缓存" class="headerlink" title="2⃣️ 更新缓存"></a>2⃣️ 更新缓存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><h5 id="3⃣️-安装"><a href="#3⃣️-安装" class="headerlink" title="3⃣️ 安装"></a>3⃣️ 安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install helm<br></code></pre></td></tr></table></figure><h4 id="3）自动脚本安装"><a href="#3）自动脚本安装" class="headerlink" title="3）自动脚本安装"></a>3）自动脚本安装</h4><blockquote><p>官方提供了一个可以自动在本地安装最新版本 Helm 的脚本，在版本库的 <code>helm/scripts</code> 下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210628144033780.png" alt="image-20210628144033780"></p><p>🚩 <strong>该脚本会自动识别系统环境，进行下载安装，其他系统环境也可以使用。</strong></p></blockquote><p>执行如下命令，直接自动安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash<br></code></pre></td></tr></table></figure><h4 id="4）添加命令补全"><a href="#4）添加命令补全" class="headerlink" title="4）添加命令补全"></a>4）添加命令补全</h4><p>安装命令补全功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y bash-completion<br></code></pre></td></tr></table></figure><p>新增文件 <code>/etc/profile.d/helm.sh</code>，编辑以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source &lt;(helm completion bash)<br></code></pre></td></tr></table></figure><p>生效环境变量配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/helm.sh<br></code></pre></td></tr></table></figure><h3 id="2、macOS"><a href="#2、macOS" class="headerlink" title="2、macOS"></a>2、macOS</h3><h4 id="使用-Homebrew-安装"><a href="#使用-Homebrew-安装" class="headerlink" title="使用 Homebrew 安装"></a>使用 Homebrew 安装</h4><blockquote><p>官方提供了针对 <code>Homebrew</code> 构建 Helm 的方案，可以使用 <code>brew命令</code> 自动安装最新版本的 helm。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install helm<br></code></pre></td></tr></table></figure><h3 id="3、Windows"><a href="#3、Windows" class="headerlink" title="3、Windows"></a>3、Windows</h3><h4 id="使用-Chocolatey-安装"><a href="#使用-Chocolatey-安装" class="headerlink" title="使用 Chocolatey 安装"></a>使用 Chocolatey 安装</h4><blockquote><p>官方提供了针对 <code>Chocolatey</code> 的一个 <code>Helm包</code>，可以使用 <code>choco命令</code> 自动安装最新版本的 helm。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">choco install kubernetes-helm<br></code></pre></td></tr></table></figure><hr><h2 id="二、添加公共仓库"><a href="#二、添加公共仓库" class="headerlink" title="二、添加公共仓库"></a>二、添加公共仓库</h2><blockquote><p>⚠️ <strong>注意:</strong></p><p>首次安装 Helm3 是没有指定默认仓库的，需要手动添加仓库才可以正常使用。</p></blockquote><h3 id="1、添加常用仓库"><a href="#1、添加常用仓库" class="headerlink" title="1、添加常用仓库"></a>1、添加常用仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> helm repo add stable https://charts.helm.sh/stable<span class="hljs-comment"># Helm 官方源</span></span><br>helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts# 阿里云国内源(用于加速)<br>helm repo add bitnami https://charts.bitnami.com/bitnami# Helm 官方源（Helm3默认使用）<br>helm repo add incubator https://charts.helm.sh/incubator<br>helm repo add jetstack https://charts.jetstack.io<br></code></pre></td></tr></table></figure><blockquote><p>微软也提供了 stable 的镜像仓库，地址为 <code>http://mirror.azure.cn/kubernetes/charts/</code></p></blockquote><h3 id="2、删除仓库"><a href="#2、删除仓库" class="headerlink" title="2、删除仓库"></a>2、删除仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo remove stable<br></code></pre></td></tr></table></figure><h3 id="3、更新仓库"><a href="#3、更新仓库" class="headerlink" title="3、更新仓库"></a>3、更新仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo update<br></code></pre></td></tr></table></figure><h3 id="4、查看仓库"><a href="#4、查看仓库" class="headerlink" title="4、查看仓库"></a>4、查看仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo list<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210630154956853.png" alt="image-20210630154956853"></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、Helm 简介</title>
    <link href="/2021/07/24/%E7%AC%AC1%E7%AB%A0%E3%80%81Helm-%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/07/24/%E7%AC%AC1%E7%AB%A0%E3%80%81Helm-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、Helm-简介"><a href="#第1章、Helm-简介" class="headerlink" title="第1章、Helm 简介"></a>第1章、Helm 简介</h1><span id="more"></span><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/helm3.jpg" alt="helm logo"></p><p><a href="https://helm.sh/">Helm 官网</a></p><p><a href="https://github.com/helm/helm">Helm 官方GitHub</a></p><h2 id="一、什么是-Helm？"><a href="#一、什么是-Helm？" class="headerlink" title="一、什么是 Helm？"></a>一、什么是 Helm？</h2><p>就像 Java 使用 maven；node 使用 npm；python 使用 pip；Linux 使用 yum 或 Apt 一样，不管是什么样的工作，技术人员都会希望有一种资源管理器/包管理器，以此来方便得查找、下载、安装、使用和分发软件包。</p><p>所以 Helm 即可以说是 <code>K8S的包管理器</code>，它使得我们对于 K8S 的操作不再需要细化到资源对象，而是可以作为一个实例进行管理。不再需要去写 <code>deployment</code> 、<code>service</code> 、<code>ingress</code> 的 yaml，而是可以直接通过 <code>install</code> 命令实现服务实例的安装。</p><h3 id="Helm-的主要功能总结："><a href="#Helm-的主要功能总结：" class="headerlink" title="Helm 的主要功能总结："></a>Helm 的主要功能总结：</h3><blockquote><ul><li>查找要安装和使用的预打包软件</li><li>轻松创建和托管自己的软件包</li><li>将软件包安装到任何 K8S 集群中</li><li>查询集群以查看已安装和正在运行的程序包</li><li>更新、删除、回滚或查看已安装软件包的历史记录</li></ul></blockquote><hr><h2 id="二、Helm-中的基本概念"><a href="#二、Helm-中的基本概念" class="headerlink" title="二、Helm 中的基本概念"></a>二、Helm 中的基本概念</h2><h3 id="1、Chart"><a href="#1、Chart" class="headerlink" title="1、Chart"></a>1、<em>Chart</em></h3><p>Helm 使用的包格式称为 <code>chart</code>，它是一个描述 Kubernetes 相关资源对象的文件集合。它的技术特点类似 jinja模版，以渲染模版的方式，生成运行一个服务实例所需的一系列资源对象文件，并以此进行服务的发布。通过这种方式，我们也可以十分简单的制作自定义的 chart。</p><p>Chart 有自已特定的目录布局，我们以官方提供的 <code>wordpress</code>为例说明，chart 的文件目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">wordpress/<br>  Chart.yaml          # 包含了chart信息的YAML文件<br>  LICENSE             # 可选: 包含chart许可证的纯文本文件<br>  README.md           # 可选: 可读的README文件<br>  values.yaml         # chart 默认的配置值<br>  values.schema.json  # 可选: 一个使用JSON结构的values.yaml文件<br>  charts/             # 包含chart依赖的其他chart<br>  crds/               # 自定义资源的定义<br>  templates/          # 模板目录， 当和values 结合时，可生成有效的Kubernetes manifest文件<br>  templates/NOTES.txt # 可选: 包含简要使用说明的纯文本文件<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>Helm Chart 基本元素为 <code>charts/</code>、<code>Chart.yaml </code>、<code>templates/</code>、<code>values.yaml</code>，并保留 <code>crds/</code> ，要正确的使用 chart 进行发布，该元素是必不可少的。</p></blockquote><h3 id="2、Repos"><a href="#2、Repos" class="headerlink" title="2、Repos"></a>2、<em>Repos</em></h3><p>Helm chart 可以被存储在专用的 HTTP 服务器上，称为 <code>chart 仓库（repositories)</code>，和 <code>yum repository</code>类似，chart 仓库提供了一个 <code>index.yaml</code> 来描述一批 chart，并且提供了每个 chart 的下载地址信息。</p><p>Helm 客户端可以指向多个 chart 仓库，默认情况下是没有配置仓库的，需要使用 <code>helm repo add</code> 来进行添加。helm3 中对于一些常用服务的下载安装，用 <code>bitnami 仓库</code>  取代了原来的<code>stable 仓库</code>，但是仍保留了 <code>stable 仓库</code>的使用。</p><h3 id="3、Release"><a href="#3、Release" class="headerlink" title="3、Release"></a>3、<em>Release</em></h3><p>当 chart 被发布后，Helm 库会创建一个 <code>release</code> 来跟踪这个发布的对象，它的实质是在 Kubernetes 中运行的各种资源，<code>service</code>、<code>deployment</code>、<code>configmap</code>、<code>secret</code> 等，在 K8S 集群中的直接的表现就是一个或多个 pod。</p><blockquote><p>⚠️ <strong>注意:</strong>  </p><p>Helm 的 release 是允许启动多个不同服务的，且每个服务之间遵循依赖关系，这点就比较类似 docker compose。</p></blockquote><hr><h2 id="三、从-Helm2-到-Helm3-的变化"><a href="#三、从-Helm2-到-Helm3-的变化" class="headerlink" title="三、从 Helm2 到 Helm3 的变化"></a>三、从 Helm2 到 Helm3 的变化</h2><h3 id="1、Helm3-新增的功能"><a href="#1、Helm3-新增的功能" class="headerlink" title="1、Helm3 新增的功能"></a>1、Helm3 新增的功能</h3><p>Helm3 有很多新的功能，有个重要功能需要特别指出：</p><blockquote><ul><li>release 的信息以新的形式存储</li><li>移除了 Tiller 组件</li><li>Helm3 包含了对新版本 Helm charts （Charts v2）的支持</li><li>Helm3 支持 <code>library charts</code> —— 一种作为其他 charts 元素的 charts</li><li>将 Chart 推送保存到 OCI 注册中心（类似 DockerRegistry ），以进行复用</li><li>升级Kubernetes资源时将应用3向战略合并补丁</li><li>支持使用 JSON Schema 对 charts 的 values 进行校验</li><li>为了使Helm更安全，可用和健壮，已进行了许多小的改进。</li></ul></blockquote><h3 id="2、重要变化概述"><a href="#2、重要变化概述" class="headerlink" title="2、重要变化概述"></a>2、重要变化概述</h3><h4 id="1）移除-Tiller"><a href="#1）移除-Tiller" class="headerlink" title="1）移除 Tiller"></a>1）移除 Tiller</h4><p><code>Tiller</code> 在 Helm2 中是一个重要的组成部分。Helm2 使用它和 <code>GRPC</code> 来处理 <code>Helm chart</code> 的安装和管理，呈现 <code>chart</code> 并将其推送到 Kubernetes API Server。<code>Tiller</code> 允许团队共享一个 Kubernetes 集群，多个 operator 可以使用同一组发行版，团队成员通过它就可以在一个共享的 Kubernetes 集群中管理复杂的应用发布。</p><p>但是从 Kubernetes 1.6 开始，考虑到安全性，集群默认会开启角色访问控制（<code>RBAC</code>），这使得管理和配置Tiller会变得非常复杂，因为可能的安全策略数量太多了。为了简化安全模型实现方式，并使管理员/SRE不需要去深入研究 Kubernetes 的安全组件，helm 提供了一个不需要太过关注安全规则的默认配置，但是这又会使得授权变得宽松，这反而会导致安全隐患。</p><p>因此在 Helm3 中干脆移除了 Tiller，而是选择从 Kubernetes API Server 中获取信息来渲染 Charts 客户端，并在 Kubernetes 中存在安装记录，这些过程既是没有 Tiller 也可以实现。</p><p>Helm3 可以支持所有的 Kubernetes 认证及鉴权等全部安全特性。Helm和本地的 kubeconfig flie 中的配置使用一致的权限。管理员可以按照自己认为合适的粒度来管理用户权限。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/helm3%E5%8F%98%E5%8C%96.png" alt="helm3变化"></p><h4 id="2）Chart-仓库升级"><a href="#2）Chart-仓库升级" class="headerlink" title="2）Chart 仓库升级"></a>2）Chart 仓库升级</h4><p>在 Helm3 中，<code>helm search</code> 除了支持本地 repository 搜索外，还支持 <code>helm search hub</code> 搜索 Artifact Hub 中所有公开的 charts。</p><h4 id="3）改进升级策略：使用三路策略合并补丁"><a href="#3）改进升级策略：使用三路策略合并补丁" class="headerlink" title="3）改进升级策略：使用三路策略合并补丁"></a>3）改进升级策略：使用三路策略合并补丁</h4><p>在 Helm2 中，使用了双路策略合并补丁，简单来说就是在使用 <code>helm upgrade</code> 更新过程中，会比对本次发布的 chart manifest 和 最近一次发布的 chart manifest  的差异，以此来决定哪些更改被应用到 Kubernetes 的资源中去。并且，Helm 只会将最后一次应用的 chart manifest 作为 release 的当前状态，如果 chart 状态没有更改，资源的活动状态就不会更改，也就是说使用诸如 <code>kubectl edit</code> 、<code>kubectl scale</code> 这种外部方式进行的修改不会被 Helm 识别的，这种情况下如果发生回滚操作，Helm 会由于 chart 并没有发生变化而导致回滚失败。</p><p>而在 Helm3 中，这种策略被升级成了三路策略合并，Helm 在生成一个补丁时，也会考虑之前老的 manifest 的活动状态。也就是说，在使用老的 chart manifest 生成新的补丁时，Helm 还会考虑当前的活动状态，并将其与之前老的 manifest 进行比对，并再比对新的 manifest 是否有改动，并进行自动补全，以此来生成最终的更新补丁。</p><h6 id="示例说明："><a href="#示例说明：" class="headerlink" title="示例说明："></a>示例说明：</h6><p>用 Chart 渲染生成的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.0.0</span><br></code></pre></td></tr></table></figure><p>通过非 Helm 的方式将应用的活动状态修改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.0.0</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sidecar</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">dump_handler:1.0.0</span><br></code></pre></td></tr></table></figure><p>而现在我们想要将应用的镜像升级到 <code>2.1.0</code>，通过 chart 进行升级操作。</p><p>在 Helm2 中，由于不会考虑 chart 之外的修改，而是检测 chart 生成的 manifest 之间的区别，因此修改后的状态如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.1.0</span><br></code></pre></td></tr></table></figure><p>而在 Helm3 中，通过三路合并策略，会检查到除了 chart 的修改外，还多了一个 sidecar 容器，因此会进行补全，最终修改状态如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.1.0</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sidecar</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">dump_handler:1.0.0</span><br></code></pre></td></tr></table></figure><h4 id="4）release-名称存储位置改变"><a href="#4）release-名称存储位置改变" class="headerlink" title="4）release 名称存储位置改变"></a>4）release 名称存储位置改变</h4><p>在 Helm2 中，release 的相关信息都被保存在 Tiller 的 namespace下，所以 release 的名称必须是唯一的；而随着 Tiller 组件的移除， Helm3 中release 相关的信息都被保存在了应用自己相对应的 namespace 下，因此根据 namespace 的隔离性质，在不同的 ns 下，release 的名称可以重复。</p><blockquote><p>⚠️ <strong>注意:</strong></p><p>Helm3 中，在执行 <code>helm list</code> 时需要添加 <code>--all-namespaces</code> 参数才能获取到 Helm2 中同样的结果</p></blockquote><h4 id="5）默认存储驱动程序更改为-Secrets"><a href="#5）默认存储驱动程序更改为-Secrets" class="headerlink" title="5）默认存储驱动程序更改为 Secrets"></a>5）默认存储驱动程序更改为 Secrets</h4><p>Helm 2 默认情况下使用 ConfigMaps 存储发行信息，直到 Helm 2.7.0 中，才使用 Secrets 用作存储驱动程序。而在 Helm 3 中默认就使用 Secrets。</p><p><a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/">静态加密密钥</a> 在Kubernetes 1.7中作为alpha特性可以使用了，在Kubernetes 1.13中变成了稳定特性。 这允许用户静态加密Helm的发布元数据，同时也是一个类似Vault的以后可扩展的良好起点。</p><h4 id="6）Go-导入路径更改"><a href="#6）Go-导入路径更改" class="headerlink" title="6）Go 导入路径更改"></a>6）Go 导入路径更改</h4><p>在 Helm3 中，Go 导入路径从<code>k8s.io/helm</code> 切换为 <code>helm.sh/helm/v3</code>。 如果打算升级到Helm 3 Go客户端库，请确保更改导入路径。</p><h4 id="7）使用-JSONSchema-验证-Chart-的-values"><a href="#7）使用-JSONSchema-验证-Chart-的-values" class="headerlink" title="7）使用 JSONSchema 验证 Chart 的 values"></a>7）使用 JSONSchema 验证 Chart 的 values</h4><p>Helm3 支持用<code> JSONSchema</code>  来校验 Chart 的 values，它会自动检查所有输入的变量格式。这样可以确保用户提供的值遵循 Chart 维护者设计的架构，当用户为 Chart 提供一组错误值时，也能提供更好的错误报告。</p><p>当调用一下命令时会进行 JSON 格式验证：</p><blockquote><ul><li>helm install</li><li>helm upgrade</li><li>helm template</li><li>helm lint</li></ul></blockquote><h4 id="8）requirements-yaml合并入-Chart-yaml"><a href="#8）requirements-yaml合并入-Chart-yaml" class="headerlink" title="8）requirements.yaml合并入 Chart.yaml"></a>8）requirements.yaml合并入 Chart.yaml</h4><p>动态依赖关系的chart 依赖从 <code>requirements.yaml</code> 和 <code>requirements.lock</code> 移至 <code>Chart.yaml</code> 和 <code>Chart.lock</code>。 推荐在 Helm3 的新 chart 中使用 Chart API v2 的新格式，但是 Helm3 中依然可以识别 v1 版本，并且会自动加载已有的 <code>requirements.yaml</code> 文件。</p><p>在 Helm2 中，<code>requirements.yaml</code> 的表达式类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mariadb</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">5.</span><span class="hljs-string">x.x</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://charts.helm.sh/stable</span><br>  <span class="hljs-attr">condition:</span> <span class="hljs-string">mariadb.enabled</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">database</span><br></code></pre></td></tr></table></figure><p>而在 Helm3 中，表达式的形式并没有变化，但是现在需要写在 <code>Chart.yaml</code> 中。Chart 依然会下载和放置在 <code>charts/</code> 目录，所以 <code>charts/</code> 目录中的子 chart 不需要做任何修改，可以沿用 Helm2 的。</p><h4 id="9）指定名称和命名空间"><a href="#9）指定名称和命名空间" class="headerlink" title="9）指定名称和命名空间"></a>9）指定名称和命名空间</h4><h5 id="1⃣️-发布时必须指定-release-名称"><a href="#1⃣️-发布时必须指定-release-名称" class="headerlink" title="1⃣️ 发布时必须指定 release 名称"></a>1⃣️ 发布时必须指定 release 名称</h5><p>在 Helm2 中，在发布时如果未提供 release 的名称，Helm 会自动生成一个，但是在 Helm3 中，如果未指定 release 名称，安装就会报错，如果仍然希望 Helm 能够自动生成 release 名称，可以使用 <code>--generate-name</code> 参数。</p><h5 id="2⃣️-不再自动创建-namespace"><a href="#2⃣️-不再自动创建-namespace" class="headerlink" title="2⃣️ 不再自动创建 namespace"></a>2⃣️ 不再自动创建 namespace</h5><p>在 Helm2 中，如果在创建版本时，命名空间不存在，Helm2 会自动创建一个命名空间，但是在 Helm3 中，如果命名空间不存在就会报错，需要明确指定 <code>--create-namespace</code> 参数，Helm3 才会自动创建一个命名空间。</p><h4 id="10）将-Chart-推送到-OCI-注册中心"><a href="#10）将-Chart-推送到-OCI-注册中心" class="headerlink" title="10）将 Chart 推送到 OCI 注册中心"></a>10）将 Chart 推送到 OCI 注册中心</h4><p>这是一个 Helm3 中的试验性特性，使用时需要设置环境变量 <code>HELM_EXPERIMENTAL_OCI=1</code>。</p><p>查看 <code>helm help chart</code> 和 <code>helm help registry</code> 了解如何打包chart并推送到Docker注册中心的更多信息。</p><h4 id="11）移除-helm-serve"><a href="#11）移除-helm-serve" class="headerlink" title="11）移除 helm serve"></a>11）移除 <code>helm serve</code></h4><p>在 Helm2 中，可以通过 <code>helm serve</code> 命令在本地临时搭建 <code>Chart Repository </code>，但是由于并没有被开发工具接受，且在设计方面存在较多问题，故在 Helm3 中被删除了。</p><h4 id="12）支持-library-chart"><a href="#12）支持-library-chart" class="headerlink" title="12）支持 library chart"></a>12）支持 library chart</h4><p>Helm3 支持一类称为 <code>library chart</code> 的 chart，其本省不会创建任何应用，只是作为其他 chart 的共享依赖。library chart 只能用于声明定义元素，全局范围内的非定义内容将被忽略。这使用户可以重复使用和共享可在许多chart中重复使用的代码段，从而避免了冗余并使 chart 保持简洁。</p><p>Library chart 在 Chart.yaml 的依赖指令中声明，安装和管理与其他chart一致，其表达式类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mylib</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">x.x</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">quay.io</span><br></code></pre></td></tr></table></figure><h4 id="13）Chart-yaml-的-apiVersion-升级"><a href="#13）Chart-yaml-的-apiVersion-升级" class="headerlink" title="13）Chart.yaml 的 apiVersion 升级"></a>13）Chart.yaml 的 apiVersion 升级</h4><h5 id="1⃣️-apiVersion-v1-升级至-v2"><a href="#1⃣️-apiVersion-v1-升级至-v2" class="headerlink" title="1⃣️ apiVersion v1 升级至 v2"></a>1⃣️ apiVersion v1 升级至 v2</h5><p>由于 Helm3 中新增了许多新的特性，比如支持 <code>library chart</code> 、<code>requirements.yaml</code> 合并进 <code>Chart.yaml</code>。而客户端虽然可以是别 Helm2 的包格式，却不能理解这些新的特性，因此 Helm3 中的 Chart.yaml 的 apiVersion 也从 v1 升级到可 v2。</p><p>使用 Helm3 的 <code>helm create</code> 创建的 chart 将使用新格式，默认的 apiVersion 也将使用 v2。</p><h5 id="2⃣️-ApiVersion-改为-APIVersion"><a href="#2⃣️-ApiVersion-改为-APIVersion" class="headerlink" title="2⃣️ ApiVersion 改为 APIVersion"></a>2⃣️ ApiVersion 改为 APIVersion</h5><p>Helm3 对于驼峰的命令规范进行了修改，遵循驼峰命名的典型惯例，因此将 <code>.Chart.ApiVersion</code> 更正为了 <code>.Chart.APIVersion</code>，其他诸如 <code>.Capabilities.APIVersions.Has</code> 都进行了更正处理。</p><h4 id="14）XDG-基本目录支持"><a href="#14）XDG-基本目录支持" class="headerlink" title="14）XDG 基本目录支持"></a>14）XDG 基本目录支持</h4><p><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG 基本目录规范</a> 是一个定义了配置、数据和缓存文件应该存储在文件系统什么位置的可移植标准。</p><p>在 Helm2 中，Helm 相关的信息都存储在 <code>~/.helm/</code> 目录下，可以通过设置环境变量 <code>$HELM_HOME</code> 或者 <code>--home</code> 参数指定。而在 Helm3 中，相关的环境变量则变更为了以下规范形式：</p><blockquote><ul><li>$XDG_CACHE_HOME        # 用于存放缓存文件</li><li>$XDG_CONFIG_HOME      # 用于存放配置文件</li><li>$XDG_DATA_HOME          # 用于存放数据文件</li></ul></blockquote><p>但是在 Helm3 中仍保留了 <code>$HELM_HOME</code> 作为 <code>$XDG_DATA_HOME</code> 的别名，以此来保证过渡阶段的兼容性。</p><p>Helm 插件如过要支持 Helm3，也可以用以下环境变量，来适应这种变化：</p><blockquote><ul><li>$HELM_PATH_CACHE       # 用于存放缓存文件</li><li>$HELM_PATH_CONFIG     # 用于存放配置文件</li><li>$HELM_PATH_DATA          # 用于存放数据文件</li></ul></blockquote><h5 id="各环境默认文件存放位置"><a href="#各环境默认文件存放位置" class="headerlink" title="各环境默认文件存放位置"></a>各环境默认文件存放位置</h5><blockquote><p>🚩 可以通过 <code>helm env</code> 查看</p></blockquote><table><thead><tr><th><strong>Operating System</strong></th><th><strong>Cache Path</strong></th><th><strong>Configuration Path</strong></th><th><strong>Data Path</strong></th></tr></thead><tbody><tr><td><strong>Linux</strong></td><td>$HOME/.cache/helm</td><td>$HOME/.config/helm</td><td>$HOME/.local/share/helm</td></tr><tr><td><strong>macOS</strong></td><td>$HOME/Library/Caches/helm</td><td>$HOME/Library/Preferences/helm</td><td>$HOME/Library/helm</td></tr><tr><td><strong>Windows</strong></td><td>%TEMP%\helm</td><td>%APPDATA%\helm</td><td>%APPDATA%\helm</td></tr></tbody></table><h4 id="15）CLI-命令重命名"><a href="#15）CLI-命令重命名" class="headerlink" title="15）CLI 命令重命名"></a>15）CLI 命令重命名</h4><h5 id="1⃣️-helm-delete-更改为-helm-uninstall"><a href="#1⃣️-helm-delete-更改为-helm-uninstall" class="headerlink" title="1⃣️ helm delete 更改为 helm uninstall"></a>1⃣️ <code>helm delete</code> 更改为 <code>helm uninstall</code></h5><p>在 Helm2 中，如果要清楚 release 的各种资源，必须要使用 <code>--purge</code> 参数，Helm3 中默认就会启用次功。</p><p>如果要保留历史行为数据，需执行 <code>helm uninstall --keep-history</code></p><h5 id="2⃣️-helm-inspect-更改为-helm-show"><a href="#2⃣️-helm-inspect-更改为-helm-show" class="headerlink" title="2⃣️ helm inspect 更改为 helm show"></a>2⃣️ <code>helm inspect</code> 更改为 <code>helm show</code></h5><h5 id="3⃣️-helm-fetch-更改为-helm-pull"><a href="#3⃣️-helm-fetch-更改为-helm-pull" class="headerlink" title="3⃣️ helm fetch 更改为 helm pull"></a>3⃣️ <code>helm fetch</code> 更改为 <code>helm pull</code></h5><blockquote><p>🚩 <strong>这些命令还保留了它们较旧的命令作为别名，因此您可以继续以任何一种形式使用它们。</strong></p></blockquote><h4 id="16）简化模板对象-Capabilities"><a href="#16）简化模板对象-Capabilities" class="headerlink" title="16）简化模板对象 .Capabilities"></a>16）简化模板对象 .Capabilities</h4><p><code>Capabilities</code> 是 Helm 模版可以访问的内置对象之一，其提供了关于 Kubernetes 集群支持的功能的信息，包含以下内容：</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>Capabilities.APIVersions</td><td>集群的版本信息</td></tr><tr><td>Capabilities.APIVersions.Has $version</td><td>说明集群中的版本 (例如, <code>batch/v1</code>) 或是资源 (例如, <code>apps/v1/Deployment</code>) 是否可用</td></tr><tr><td>Capabilities.KubeVersion</td><td>提供了查找 Kubernetes 版本的方法。可以获取到 <code>Major</code>，<code>Minor</code>，<code>GitVersion</code>，<code>GitCommit</code>，<code>GitTreeState</code>，<code>BuildDate</code>，<code>GoVersion</code>，<code>Compiler</code>和<code>Platform</code>。</td></tr><tr><td>Capabilities.TillerVersion</td><td>提供了查找Tiller版本的方法。可以获取到<code>SemVer</code>, <code>GitCommit</code>, and <code>GitTreeState</code>.</td></tr></tbody></table><hr><h2 id="四、Helm版本支持策略"><a href="#四、Helm版本支持策略" class="headerlink" title="四、Helm版本支持策略"></a>四、Helm版本支持策略</h2><h3 id="1、-版本形式"><a href="#1、-版本形式" class="headerlink" title="1、 版本形式"></a>1、 版本形式</h3><blockquote><p>Helm 的版本用 <code>x.y.z</code> 的形式描述，<code>x</code> 是主版本，<code>y</code> 是次版本，<code>z</code> 是补丁版本。当一个 Helm 的新版本发布时，都是针对 Kubernetes 的一个特定版本编译的，比如 <code>3.0.0</code> 基于 Kubernetes 的 <code>1.16.2</code> 的客户端API版本构建，则可以兼容 Kubernetes 1.16。</p></blockquote><h3 id="2、可支持的版本偏差"><a href="#2、可支持的版本偏差" class="headerlink" title="2、可支持的版本偏差"></a>2、可支持的版本偏差</h3><blockquote><p>相较于 Helm2 对于 Kubernetes 次版本变更支持的严格（<code>n-1</code>），Helm3 可以向下兼容 <code>n-3</code> 的次版本，比如你使用一个针对 Kubernetes 1.18 客户端 API 版本编译的 Helm3 版本，那么它可以支持的 Kubernetes 版本为 1.18、1.17、1.16、1.15 ；</p><p>如果你使用一个针对 Kubernetes 1.15 客户端 API 版本编译的 Helm2 版本，那么它可以支持的 Kubernetes 版本为 1.15、1.14。</p><p>⚠️ <strong>注意：</strong> Helm 没有向上兼容机制，故推荐安装下表进行版本选择。</p></blockquote><table><thead><tr><th>Helm 版本</th><th>支持的 Kubernetes 版本</th></tr></thead><tbody><tr><td>3.6.x</td><td>1.21.x - 1.18.x</td></tr><tr><td>3.5.x</td><td>1.20.x - 1.17.x</td></tr><tr><td>3.4.x</td><td>1.19.x - 1.16.x</td></tr><tr><td>3.3.x</td><td>1.18.x - 1.15.x</td></tr><tr><td>3.2.x</td><td>1.18.x - 1.15.x</td></tr><tr><td>3.1.x</td><td>1.17.x - 1.14.x</td></tr><tr><td>3.0.x</td><td>1.16.x - 1.13.x</td></tr><tr><td>2.16.x</td><td>1.16.x - 1.15.x</td></tr><tr><td>2.15.x</td><td>1.15.x - 1.14.x</td></tr><tr><td>2.14.x</td><td>1.14.x - 1.13.x</td></tr><tr><td>2.13.x</td><td>1.13.x - 1.12.x</td></tr><tr><td>2.12.x</td><td>1.12.x - 1.11.x</td></tr><tr><td>2.11.x</td><td>1.11.x - 1.10.x</td></tr><tr><td>2.10.x</td><td>1.10.x - 1.9.x</td></tr><tr><td>2.9.x</td><td>1.10.x - 1.9.x</td></tr><tr><td>2.8.x</td><td>1.9.x - 1.8.x</td></tr><tr><td>2.7.x</td><td>1.8.x - 1.7.x</td></tr><tr><td>2.6.x</td><td>1.7.x - 1.6.x</td></tr><tr><td>2.5.x</td><td>1.6.x - 1.5.x</td></tr><tr><td>2.4.x</td><td>1.6.x - 1.5.x</td></tr><tr><td>2.3.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.2.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.1.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.0.x</td><td>1.4.x - 1.3.x</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
