<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— kubelet</title>
    <link href="/2021/11/03/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kubelet/"/>
    <url>/2021/11/03/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kubelet/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-kubelet"><a href="#Kubernetes-基础组件介绍-——-kubelet" class="headerlink" title="Kubernetes 基础组件介绍 —— kubelet"></a>Kubernetes 基础组件介绍 —— kubelet</h1><p>在 K8S 的组件中，<code>kubelet</code> 是在每个 Node 节点上运行的 “节点代理”。它默认监听 10250 端口，接收并执行 Master 节点发来的指令，并实际管理 Pod 以及 Pod 中的容器。每个 <code>kubelet</code> 进程都会在 API Server 注册所在 Node 节点的信息，其注册的表示一般为主机名(hostname)、覆盖主机名的参数或公有云驱动的特定逻辑。<code>kubelet</code> 会通过 cAdvisor 来监控节点和容器的资源，并定期向 Master 节点汇报该节点的资源使用情况。</p><span id="more"></span><h2 id="一、Kubelet-的工作原理"><a href="#一、Kubelet-的工作原理" class="headerlink" title="一、Kubelet 的工作原理"></a>一、Kubelet 的工作原理</h2><h2 id="二、Kubernetes-的资源体系"><a href="#二、Kubernetes-的资源体系" class="headerlink" title="二、Kubernetes 的资源体系"></a>二、Kubernetes 的资源体系</h2><h3 id="1、资源需求和资源限制"><a href="#1、资源需求和资源限制" class="headerlink" title="1、资源需求和资源限制"></a>1、资源需求和资源限制</h3><p>在 K8S 的资源体系中存在两个概念 <code>requests</code> 和 <code>limits</code>，用于为容器分配 cpu 和 memory 资源，定义在 <code>.spec.containers.resources</code> 中。一般来说，<code>limits</code> 会大于 <code>requests</code>。</p><ul><li><code>requests</code>: 即资源需求，用于保障容器可正常运行的最低保障，是容器调度的判断依据之一</li><li><code>limits</code>: 即资源限制，容器可以分配到的最大资源配额，通过这种硬性限制来控制容器资源的使用</li></ul><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211103163945438.png" alt="image-20211103163945438"></p><h5 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod-demo</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/stress-ng</span>   <span class="hljs-comment">#压测的镜像</span><br>      <span class="hljs-attr">resources:</span>         <span class="hljs-comment">#定义资源限额等</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;200m&quot;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;128Mi&quot;</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;500m&quot;</span>        <span class="hljs-comment">#1颗 cpu=1000m </span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br>      <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/usr/bin/stress-ng&quot;</span>, <span class="hljs-string">&quot;-m 1&quot;</span>, <span class="hljs-string">&quot;-c 1&quot;</span>, <span class="hljs-string">&quot;--metrics-brief&quot;</span>]<br></code></pre></td></tr></table></figure><p>创建 Pod 资源后，查看实际内存和 cpu 使用率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl exec pod-demo -- top<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211103164618371.png" alt="image-20211103164618371"></p><p>测试节点的CPU为 4核, 分配给容器500m的CPU, 也就是0.125个CPU, 所以看到的进程CPU占用率约为<code>13%</code>。</p><p>当持续压测，内存使用超过 <code>limits</code> 预设的 200Mi 时，容器就会被 OOM kill 掉，返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME            READY     STATUS      RESTARTS   AGE<br>pod-demo   0/1       OOMKilled   1          37s<br></code></pre></td></tr></table></figure><h3 id="2、QoS-Classes-分类"><a href="#2、QoS-Classes-分类" class="headerlink" title="2、QoS Classes 分类"></a>2、QoS Classes 分类</h3><p>Kubernetes 在创建 Pod 时会为其指定 QoS 类，它会影响到 Pod 的调度和驱逐策略。</p><h4 id="1）Guaranteed"><a href="#1）Guaranteed" class="headerlink" title="1）Guaranteed"></a>1）Guaranteed</h4><p>确保类型，此类 Pod 具备最高的优先级。如果 Pod 中所有容器的 <code>.spec.containers.resources</code> 中的 <code>limits</code> 和 <code>requests</code> 都相等且不为0，则这个 Pod 的 Qos 类就是 Guaranteed。需要注意的是，<strong>如果一个容器只指明了limit，而未指明 request，则表明 request 的值等于 limit 的值，也就符合 Guaranteed 的要求。</strong></p><h5 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例:"></a>使用示例:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod-demo</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">resources:</span>        <span class="hljs-comment">#定义资源限额等</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;200m&quot;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;200m&quot;</span>       <span class="hljs-comment">#1颗cpu=1000m</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br></code></pre></td></tr></table></figure><p>创建 Pod 资源后，describe 返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Name:         pod-demo<br>Namespace:    default<br>Priority:     0<br>。。。。。。<br>。。。。。。<br>QoS Class:       Guaranteed   #此时已经是 Guaranteed<br>Node-Selectors:  &lt;none&gt;<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s<br>                 node.kubernetes.io/unreachable:NoExecute for 300s<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  11s   default-scheduler  Successfully assigned default/pod-demo to node3<br>  Normal  Pulled     9s    kubelet, node3     Container image &quot;nginx&quot; already present on machine<br>  Normal  Created    8s    kubelet, node3     Created container myapp<br>  Normal  Started    8s    kubelet, node3     Started container myapp<br></code></pre></td></tr></table></figure><h4 id="2）Burstable"><a href="#2）Burstable" class="headerlink" title="2）Burstable"></a>2）Burstable</h4><p>不符合 <code>Guaranteed</code> QoS Class 标准，但是<strong>至少有一个容器设置了 cpu 或 内存 的 request 属性</strong>，其 QoS 类即 <code>Burstable</code>，其具备中等的优先级。</p><h5 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例:"></a>使用示例:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod-demo</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">resources:</span>       <br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;200m&quot;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br></code></pre></td></tr></table></figure><p>创建 Pod 资源后，describe 返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Name:         pod-demo<br>Namespace:    default<br>Priority:     0<br>。。。。。。<br>。。。。。。<br>QoS Class:       Burstable   #此时已经是 Burstable<br>Node-Selectors:  &lt;none&gt;<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s<br>                 node.kubernetes.io/unreachable:NoExecute for 300s<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  11s   default-scheduler  Successfully assigned default/pod-demo to node3<br>  Normal  Pulled     9s    kubelet, node3     Container image &quot;nginx&quot; already present on machine<br>  Normal  Created    8s    kubelet, node3     Created container myapp<br>  Normal  Started    8s    kubelet, node3     Started container myapp<br></code></pre></td></tr></table></figure><h4 id="3）Best-Effort"><a href="#3）Best-Effort" class="headerlink" title="3）Best-Effort"></a>3）Best-Effort</h4><p>如果一个 Pod 中所有容器的 <code>.spec.containers.resources</code> 中的 <code>limit</code> 和 <code>request</code> 都没有赋值，那么其 QoS Class 就是 <code>Best-Effort</code>，其优先级最低。</p><h5 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例:"></a>使用示例:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod-demo</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><p>创建 Pod 资源后，describe 返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Name:         pod-demo<br>Namespace:    default<br>Priority:     0<br>。。。。。。<br>。。。。。。<br>QoS Class:       BestEffort   #此时已经是 BestEffort<br>Node-Selectors:  &lt;none&gt;<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s<br>                 node.kubernetes.io/unreachable:NoExecute for 300s<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  11s   default-scheduler  Successfully assigned default/pod-demo to node3<br>  Normal  Pulled     9s    kubelet, node3     Container image &quot;nginx&quot; already present on machine<br>  Normal  Created    8s    kubelet, node3     Created container myapp<br>  Normal  Started    8s    kubelet, node3     Started container myapp<br></code></pre></td></tr></table></figure><h4 id="4）QoS-Classes-优先级排名"><a href="#4）QoS-Classes-优先级排名" class="headerlink" title="4）QoS Classes 优先级排名"></a>4）QoS Classes 优先级排名</h4><blockquote><p>🚩 QoS 类的优先级为: <strong>Guaranteed &gt; Burstable &gt; Best-Effort</strong></p></blockquote><p>当节点出现资源紧缺时，kubelet 会根据 QoS 的优先级驱逐 Pod，最先被驱逐的就是 <code>BestEffort</code>。在 Burstable类型下，已占用量与需求量比值大的先被驱逐（如，pod1 request 内存为 512Mi，已占用内存 500Mi； Pod2 request 内存为 1024Mi，已占用 512Mi 内存，那么会先驱逐 pod1）</p><h3 id="3、可压缩资源和不可压缩资源"><a href="#3、可压缩资源和不可压缩资源" class="headerlink" title="3、可压缩资源和不可压缩资源"></a>3、可压缩资源和不可压缩资源</h3><p>K8S 中对于系统资源可以分为两种属性：</p><ul><li><strong>可压缩资源</strong>: 例如 CPU 循环、Disk I/O、网络带宽，都是可以被限制和被回收的，对于一个 Pod 来说，可以降低这些资源的使用量而不需要去驱逐 Pod </li><li><strong>不可压缩资源</strong>: 例如内存、磁盘空间，对于不可压缩资源来说，如果资源不足，就无法继续申请资源，需要通过驱逐节点的 Pod 来进行资源回收</li></ul><p>kubelet 回收的资源主要是内存和磁盘两种，回收的基本方式如下:</p><ul><li>磁盘回收: 主要通过删除已终止的容器和未使用的镜像</li><li>内存回收: 主要通过终止正在运行的 pod</li></ul><h2 id="三、Kubernetes-节点压力驱逐"><a href="#三、Kubernetes-节点压力驱逐" class="headerlink" title="三、Kubernetes 节点压力驱逐"></a>三、Kubernetes 节点压力驱逐</h2><h3 id="1、什么是节点压力驱逐？"><a href="#1、什么是节点压力驱逐？" class="headerlink" title="1、什么是节点压力驱逐？"></a>1、什么是节点压力驱逐？</h3><p>节点压力驱逐事实上就是 kubelet 主动终止 Pod 以回收节点资源的过程。kubelet 会监控集群节点的 CPU、内存、磁盘空间和文件系统的 inode 等资源。 当这些资源中的一个或者多个达到特定的消耗水平， kubelet 可以主动地使节点上一个或者多个 Pod 失效，以回收资源防止枯竭。</p><p>在节点压力驱逐期间，kubelet 会将所选的 Pod 的 <code>PodPhase</code> 设置为 <code>Failed</code>，这回终止 Pod。Pod 的信息残留反馈为 <code>Evicted</code> 状态，如下图:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211027181000655.png" alt="image-20211027181000655"></p><h3 id="2、节点压力驱逐的机制"><a href="#2、节点压力驱逐的机制" class="headerlink" title="2、节点压力驱逐的机制"></a>2、节点压力驱逐的机制</h3><p>kubelet 会根据 <code>驱逐信号</code>，<code>驱逐条件</code>、<code>监控间隔</code> 来作出驱逐决定。</p><h4 id="1）驱逐信号"><a href="#1）驱逐信号" class="headerlink" title="1）驱逐信号"></a>1）驱逐信号</h4><p>驱逐信号是特定资源在特定时间点的当前状态。kubelet 使用驱逐信号，通过将信号和驱逐条件进行比较，来做出驱逐决定，驱逐条件就是节点上应该可用资源的最小量。kubelet 可使用的驱逐信号如下:</p><table><thead><tr><th>驱逐信号</th><th>取值方式</th></tr></thead><tbody><tr><td>memory.available</td><td>memory.available<code>:=</code>node.status.capacity[memory]<code>-</code>node.stats.memory.workingSet</td></tr><tr><td>nodefs.available</td><td>nodefs.available<code>:=</code>node.stats.fs.available</td></tr><tr><td>nodefs.inodesFree</td><td>nodefs.inodesFree<code>:=</code>node.stats.fs.inodesFree</td></tr><tr><td>imagefs.available</td><td>imagefs.available<code>:=</code>node.stats.runtime.imagefs.available</td></tr><tr><td>imagefs.inodesFree</td><td>imagefs.inodesFree<code>:=</code>node.stats.runtime.imagefs.inodesFree</td></tr><tr><td>pid.available</td><td>pid.available<code>:=</code>node.stats.rlimit.maxpid<code>-</code>node.stats.rlimit.curproc</td></tr></tbody></table><p>每个驱逐信号都支持百分比或是字面值，kubelet 采用的是信号有关的总量的百分比的方式来进行判断。</p><h5 id="1-memory-available"><a href="#1-memory-available" class="headerlink" title="1. memory.available"></a>1. memory.available</h5><p><code>memory.available</code> 的值来自 cgroupfs，而不是像 <code>free -m</code> 这样的系统工具，这里系统工具在容器内实际上是起不到效果的（因为容器根本上在底层是公用的系统资源）。而 CGroup 则是将容器进行了分层次区分，每个容器都会有其唯一的 CGroup 根节点，kubelet 会判断该根节点的可用资源来计算 <code>memory.available</code>。</p><p>具体的计算方法如此脚本<a href="https://kubernetes.io/zh/examples/admin/resource/memory-available.sh">memory-available.sh</a>。kubelet 在其计算会排除了 inactive_file（即非活动 LRU 列表上基于文件来虚拟的内存的字节数）， 因为它假定在压力下内存是可回收的。</p><h5 id="2-nodefs"><a href="#2-nodefs" class="headerlink" title="2. nodefs"></a>2. nodefs</h5><p><code>nodefs</code> 表示节点的主文件系统，适用于本地磁盘、emptyDir、日志存储等，它关注的是本地文件系统的磁盘空间 <code>nodefs.available</code> 和 inode 数 <code>nodefs.inodesFree</code>。</p><h5 id="3-imagefs"><a href="#3-imagefs" class="headerlink" title="3. imagefs"></a>3. imagefs</h5><p><code>imagefs</code> 表示的是容器运行时，存储容器镜像和容器可写层，是将本地文件系统根据 CGroup 分层后的文件系统，它关注的是该层文件系统的磁盘空间 <code>imagefs.available</code> 和 inode 数 <code>imagefs.inodesFree</code>。</p><h4 id="2）驱逐条件"><a href="#2）驱逐条件" class="headerlink" title="2）驱逐条件"></a>2）驱逐条件</h4><p>kubelet 的驱逐条件形式为 <code>[eviction-signal][operator][quantity]</code>，其中:</p><ul><li><code>eviction-signal</code>: 即上述的驱逐信号</li><li><code>operator</code>: 表示关系运算符，比如大于小于等</li><li><code>quantity</code>: 表示触发驱逐条件的指标，比如 1Gi。其表示形式要与 Kubernetes 的形式匹配，支持数值形式或百分比（10%）</li></ul><p>使用方式如下，以节点的总内存为 10Gi 为例，我们想将触发条件设置为1 Gi，则可以将驱逐条件定义为以下两种形式中的一种:</p><ul><li><code>memory.available&lt;10%</code> </li><li> <code>memory.available&lt; 1G</code></li></ul><h5 id="1-软驱逐条件"><a href="#1-软驱逐条件" class="headerlink" title="1. 软驱逐条件"></a>1. 软驱逐条件</h5><p>在设置软驱逐条件时，必须指定一个宽限期，否则会报错。在超过宽限期之前，kubelet 不会立刻驱逐 Pod</p><p>在设置宽限期的同时还可以指定 Pod 终止的宽限期上限，用于在触发软驱逐时优雅的终止 Pod。当两者同时被设置，并且满足软驱逐阈值时，kubelet 会使用两者间较小的那个</p><p><strong>软驱逐的配置参数:</strong></p><ul><li><code>eviction-soft</code>: 驱逐条件列表，驱逐条件如 <code>memory.available&lt;1.5Gi</code>，如果驱逐条件持续较长时间超过指定的宽限期，就会触发 Pod 驱逐</li><li><code>eviction-soft-grace-period</code>: 驱逐宽限期列表，如 <code>memory.available=1m30s</code>，用于定义软驱逐在正式驱逐 Pod 前必须保存多久，与驱逐条件绑定</li><li><code>eviction-max-pod-grace-period</code>: 在满足软驱逐条件而终止 Pod 时，使用的最大允许宽限期（单位为秒）</li></ul><h5 id="2-硬驱逐条件"><a href="#2-硬驱逐条件" class="headerlink" title="2. 硬驱逐条件"></a>2. 硬驱逐条件</h5><p>硬驱逐条件没有宽限期，当达到硬驱逐的阈值时，kubelet 会立即杀死 Pod 以回收资源（如内存），避免资源耗尽</p><p><strong>硬驱逐的配置参数:</strong></p><ul><li><code>eviction-hard</code>: 驱逐条件列表，驱逐条件如: ``memory.available&lt;1Gi`</li></ul><p><strong>kubelet 默认的硬驱逐条件:</strong></p><ul><li><code>memory.available&lt;100Mi</code></li><li><code>nodefs.available&lt;10%</code></li><li><code>imagefs.available&lt;15%</code></li><li><code>nodefs.inodesFree&lt;5%</code>（Linux 节点）</li></ul><h4 id="3）驱逐监控间隔"><a href="#3）驱逐监控间隔" class="headerlink" title="3）驱逐监控间隔"></a>3）驱逐监控间隔</h4><p>kubelet 根据其配置的 <code>housekeeping-interval</code>（默认为 <code>10s</code>）间隔来评估驱逐条件</p><h3 id="3、节点压力状况"><a href="#3、节点压力状况" class="headerlink" title="3、节点压力状况"></a>3、节点压力状况</h3><p>kubelet 会报告节点状况以反映节点处于压力之下，其与驱逐信号的对应关系如下:</p><table><thead><tr><th>节点压力表现</th><th><strong>驱逐信号</strong></th><th>描述</th></tr></thead><tbody><tr><td>MemoryPressure</td><td>memory.available</td><td>节点上的可用内存已满足驱逐条件</td></tr><tr><td>DiskPressure</td><td>nodefs.available<code>、</code>nodefs.inodesFree<code>、</code>imagefs.available<code>或</code>imagefs.inodesFree</td><td>节点的根文件系统或镜像文件系统的磁盘空间或 inode 已满足驱逐条件</td></tr><tr><td>PIDPressure</td><td>pid.available</td><td>(Linux) 节点上的可用进程标识符已低于驱逐条件</td></tr></tbody></table><p>通过配置 kubelet 的参数 <code>nodeStatusUpdateFrequency</code> 可以调整节点压力条件的更新间隔，默认为 10s</p><h3 id="4、节点存储资源不足"><a href="#4、节点存储资源不足" class="headerlink" title="4、节点存储资源不足"></a>4、节点存储资源不足</h3><p>关于节点存储资源默认的驱逐触发条件为:</p><ul><li><code>nodefs.available&lt;10%</code></li><li><code>imagefs.available&lt;15%</code></li></ul><h4 id="1）驱逐机制"><a href="#1）驱逐机制" class="headerlink" title="1）驱逐机制"></a>1）驱逐机制</h4><ul><li><p>当 <code>imagefs</code> 达到阈值时，kubelet 会删除节点上所有未使用的容器镜像来清理磁盘空间，以此回收存储资源</p></li><li><p>当 <code>nodefs</code> 达到阈值时，kubelet 会拒绝新调度到该节点的 Pod 运行，并向 APIServer 通知 <code>DiskPressure condition</code>。然后会尝试删除已死亡的 Pod 和容器来回收磁盘空间，如果经过清理后仍低于阈值，kubelet 就会开始驱逐 Pod（不会考虑QoS优先级，而是根据 nodefs 的实际使用量大小进行驱逐排序，如果驱逐的事 DaemonSet，kubelet 会阻止其重启，直到 nodefs 的可用量大于阈值）</p></li></ul><h4 id="2）举例说明"><a href="#2）举例说明" class="headerlink" title="2）举例说明"></a>2）举例说明</h4><p>有如下 Pod，其存储资源使用情况如下:</p><table><thead><tr><th align="left">Pod Name</th><th align="left">Pod QoS</th><th align="left">nodefs usage</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">Best Effort</td><td align="left">800M</td></tr><tr><td align="left">B</td><td align="left">Guaranteed</td><td align="left">1.3G</td></tr><tr><td align="left">C</td><td align="left">Burstable</td><td align="left">1.2G</td></tr><tr><td align="left">D</td><td align="left">Burstable</td><td align="left">700M</td></tr><tr><td align="left">E</td><td align="left">Best Effort</td><td align="left">500M</td></tr><tr><td align="left">F</td><td align="left">Guaranteed</td><td align="left">1G</td></tr></tbody></table><p>当 nodefs 的使用量超过阈值时，kubelet 会根据 Pod 的 nodefs 使用量来对 Pod 进行排名，首先驱逐磁盘使用量最多的 Pod。驱逐顺序排名如下：</p><table><thead><tr><th align="left">Pod Name</th><th align="left">Pod QoS</th><th align="left">nodefs usage</th></tr></thead><tbody><tr><td align="left">B</td><td align="left">Guaranteed</td><td align="left">1.3G</td></tr><tr><td align="left">C</td><td align="left">Burstable</td><td align="left">1.2G</td></tr><tr><td align="left">F</td><td align="left">Guaranteed</td><td align="left">1G</td></tr><tr><td align="left">A</td><td align="left">Best Effort</td><td align="left">800M</td></tr><tr><td align="left">D</td><td align="left">Burstable</td><td align="left">700M</td></tr><tr><td align="left">E</td><td align="left">Best Effort</td><td align="left">500M</td></tr></tbody></table><h3 id="5、节点内存资源不足"><a href="#5、节点内存资源不足" class="headerlink" title="5、节点内存资源不足"></a>5、节点内存资源不足</h3><p>关于节点内存资源默认的驱逐触发条件为:</p><ul><li><code>memory.available&lt;100Mi</code></li></ul><h4 id="1）驱逐机制-1"><a href="#1）驱逐机制-1" class="headerlink" title="1）驱逐机制"></a>1）驱逐机制</h4><p>当触发阈值时，kubelet 会向 APIServer 通知 <code>MemoryPressure condition</code>，此时 kubelet 将不再接受新的 QoS 为 <code>BestEffort</code> 的 Pod 在节点运行，并会按照以下顺序来驱逐 Pod:</p><ul><li>Pod 的内存使用量是否超过了 <code>request</code> 指定的值</li><li>根据 priority 排序，优先级低的 Pod 最先被驱逐（保证 <code>Guaranteed</code> 不会最先被驱逐）</li><li>比较它们的内存使用量与 <code>request</code> 指定的值之差（<code>container_memory_usage_bytes</code> 指标值与 <code>container_resource_requests_memory_bytes</code> 指标值的差，如果有多个容器，则为所有差值的总和）</li></ul><h4 id="2）举例说明-1"><a href="#2）举例说明-1" class="headerlink" title="2）举例说明"></a>2）举例说明</h4><p>有如下 Pod，其内存资源使用情况如下:</p><table><thead><tr><th align="left">Pod Name</th><th align="left">Pod QoS</th><th align="left">Memory requested</th><th align="left">Memory limits</th><th align="left">Memory usage</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">Best Effort</td><td align="left">0</td><td align="left">0</td><td align="left">700M</td></tr><tr><td align="left">B</td><td align="left">Guaranteed</td><td align="left">2Gi</td><td align="left">2Gi</td><td align="left">1.9G</td></tr><tr><td align="left">C</td><td align="left">Burstable</td><td align="left">1Gi</td><td align="left">2Gi</td><td align="left">1.8G</td></tr><tr><td align="left">D</td><td align="left">Burstable</td><td align="left">1Gi</td><td align="left">2Gi</td><td align="left">800M</td></tr><tr><td align="left">E</td><td align="left">Best Effort</td><td align="left">0</td><td align="left">0</td><td align="left">300M</td></tr><tr><td align="left">F</td><td align="left">Guaranteed</td><td align="left">2Gi</td><td align="left">2Gi</td><td align="left">1G</td></tr></tbody></table><p>当内存的使用量超过阈值时，kubelet 会根据 Pod 相对于 <code>request</code> 的内存使用量来对 Pod 进行排名，首先驱逐相对使用量最多的 Pod。驱逐顺序排名如下：</p><table><thead><tr><th align="left">Pod Name</th><th align="left">Pod QoS</th><th align="left">Memory requested</th><th align="left">Memory limits</th><th align="left">Memory usage</th><th align="left">内存相对使用量</th></tr></thead><tbody><tr><td align="left">C</td><td align="left">Burstable</td><td align="left">1Gi</td><td align="left">2Gi</td><td align="left">1.8G</td><td align="left">800M</td></tr><tr><td align="left">A</td><td align="left">Best Effort</td><td align="left">0</td><td align="left">0</td><td align="left">700M</td><td align="left">700M</td></tr><tr><td align="left">E</td><td align="left">Best Effort</td><td align="left">0</td><td align="left">0</td><td align="left">300M</td><td align="left">300M</td></tr><tr><td align="left">B</td><td align="left">Guaranteed</td><td align="left">2Gi</td><td align="left">2Gi</td><td align="left">1.9G</td><td align="left">-100M</td></tr><tr><td align="left">D</td><td align="left">Burstable</td><td align="left">1Gi</td><td align="left">2Gi</td><td align="left">800M</td><td align="left">-200M</td></tr><tr><td align="left">F</td><td align="left">Guaranteed</td><td align="left">2Gi</td><td align="left">2Gi</td><td align="left">1G</td><td align="left">-1G</td></tr></tbody></table><blockquote><p>⚠️ <strong>注意:</strong> 当内存资源不足时，kubelet 在驱逐 Pod 时，只会考虑 requests 和 Pod 的内存使用量，并不会考虑 limits。</p></blockquote><h3 id="6、节点-OOM-时"><a href="#6、节点-OOM-时" class="headerlink" title="6、节点 OOM 时"></a>6、节点 OOM 时</h3><h4 id="1）驱逐机制-2"><a href="#1）驱逐机制-2" class="headerlink" title="1）驱逐机制"></a>1）驱逐机制</h4><p>正常情况下，kubelet 会通过驱逐条件杀死 Pod 来回收内存资源，但是由于 kubelet 是默认 10s 抓取一次 cAdvisor 的监控数据，所以是有可能在驱逐回收之前出现 OOM 情况的。这个时候 Node 节点就会依赖内核的 oom_killer 来响应。</p><p>kubelet 根据 Pod 的 QoS 会为每个容器设置一个 <code>oom_score_adj</code> 值，如下:</p><table><thead><tr><th>QoS</th><th>oom_score_adj</th></tr></thead><tbody><tr><td>Guaranteed</td><td>-997</td></tr><tr><td>BestEffort</td><td>1000</td></tr><tr><td>Burstable</td><td>min(max(2, 1000 - (1000 * memoryRequestBytes) / machineMemoryCapacityBytes), 999)</td></tr></tbody></table><p>OOM killer 会杀掉 <code>oom_score_adj</code> 值最高的容器，如果有多个容器的 <code>oom_score_adj</code> 值相同，就会杀掉内存使用量最多的容器（其实是因为内存使用量最多的容器的 oom_score 值最高），以此来降低系统压力。但是与 Pod 驱逐不同的是，OOM 杀死的容器，kubelet 是可以根据其 <code>RestartPolicy</code> 重启它的。</p><p><code>omm_score</code> 的计算公式如下:</p><blockquote><p>oom_score = 容器使用的内存占系统内存的百分比 + oom_score_adj </p></blockquote><h4 id="2）举例说明-2"><a href="#2）举例说明-2" class="headerlink" title="2）举例说明"></a>2）举例说明</h4><p>假设某节点运行着 4 个 Pod，且每个 Pod 中只有一个容器。每个 QoS 类型为 <code>Burstable</code> 的 Pod 配置的内存 requests 是 <code>4Gi</code>，节点的内存大小为 <code>30Gi</code>。每个 Pod 的 <code>oom_score_adj</code> 值如下所示：</p><table><thead><tr><th align="left">Pod Name</th><th align="left">Pod QoS</th><th align="left">oom_score_adj</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">Best Effort</td><td align="left">1000</td></tr><tr><td align="left">B</td><td align="left">Guaranteed</td><td align="left">-998</td></tr><tr><td align="left">C</td><td align="left">Burstable</td><td align="left">867（根据上面的公式计算）</td></tr><tr><td align="left">D</td><td align="left">Best Effort</td><td align="left">1000</td></tr></tbody></table><p>当调用 OOM killer 时，它首先选择 <code>oom_score_adj</code> 值最高的 <code>BestEffort</code> 容器（1000），这里有两个容器的 <code>oom_score_adj</code> 值都是 1000，OOM killer 最终会选择内存使用量最多的容器，然后如果还需要继续回收内存资源，就会驱逐 <code>Burstable</code> 容器。</p><h3 id="7、最小驱逐回收"><a href="#7、最小驱逐回收" class="headerlink" title="7、最小驱逐回收"></a>7、最小驱逐回收</h3><p>在某些情况下，驱逐 Pod 只会回收少量的紧俏资源。 这可能导致 kubelet 反复达到配置的驱逐条件并触发多次驱逐。</p><p>你可以使用 <code>--eviction-minimum-reclaim</code> 标志或 <a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/kubelet-config-file/">kubelet 配置文件</a> 为每个资源配置最小回收量。 当 kubelet 注意到某个资源耗尽时，它会继续回收该资源，直到回收到你所指定的数量为止。</p><p>例如，以下配置设置最小回收量：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">&quot;500Mi&quot;</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-string">&quot;1Gi&quot;</span><br>  <span class="hljs-attr">imagefs.available:</span> <span class="hljs-string">&quot;100Gi&quot;</span><br><span class="hljs-attr">evictionMinimumReclaim:</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">&quot;0Mi&quot;</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-string">&quot;500Mi&quot;</span><br>  <span class="hljs-attr">imagefs.available:</span> <span class="hljs-string">&quot;2Gi&quot;</span><br></code></pre></td></tr></table></figure><p>在这个例子中，如果 <code>nodefs.available</code> 信号满足驱逐条件， kubelet 会回收资源，直到信号达到 <code>1Gi</code> 的条件， 然后继续回收至少 <code>500Mi</code> 直到信号达到 <code>1.5Gi</code>。</p><p>类似地，kubelet 会回收 <code>imagefs</code> 资源，直到 <code>imagefs.available</code> 信号达到 <code>102Gi</code>。</p><p>对于所有资源，默认的 <code>eviction-minimum-reclaim</code> 为 <code>0</code>。</p><h3 id="8、预分配资源"><a href="#8、预分配资源" class="headerlink" title="8、预分配资源"></a>8、预分配资源</h3><p>和容器一样，在没有做任何限制的情况下，K8S 的 Pod 能够使用所在 Node 节点的所有可用资源。这事实上是一个问题，因为我们一般会在节点上运了许多系统守护进程（系统内核、驱动、kubelet 等），它们也是要消耗资源的，除非我们为这些守护进程预留出一定的资源，否则它们就会与 Pod 一起加入到资源争夺的行列，很可能会直面节点资源短缺的问题，最严重的情况将无法维持系统的稳定运行。</p><h4 id="1）节点可用计算资源量"><a href="#1）节点可用计算资源量" class="headerlink" title="1）节点可用计算资源量"></a>1）节点可用计算资源量</h4><p>Kubernetes 节点上的 <code>Allocatable</code> 被定义为 Pod 的可用计算资源量。调度器在调度 Pod 时时不会超额申请 <code>Allocatable</code> 的，目前可支持的资源为 <code>cpu</code>、<code>memory</code>、<code>ephemeral-storage</code>。</p><p>我们可以将一个节点的资源总和定义为如下形式:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211104144209729.png" alt="image-20211104144209729"></p><h4 id="2）预留资源"><a href="#2）预留资源" class="headerlink" title="2）预留资源"></a>2）预留资源</h4><p>在 <code>kubelet</code> 中，可以为两类系统守护进程预留资源，一个是操作系统预留资源 <code>system-reserved</code>，另一个为 K8S 系统预留资源 <code>kube-reserved</code>。</p><h5 id="1-system-reserved"><a href="#1-system-reserved" class="headerlink" title="1. system-reserved"></a>1. system-reserved</h5><p><code>system-reserved</code> 用于为诸如 <code>sshd</code>、<code>udev</code> 等系统级守护进程预留资源（cpu、内存、磁盘）；并且为系统内核预留内存资源（kernel 所使用的内存并不包括在 Pod 中）；以及为用户登陆会话预留资源（systemd 体系中的 user.slice）</p><p>除了 <code>Allocatable</code> 相关的 <code>cpu</code>、<code>memory</code> 、<code>ephemeral-storage</code> 参数外，<code>pid</code>  参数可用于为OS系统进程预留指定的 进程 ID。</p><p><code>system-reserved</code> 的配置方式有两种，一种为 <code>kubelet</code> 命令行参数 <code>--system-reserved</code>，另一种为 <code>kubelet</code> 的 yaml 配置文件参数 <code>systemReserved</code>。</p><h6 id="1⃣️-命令行参数配置示例"><a href="#1⃣️-命令行参数配置示例" class="headerlink" title="1⃣️ 命令行参数配置示例"></a>1⃣️ 命令行参数配置示例</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--system-reserved=[cpu=100m][,][memory=100Mi][,][ephemeral-storage=1Gi][,][pid=1000]<br></code></pre></td></tr></table></figure><h6 id="2⃣️-配置文件参数配置示例"><a href="#2⃣️-配置文件参数配置示例" class="headerlink" title="2⃣️ 配置文件参数配置示例"></a>2⃣️ 配置文件参数配置示例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">systemReserved:</span><br>  <span class="hljs-attr">cpu:</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>  <span class="hljs-attr">ephemeral-storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">pid:</span> <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h5 id="2-kube-reserved"><a href="#2-kube-reserved" class="headerlink" title="2. kube-reserved"></a>2. kube-reserved</h5><p><code>kube-reserved</code> 用于为诸如 <code>kubelet</code>、容器运行时、节点问题监测器等 Kubernetes 系统守护进程预留资源（cpu、内存、磁盘），而并非为 Pod 保留资源。<code>kube-reserved</code> 在一定程度上可以影响一个节点上 Pod 的多少。</p><p>除了 <code>Allocatable</code> 相关的 <code>cpu</code>、<code>memory</code> 、<code>ephemeral-storage</code> 参数外，<code>pid</code>  参数可用于为 K8S 系统进程预留指定的 进程 ID。</p><p><code>kube-reserved</code> 的配置方式有两种，一种为 <code>kubelet</code> 命令行参数 <code>--kube-reserved</code>，另一种为 <code>kubelet</code> 的 yaml 配置文件参数 <code>kubeReserved</code>。</p><h6 id="1⃣️-命令行参数配置示例-1"><a href="#1⃣️-命令行参数配置示例-1" class="headerlink" title="1⃣️ 命令行参数配置示例"></a>1⃣️ 命令行参数配置示例</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--kube-reserved=[cpu=100m][,][memory=100Mi][,][ephemeral-storage=1Gi][,][pid=1000]<br></code></pre></td></tr></table></figure><h6 id="2⃣️-配置文件参数配置示例-1"><a href="#2⃣️-配置文件参数配置示例-1" class="headerlink" title="2⃣️ 配置文件参数配置示例"></a>2⃣️ 配置文件参数配置示例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kubeReserved:</span><br>  <span class="hljs-attr">cpu:</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— kube-scheduler</title>
    <link href="/2021/10/27/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-scheduler/"/>
    <url>/2021/10/27/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-scheduler/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-kube-scheduler"><a href="#Kubernetes-基础组件介绍-——-kube-scheduler" class="headerlink" title="Kubernetes 基础组件介绍 —— kube-scheduler"></a>Kubernetes 基础组件介绍 —— kube-scheduler</h1><p>在 K8S 的组件中，<code>kube-scheduler</code> 是专门用于处理调度的进程。其核心功能是持续监听 <code>API Server</code> 来获取<code>PodSpec.NodeName</code> 为空的 Pod，并对每个 Pod 创建 binding，然后根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，再将调度结果回写 <code>API Server</code>。</p><span id="more"></span><h2 id="一、K8S-调度原理和调度策略"><a href="#一、K8S-调度原理和调度策略" class="headerlink" title="一、K8S 调度原理和调度策略"></a>一、K8S 调度原理和调度策略</h2><blockquote><p>🚩 Kube-scheduler 是 Kubernetes 的默认调度器，是集群整体控制面的一部分。kube-scheduler 在设计上允许自定义一个调度组件来替换它，所以只要清楚的了解了 K8S 中调度的原理，我们就可以自定义一个调度器。</p></blockquote><h3 id="1、Kube-Scheduler-的工作原理"><a href="#1、Kube-Scheduler-的工作原理" class="headerlink" title="1、Kube-Scheduler 的工作原理"></a>1、Kube-Scheduler 的工作原理</h3><h4 id="1）调度流程"><a href="#1）调度流程" class="headerlink" title="1）调度流程"></a>1）调度流程</h4><h5 id="1-流程概述"><a href="#1-流程概述" class="headerlink" title="1. 流程概述"></a>1. 流程概述</h5><ul><li>首先，用户通过 Kubernetes 客户端通过或 kubectl 工具通过 yaml 的形式向系统发起资源请求</li><li>API Server 收到用户的 POST 请求后，创建 Pod ，并将相关信息存储到 etcd 中</li><li>调度器会定时监听 API Server （watch 机制），一旦 etcd 存储 Pod 的信息成功就会立即通知 API Server</li><li>API Server 收到通知后会将 Pod 创建的消息通知到 Scheduler，Scheduler（list 机制）会去获取 Pod 列表并遍历它们，一旦发现 Pod 属性中存在 <code>Dest Node=&quot;&quot;</code> ，便会触发调度流程。</li><li>Pod 在调度的过程中需要经过节点预选，节点优选，节点选优3个阶段，通过过滤（Filtering）和打分（Scoring）两过程挑选出最终调度的节点<ul><li>节点预选（Predicate)： 该过程的主要工作是过滤掉不满足条件的 Node，条件如内存大小、端口等</li><li>节点优选（Priority）：该过程的主要工作是将选出的 Node 按照优先级进行排序</li><li>节点择优（Select）：根据优先级选定节点</li></ul></li><li>经过上阶段选择得分最高的 Node 节点与Pod 进步 binding，并通知 API Server 将结果回写 etcd</li><li>最后由被选择出来的 Node 节点上的 kubelet 去执行创建 Pod 的相关操作，创建和启动容器</li></ul><h5 id="2-具体过程图"><a href="#2-具体过程图" class="headerlink" title="2. 具体过程图"></a>2. 具体过程图</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211026100220906.png" alt="image-20211026100220906"></p><h3 id="2、调度策略"><a href="#2、调度策略" class="headerlink" title="2、调度策略"></a>2、调度策略</h3><h4 id="1）断言-——-Predicates"><a href="#1）断言-——-Predicates" class="headerlink" title="1）断言 —— Predicates"></a>1）断言 —— <em>Predicates</em></h4><blockquote><p>🚩 调度器通过断言的方式实现了过滤接口，以此实现节点的预选阶段。</p></blockquote><h5 id="1-具体工作流"><a href="#1-具体工作流" class="headerlink" title="1. 具体工作流"></a>1. 具体工作流</h5><ul><li>首先，遍历所有节点，过滤掉不满足条件的节点，该过程属于强制性规则</li><li>输出上一阶段所有满足要求的 Node 并将其记录作为 <code>Priorities</code> 的输入</li><li>如果一个满足条件的节点都没有，Pod 就会一直处于 Pending 状态，调度器回一直重试，直到有满足条件的 Node 被选出</li></ul><h5 id="2-常用-Predicates-策略"><a href="#2-常用-Predicates-策略" class="headerlink" title="2. 常用 Predicates 策略:"></a>2. 常用 Predicates 策略:</h5><table><thead><tr><th>预选策略</th><th>描述</th></tr></thead><tbody><tr><td>PodFitsHostPorts</td><td>检查 Pod 请求的端口（网络协议类型）在节点上是否可用，是否存在端口冲突</td></tr><tr><td>PodFitsHost</td><td>如果 Pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</td></tr><tr><td>PodFitsResources</td><td>检查节点的空闲资源（例如，CPU和内存）是否满足 Pod 的 request 资源要求</td></tr><tr><td>MatchNodeSelector</td><td>检查 Pod 的标签选择和节点的标签是否匹配</td></tr><tr><td>NoVolumeZoneConflict</td><td>指定该存储的故障区域限制，评估 Pod 请求的 volume 在节点上是否可用</td></tr><tr><td>NoDiskConflict</td><td>根据 Pod 请求的卷是否在节点上已挂载来评估 Pod 和节点是否匹配（默认未启用）</td></tr><tr><td>MaxCSIVolumeCount</td><td>决定附加 CSI 卷的数量，判断是否超过配置的限制</td></tr><tr><td>CheckNodeMemoryPressure</td><td>检查节点内存是否够用</td></tr><tr><td>CheckNodePIDPressure</td><td>如果节点正上报进程ID稀缺，并且没有异常配置，则不会把 Pod 调度到此节点上</td></tr><tr><td>CheckNodeDiskPressure</td><td>如果节点正上报存储压力（文件系统已满或几乎已满），并且没有异常配置，则不会把 Pod 调度到此节点上</td></tr><tr><td>CheckNodeCondition</td><td>节点上报自己的文件系统已满，网络不可用或者 kubelet 尚未准备好运行 Pod，如果节点上设置了这样的状况，并且没有异常配置，则不会把 Pod 调度到此节点上</td></tr><tr><td>PodToleratesNodeTaints</td><td>检查 Pod 的容忍度是否能容忍节点的污点</td></tr><tr><td>CheckVolumeBinding</td><td>基于 Pod 的卷请求，评估 Pod 是否适合节点，这里的 volume 适用于所有绑定的和为绑定的 PVC</td></tr></tbody></table><h4 id="2）优先级-——-Priorities"><a href="#2）优先级-——-Priorities" class="headerlink" title="2）优先级 —— Priorities"></a>2）优先级 —— Priorities</h4><blockquote><p>🚩 <strong>Priorities</strong> 优先级是一系列键值对组成的，键是该优先级的名称，值则是它的权重值。调度器通过优先级函数来实现节点打分，以此完成优选阶段。</p></blockquote><h5 id="1-Priorities-常用函数"><a href="#1-Priorities-常用函数" class="headerlink" title="1. Priorities 常用函数"></a>1. Priorities 常用函数</h5><table><thead><tr><th>优先级函数</th><th>描述</th></tr></thead><tbody><tr><td>LeastRequestedPriority</td><td>偏向最少 request 资源的节点，节点的优先级就由节点空闲资源与节点总容量的比值，即由（总容量-节点上Pod的容量总和-新Pod的容量）/总容量）来决定。 CPU和内存具有相同权重，资源空闲比越高的节点得分越高。 计算公式: <code>cpu((capacity – sum(requested)) * 10 / capacity) + memory((capacity – sum(requested)) * 10 / capacity) / 2</code></td></tr><tr><td>BalancedResourceAllocation</td><td>偏向资源使用平衡的节点，CPU和内存使用率越接近的节点权重越高，<strong>该策略不能单独使用，必须和 LeastRequestedPriority组合使用</strong>，尽量选择在部署 Pod 后各项资源更均衡的机器。 如果请求的资源（CPU或者内存）需求大于节点的 capacity，那么该节点永远不会被调度到。</td></tr><tr><td>InterPodAffinityPriority</td><td>依据 Pod 间亲和性和反亲和性的优先级，通过迭代 weightedPodAffinityTerm 的元素计算和，并且如果对该节点满足相应的 PodAffinityTerm，则将 “weight” 加到和中，具有最高和的节点是最优选的。</td></tr><tr><td>SelectorSpreadPriority</td><td>为了更好的高可用，对同属于一个 Service、RC 或 RS 下面的 Pod，尽量调度到多个不同的节点上，当一个 Pod 被调度的时候，先查找Pod对于的service或者replication controller， 然后查找service或replication controller中已存在的Pod，运行Pod越少的节点的得分越高。</td></tr><tr><td>NodeAffinityPriority</td><td>根据节点的亲和性机制来计算一个权重值，支持多种操作符（In、NotIn、Exists、DoesNotExist、Gt、Lt），而不限于对节点labels的精确匹配。支持两种类型的选择器，一是 “hard（requiredDuringSchedulingIgnoredDuringExecution）” 选择器， 它保证所选的主机必须满足所有Pod对主机的规则要求。 这种选择器更像是之前的 NodeSelector，在NodeSelector 的基础上增加了更合适的表现语法。 另一种是 “soft（preferresDuringSchedulingIgnoredDuringExecution）” 选择器， 它作为对调度器的提示，调度器会尽量但不保证满足 NodeSelector 的所有要求。</td></tr><tr><td>NodePreferAvoidPodsPriority</td><td>根据节点的注解 <code>scheduler.alpha.kubernetes.io/preferAvoidPods</code> 对节点进行优先级排序。如果没有设置 Annotation（注释信息），节点对于该 Policy 的得分就是10分；如果 Node 设置了 Annotation，如果改 Pod 对应的 Controller 是 RC 或 RS，则该 node 对该 policy 的得分为 0分。</td></tr><tr><td>MostRequestedPriority</td><td>支持最多 request 资源的节点，该策略会将 Pod 调度到整体工作负载所需的最少的一组节点上。计算公式: <code>(cpu(10 sum(requested) / capacity) + memory(10 sum(requested) / capacity)) / 2</code>（默认未启用）</td></tr><tr><td>RequestedToCapacityRatioPriority</td><td>使用默认的打分方法模型，创建基于 ResourceAlloctionPriority 的 requestedToCapacity</td></tr><tr><td>TaintTolerationPriority</td><td>使用 Pod 中 tolerationList 与节点 Taint 列表项进行匹配，配对成功的项越多，得分则越低。污点越匹配，得分越低。</td></tr><tr><td>ImageLocalityPriority</td><td>根据 Node 上是否存在 Pod 的容器运行所需的镜像，并且判断镜像大小来进行打分，分值为 0 - 10。该过程会遍历所有节点，如果所有节点都不存在镜像，分值就为0，如果存在镜像则根据镜像大小来决定分值，镜像越大分值越高，如果节点存在所有所需镜像，分值为 10。（默认未启用）</td></tr><tr><td>ServiceSpreadingPriority</td><td>对于给定的 Service，此策略旨在确保该 Service 关联的 Pod 分布在不同的节点上运行。 它偏向把 Pod 调度到没有该服务的节点。 整体来看，Service 对于单个节点故障变得更具弹性。</td></tr><tr><td>EqualPriority</td><td>是一个优先级函数，它给予所有节点相等权重。</td></tr><tr><td>EvenPodsSpreadPriority</td><td>实现了 <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-topology-spread-constraints/">Pod 拓扑扩展约束</a>的优先级排序。</td></tr></tbody></table><h3 id="3、调度器配置（了解）"><a href="#3、调度器配置（了解）" class="headerlink" title="3、调度器配置（了解）"></a>3、调度器配置（了解）</h3><blockquote><p>🚩 和 K8S 的其他组件一样，我们可以通过编写配置文件，并将其路径传给 <code>kube-scheduler</code> 的命令行参数，来指定其行为。这种配置文件称为调度的模版（profile），其中允许配置 kube-scheduler 中不同调度阶段。K8S 将每一个阶段都暴露在了某个扩展点中，并通过插件的形式来对这些扩展点进行管理。</p></blockquote><h4 id="1）基础配置"><a href="#1）基础配置" class="headerlink" title="1）基础配置"></a>1）基础配置</h4><p>通过运行 <code>kube-scheduler --config &lt;filename&gt;</code> 来设置调度模版，该模版使用的为 <a href="https://kubernetes.io/docs/reference/config-api/kube-scheduler-config.v1beta1/">KubeSchedulerConfiguration (v1beta1)</a> 结构体。基础配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubescheduler.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeSchedulerConfiguration</span><br><span class="hljs-attr">clientConnection:</span><br>  <span class="hljs-attr">kubeconfig:</span> <span class="hljs-string">/etc/srv/kubernetes/kube-scheduler/kubeconfig</span><br></code></pre></td></tr></table></figure><h4 id="2）调度器扩展"><a href="#2）调度器扩展" class="headerlink" title="2）调度器扩展"></a>2）调度器扩展</h4><p><code>kube-scheduler</code> 支持根据不同的调度配置文件来指定断言（Predicates）和优先级（Priorities），以此来分别对 Node 节点进行过滤和打分。我们在上面说过，调度阶段的扩展点是通过调度插件来管理的，因此通过在调度配置文件中开启禁用调度插件，我们就可以在一定程度上决定 <code>kube-scheduler</code> 在不同阶段的调度行为。</p><h5 id="1-扩展点"><a href="#1-扩展点" class="headerlink" title="1. 扩展点"></a>1. 扩展点</h5><p><code>kube-scheduler</code> 提供的扩展点如下:</p><table><thead><tr><th>扩展点</th><th>描述</th></tr></thead><tbody><tr><td>QueueSort</td><td>这些插件用于将调度队列中处于 pending 状态的 Pods 进行排序。每次只能使用一个队列排序插件</td></tr><tr><td>PreFilter</td><td>这些插件用于在进行过滤前对 Pod 或集群的信息进程检查。它们可能会将一个 pod 标记为不可调度</td></tr><tr><td>Filter</td><td>这些插件相当于调度策略中的断言（Predicates），用于过滤不能运行 Pod 的节点。过滤器的调用顺序是可配置的，如果没有一个节点通过所有的过滤筛选，Pod 就会被标记为不可调度</td></tr><tr><td>PostFilter</td><td>当没有为 pod 找到可行的节点时，这些插件就会按照它们的配置顺序调用。如果有任何一个 postFilter 插件将 Pod 标记为可调度，就不会再继续调用其余插件了</td></tr><tr><td>PreScore</td><td>这是一个消息扩展点，可用于预打分工作</td></tr><tr><td>Score</td><td>这些插件用于给通过过滤筛选的节点进行打分，调度器会选择得分最高的节点</td></tr><tr><td>Reserve</td><td>这是一个消息扩展点，当资源已经预留给 Pod 是，就会将消息通知插件。这些插件还实现了 <code>UnReserve</code> 接口，当在 <code>Reserve</code> 期间或之后出现故障时会被调用。</td></tr><tr><td>UnReserve</td><td>这是一个消息扩展点，如果一个 Pod 在 <code>Reserve</code> 后被拒绝，并被 <code>Permit</code> 搁置，就会被调用</td></tr><tr><td>Permit</td><td>这些插件可以阻止或延迟 Pod 的绑定</td></tr><tr><td>PreBind</td><td>这些插件会被在 Pod 绑定节点前被运行</td></tr><tr><td>Bind</td><td>这个插件将一个 Pod 绑定到节点。绑定插件会按照顺序调用，一旦有一个插件完成了绑定工作，其余的插件的就会呗跳过。<strong>至少需要有一个绑定插件</strong>。</td></tr><tr><td>PostBind</td><td>这是一个消息扩展点，在 Pod 绑定节点后会被调用</td></tr></tbody></table><p>对于每个扩展点来说，你可以禁用默认插件或启用你自己的插件，语法如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubescheduler.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeSchedulerConfiguration</span><br><span class="hljs-attr">profiles:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">plugins:</span><br>      <span class="hljs-attr">score:</span><br>        <span class="hljs-attr">disabled:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NodeResourcesLeastAllocated</span><br>        <span class="hljs-attr">enabled:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MyCustomPluginA</span><br>          <span class="hljs-attr">weight:</span> <span class="hljs-number">2</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MyCustomPluginB</span><br>          <span class="hljs-attr">weight:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以在 <code>disabled</code> 数组中使用 <code>*</code> 禁用该扩展点的所有默认插件。 如果需要，这个字段也可以用来对插件重新顺序。</p><h5 id="2-调度插件"><a href="#2-调度插件" class="headerlink" title="2. 调度插件"></a>2. 调度插件</h5><p><code>kube-scheduler</code> 默认启用的扩展点如下，它们实现了一个或多个扩展点。</p><table><thead><tr><th>插件</th><th>作用</th><th>实现的扩展点</th></tr></thead><tbody><tr><td>ImageLocality</td><td>选择已经存在运行 Pod 所需容器镜像的节点</td><td>Score</td></tr><tr><td>TaintToleration</td><td>实现了污点（taint）和容忍（toleration）</td><td>Filter、Prescore、Score</td></tr><tr><td>NodeName</td><td>检查 Pod 指定的节点名称与当前节点是否匹配</td><td>Filter</td></tr><tr><td>NodePorts</td><td>检查 Pod 指定的端口在节点上是否可用</td><td>preFilter、Filter</td></tr><tr><td>NodeAffinity</td><td>实现了节点选择器（ <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector">node selectors</a>） 和节点亲和性（ <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity">node affinity</a>）</td><td>Filter、Score</td></tr><tr><td>PodTopologySpread</td><td>实现了 Pod 拓扑分布</td><td>preFilter、Filter、preScore、Score</td></tr><tr><td>NodeUnschedulable</td><td>过滤出存在 <code>.spec.unschedulable</code> ，并且值为 true 的节点</td><td>Filter</td></tr><tr><td>NodeResourcesFit</td><td>检查节点是否拥有所有 Pod 请求的资源。打分时根据三种策略中的一种:  <code>LeastAllocated</code> (默认), <code>MostAllocated</code> and <code>RequestedToCapacityRatio</code></td><td>preFilter、Filter、Score</td></tr><tr><td>NodeResourcesBalancedAllocation</td><td>调度 Pod 时，选择资源更更加平衡的节点</td><td>Score</td></tr><tr><td>VolumeBinding</td><td>检查节点是否存在或是否可以绑定请求的卷</td><td>preFilter、Filter、Reserve、preBind、Score</td></tr><tr><td>VolumeRestrictions</td><td>检查挂载到节点上的是卷是否满足卷提供程序的限制</td><td>Filter</td></tr><tr><td>VolumeZone</td><td>检查请求的卷是否在任何区域 都满足</td><td>Filter</td></tr><tr><td>NodeVolumeLimits</td><td>检查该节点是否满足 CSI 卷限制</td><td>Filter</td></tr><tr><td>EBSLimits</td><td>检查该节点是否满足 AWS EBS 卷限制</td><td>Filter</td></tr><tr><td>GCEPDLimits</td><td>检查该节点是否满足 GCP-PD 卷限制</td><td>Filter</td></tr><tr><td>AzureDiskLimits</td><td>检查该节点是否满足 Azure 磁盘卷限制</td><td>Filter</td></tr><tr><td>InterPodAffinity</td><td>实现了 <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">Pod 的亲和和反亲和特性</a></td><td>preFilter、Filter、preScore、Score</td></tr><tr><td>PrioritySort</td><td>提供基于默认优先级策略的排序0</td><td>queueSort</td></tr><tr><td>DefaultBinder</td><td>提供了默认的绑定机制</td><td>bind</td></tr><tr><td>DefaultPreemption</td><td>提供了默认的抢占机制</td><td>postFilter</td></tr></tbody></table><p>以下策略默认不不启用，但是可以通过 API 的方式配置开启:</p><table><thead><tr><th>插件</th><th>作用</th><th>实现的扩展点</th></tr></thead><tbody><tr><td>SelectorSpread</td><td>对于属于 <a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">Services</a>、 <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/replicaset/">ReplicaSets</a> 和 <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/">StatefulSets</a> 的 Pod 进行跨多个节点部署</td><td>PreScore、Score</td></tr><tr><td>CinderLimits</td><td>检查该节点是否满足 openstack Cinder 卷限制</td><td>Filter</td></tr><tr><td>NodeResourcesLeastAllocated</td><td>选择已分配资源少的节点</td><td>Score</td></tr><tr><td>NodeResourcesMostAllocated</td><td>选择已分配资源多的节点</td><td>Score</td></tr><tr><td>RequestedToCapacityRatio</td><td>根据配置的某个函数设置来进行节点选择</td><td>Score</td></tr><tr><td>NodeLabel</td><td>根据配置的标签来过滤节点或给节点进行打分</td><td>Filter、Score</td></tr><tr><td>ServiceAffinity</td><td>检查属于某个 Service 的 Pods 与配置的标签所定义的节点集合是否符合。这个插件还支持将属于某个 Service 的 Pods 分散到各节点</td><td>preFilter、Filter、Score</td></tr><tr><td>NodePreferAvoidPods</td><td>基于节点注释 <code>scheduler.alpha.kubernetes.io/preferAvoidPods</code> 进行打分</td><td>Score</td></tr></tbody></table><h4 id="3）多配置文件使用"><a href="#3）多配置文件使用" class="headerlink" title="3）多配置文件使用"></a>3）多配置文件使用</h4><p>我们可以配置 <code>kube-scheduler</code> 运行多个配置文件，每个配置文件关联一个调度器名称，并可以在其扩展点中配置不同的插件集合。</p><h5 id="1-使用示例"><a href="#1-使用示例" class="headerlink" title="1. 使用示例"></a>1. 使用示例</h5><p>使用下面的方法，可以同时使用2个配置，一个使用默认的插件，另一个禁用所有打分相关的插件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubescheduler.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeSchedulerConfiguration</span><br><span class="hljs-attr">profiles:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">schedulerName:</span> <span class="hljs-literal">no</span><span class="hljs-string">-scoring-scheduler</span><br>    <span class="hljs-attr">plugins:</span><br>      <span class="hljs-attr">preScore:</span><br>        <span class="hljs-attr">disabled:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;*&#x27;</span><br>      <span class="hljs-attr">score:</span><br>        <span class="hljs-attr">disabled:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>默认情况下，会创建一个调度器名称为 <code>default-scheduler</code> 的配置文件，这个配置文件中会包括上述所有描述默认启用的插件。如果 P</p><p>对于那些希望根据特定配置文件来进行调度的 Pod，我们可以在 <code>.spec.schedulerName</code> 字段指定对应的调度器名称。对于没有制定调度器名称的 Pod，<code>kube-apiserver</code> 会将其调度器名称设置为 <code>default-scheduler</code>。</p><p>如果 Pod 将 <code>.spec.schedulerName</code> 字段值指定为 <code>ReportingController</code>. leader 选举时会使用配置文件列表中第一个调度器名称。</p><blockquote><p>⚠️ <strong>注意:</strong></p><ul><li>声明多个配置文件时，配置文件对应的调度器名称必须唯一。</li><li>由于调度器只有一个保存 pending 状态 Pod 的队列，所以所有配置文件必须在 <code>QueueSort</code> 扩展点中使用相同的插件，配置相同的参数已避免冲突。 </li></ul></blockquote><h3 id="4、自定义调度器"><a href="#4、自定义调度器" class="headerlink" title="4、自定义调度器"></a>4、自定义调度器</h3><p>自定义调度器主要的功能即查询为调度的 Pod，按照自定义的调度策略选择新的 Node，并将其更新到 Pod 的 NodeBinding 上。我们可以用 shell 来编写一个最简单的调度器。</p><h4 id="1）自定义调度器示例"><a href="#1）自定义调度器示例" class="headerlink" title="1）自定义调度器示例"></a>1）自定义调度器示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>SERVER=&#x27;localhost:8080&#x27;<br>while true;<br>do<br>    for PODNAME in $(kubectl --server $SERVER get pods -o json | jq &#x27;.items[] | select(.spec.schedulerName ==&quot;my-scheduler&quot;) | select(.spec.nodeName == null) | .metadata.name&#x27; | tr -d &#x27;&quot;&#x27;)<br>;<br>    do<br>        NODES=($(kubectl --server $SERVER get nodes -o json | jq &#x27;.items[].metadata.name&#x27; | tr -d &#x27;&quot;&#x27;))<br>        NUMNODES=$&#123;#NODES[@]&#125;<br>        CHOSEN=$&#123;NODES[$[ $RANDOM % $NUMNODES]]&#125;<br>        curl --header &quot;Content-Type:application/json&quot; --request POST --data &#x27;&#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;:&quot;Binding&quot;,&quot;metadata&quot;: &#123;&quot;name&quot;:&quot;&#x27;$PODNAME&#x27;&quot;&#125;,&quot;target&quot;: &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;<br>: &quot;Node&quot;, &quot;name&quot;: &quot;&#x27;$CHOSEN&#x27;&quot;&#125;&#125;&#x27; http://$SERVER/api/v1/namespaces/default/pods/$PODNAME/binding/<br>        echo &quot;Assigned $PODNAME to $CHOSEN&quot;<br>    done<br>    sleep 1<br>done<br></code></pre></td></tr></table></figure><h4 id="2）使用自定义调度器示例"><a href="#2）使用自定义调度器示例" class="headerlink" title="2）使用自定义调度器示例"></a>2）使用自定义调度器示例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">my-scheduler</span> <span class="hljs-comment"># 选择使用自定义调度器 my-scheduler</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.10</span><br><br></code></pre></td></tr></table></figure><h3 id="5、节点亲和性调度"><a href="#5、节点亲和性调度" class="headerlink" title="5、节点亲和性调度"></a>5、节点亲和性调度</h3><h4 id="1）节点亲和性规则"><a href="#1）节点亲和性规则" class="headerlink" title="1）节点亲和性规则"></a>1）节点亲和性规则</h4><ul><li><strong>硬亲和性:</strong> 当硬亲和性不满足时，Pod 会置于 Pending 状态；</li><li><strong>软亲和性:</strong> 当规则不满足时，能够接受被编排在其他不符合条件的节点上，以 weight 定义优先级的权重，1-100 值越大优先级越高；</li><li>当节点标签改变而不再符合此节点亲和性规则时，仅会对新建的 Pod 对象生效，但已在节点上的 Pod 并不会被移除。</li></ul><h4 id="2）节点硬亲和性-——-requiredDuringSchedulingIgnoredDuringExecution"><a href="#2）节点硬亲和性-——-requiredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="2）节点硬亲和性 —— requiredDuringSchedulingIgnoredDuringExecution"></a>2）节点硬亲和性 —— requiredDuringSchedulingIgnoredDuringExecution</h4><p>方式一: Pod 使用 <code>spec.nodeSelector</code> (基于对等值关系匹配)</p><p>方式二: Pod 使用 <code>spec.affinity</code> 支持 <code>matchExpressions</code> 属性（更复杂的标签选择机制）</p><h5 id="1-示例-调度至-zone-foo-的节点"><a href="#1-示例-调度至-zone-foo-的节点" class="headerlink" title="1. 示例: 调度至 zone = foo 的节点"></a>1. 示例: 调度至 zone = foo 的节点</h5><h6 id="1⃣️-节点打标签"><a href="#1⃣️-节点打标签" class="headerlink" title="1⃣️ 节点打标签"></a>1⃣️ 节点打标签</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl label nodes kube-node1 zone=foo<br></code></pre></td></tr></table></figure><h6 id="2⃣️-yaml-文件示例"><a href="#2⃣️-yaml-文件示例" class="headerlink" title="2⃣️ yaml 文件示例"></a>2⃣️ yaml 文件示例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">with-required-nodeaffinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 定义硬亲和性</span><br>        <span class="hljs-attr">nodeSelectorTerms:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span>   <span class="hljs-comment">#集合选择器</span><br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">zone</span>,<span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>,<span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;foo&quot;</span>]&#125;<br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br></code></pre></td></tr></table></figure><h4 id="3）节点软亲和性-——-preferredDuringSchedulingIgnoredDuringExecution"><a href="#3）节点软亲和性-——-preferredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="3）节点软亲和性 —— preferredDuringSchedulingIgnoredDuringExecution"></a>3）节点软亲和性 —— preferredDuringSchedulingIgnoredDuringExecution</h4><h5 id="1-示例"><a href="#1-示例" class="headerlink" title="1. 示例"></a>1. 示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-deploy-with-node-affinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-pod</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">nodeAffinity:</span><br>          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span>   <span class="hljs-comment">#节点软亲和性</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">60</span><br>            <span class="hljs-attr">preference:</span><br>              <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">zone</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;foo&quot;</span>]&#125;<br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">30</span><br>            <span class="hljs-attr">preference:</span><br>              <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">ssd</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span>, <span class="hljs-attr">values:</span> []&#125;<br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br></code></pre></td></tr></table></figure><h5 id="2-优先级调度原理"><a href="#2-优先级调度原理" class="headerlink" title="2. 优先级调度原理:"></a>2. 优先级调度原理:</h5><p><img src="https://img2018.cnblogs.com/blog/1293010/201910/1293010-20191025180831602-2108008874.png" alt="img"></p><h3 id="6、Pod-资源亲和性调度"><a href="#6、Pod-资源亲和性调度" class="headerlink" title="6、Pod 资源亲和性调度"></a>6、Pod 资源亲和性调度</h3><h4 id="1）Pod-亲和性和反亲和性规则"><a href="#1）Pod-亲和性和反亲和性规则" class="headerlink" title="1）Pod 亲和性和反亲和性规则"></a>1）Pod 亲和性和反亲和性规则</h4><ul><li><code>亲和性</code>：旨在将一些 Pod 对象组织在相近的位置（同一节点、机架、区域、地区），它描述的是一个 Pod 与具有某特征的现存Pod 运行位置的依赖关系，也就是说需要有事先存在被依赖的 Pod 对象。</li><li><code>反亲和性</code>：旨在将一些 Pod 对象在运行位置上隔离开，常用于分散同一类应用，调度值不同的区域、机架或节点等</li><li>调度器会将第一个 Pod 放置于任何位置，然后与其有亲和或反亲和关系的Pod会根据规则完成动态编排</li><li>基于 <code>MatchInterPodAffinity</code>  预选策略完成节点预选，基于 <code>InterPodAffinityPriority</code> 优先级函数完成节点打分</li></ul><h4 id="2）Pod-硬亲和调度-——-requiredDuringSchedulingIgnoredDuringExecution"><a href="#2）Pod-硬亲和调度-——-requiredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="2）Pod 硬亲和调度 —— requiredDuringSchedulingIgnoredDuringExecution"></a>2）Pod 硬亲和调度 —— requiredDuringSchedulingIgnoredDuringExecution</h4><h5 id="1-示例-1"><a href="#1-示例-1" class="headerlink" title="1. 示例"></a>1. 示例</h5><h6 id="1⃣️-创建被依赖的节点"><a href="#1⃣️-创建被依赖的节点" class="headerlink" title="1⃣️ 创建被依赖的节点"></a>1⃣️ 创建被依赖的节点</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl run tomcat -l app=tomcat --image tomcat:alpine<br></code></pre></td></tr></table></figure><h6 id="2⃣️-yaml-文件示例-1"><a href="#2⃣️-yaml-文件示例-1" class="headerlink" title="2⃣️ yaml 文件示例"></a>2⃣️ yaml 文件示例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">with-pod-affinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">podAffinity:</span><span class="hljs-comment"># 亲和性调度</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 硬亲和调度</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>          <span class="hljs-attr">matchExpressions:</span>    <span class="hljs-comment">#集合选择器</span><br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">app</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;tomcat&quot;</span>]&#125;  <span class="hljs-comment"># 选择被依赖Pod</span><br>          <span class="hljs-comment"># 上面意思是，当前 pod 要跟标签为 app 值为 tomcat 的 pod 在一起</span><br>        <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span>  <span class="hljs-comment"># 根据挑选出的Pod所有节点的hostname作为同一位置的判定</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br></code></pre></td></tr></table></figure><h4 id="3）Pod-软亲和调度-——-preferredDuringSchedulingIgnoredDuringExecution"><a href="#3）Pod-软亲和调度-——-preferredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="3）Pod 软亲和调度 —— preferredDuringSchedulingIgnoredDuringExecution"></a>3）Pod 软亲和调度 —— preferredDuringSchedulingIgnoredDuringExecution</h4><h5 id="1-示例-2"><a href="#1-示例-2" class="headerlink" title="1. 示例"></a>1. 示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-with-preferred-pod-affinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAffinity:</span><br>          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">80</span><br>            <span class="hljs-attr">podAffinityTerm:</span><br>              <span class="hljs-attr">labelSelector:</span><br>                <span class="hljs-attr">matchExpressions:</span><br>                <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">app</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;cache&quot;</span>]&#125;<br>              <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">zone</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">20</span><br>            <span class="hljs-attr">podAffinityTerm:</span><br>              <span class="hljs-attr">labelSelector:</span><br>                <span class="hljs-attr">matchExpressions:</span><br>                <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">app</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;db&quot;</span>]&#125;<br>              <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">zone</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br></code></pre></td></tr></table></figure><h4 id="4）Pod-反亲和调度-——-requiredDuringSchedulingIgnoredDuringExecution"><a href="#4）Pod-反亲和调度-——-requiredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="4）Pod 反亲和调度 —— requiredDuringSchedulingIgnoredDuringExecution"></a>4）Pod 反亲和调度 —— requiredDuringSchedulingIgnoredDuringExecution</h4><p>将 <code>spec.affinity.podAffinity</code> 替换为 <code>spec.affinity.podAntiAffinity</code> 就可以反转调度规则，反亲和调度也分为硬调度和软调度，使用方法和亲和规则一样。</p><h5 id="1-示例-3"><a href="#1-示例-3" class="headerlink" title="1. 示例"></a>1. 示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 创建依赖 pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod-first</span><br>    <span class="hljs-attr">labels:</span> <br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">tier:</span> <span class="hljs-string">fronted</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span>      <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod-second</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">backend</span><br>        <span class="hljs-attr">tier:</span> <span class="hljs-string">db</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:latest</span><br>      <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>      <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 3600&quot;</span>]<br>    <span class="hljs-attr">affinity:</span><br>      <span class="hljs-attr">podAntiAffinity:</span><span class="hljs-comment"># 反亲和性调度</span><br>        <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class="hljs-comment"># 硬亲和调度</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>            <span class="hljs-attr">matchExpressions:</span><span class="hljs-comment">#集合选择器</span><br>            <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">app</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;myapp&quot;</span>]&#125;<span class="hljs-comment"># 选择被依赖Pod</span><br>            <span class="hljs-comment"># 上面意思是，当前 pod 要跟标签为 app 值为 myapp 的 pod 相斥</span><br>          <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">zone</span> <span class="hljs-comment"># 根据挑选出的Pod所有节点的zone作为同一位置的判定</span><br><br></code></pre></td></tr></table></figure><h3 id="7、污点和容忍度"><a href="#7、污点和容忍度" class="headerlink" title="7、污点和容忍度"></a>7、污点和容忍度</h3><h4 id="1）污点和容忍度规则"><a href="#1）污点和容忍度规则" class="headerlink" title="1）污点和容忍度规则"></a>1）污点和容忍度规则</h4><ul><li><p><code>污点 —— taints</code>:  污点是定义在节点上的键值型属性数据，用于让节点拒绝将 Pod 调度运行于其上，除非 Pod 有接纳节点污点的容忍度</p></li><li><p><code>容忍度 —— tolerations</code>: 容忍度是定义在 Pod 上的键值型属性数据，用于配置可容忍的污点，调度器在调度时会将 Pod 调度存在可容忍污点或者没有污点的 Node 上</p></li><li><p>使用 <code>PodToleratesNodeTaints</code> 预选策略和 <code>TaintTolerationPriority</code> 优选函数完成该机制</p></li><li><p>节点亲和性使 Pod 对象可以被吸引到一组特定的节点上（nodeSelector 和 affinity）</p></li></ul><h4 id="2）污点和容忍度的定义"><a href="#2）污点和容忍度的定义" class="headerlink" title="2）污点和容忍度的定义"></a>2）污点和容忍度的定义</h4><h5 id="1-定义规则"><a href="#1-定义规则" class="headerlink" title="1. 定义规则"></a>1. 定义规则</h5><ul><li><p>一个节点可以配置多个污点，一个 Pod 也可以有多个容忍度</p></li><li><p>污点定义于 <code>node.spec.taints</code> ，容忍度定义于 <code>pods.spec.tolerations</code></p></li><li><p>语法：<code>key=value:effect</code></p></li><li><p>同一个键值数据，effect 不同，也属于不同的污点</p></li></ul><h5 id="2-effect-定义排斥等级"><a href="#2-effect-定义排斥等级" class="headerlink" title="2. effect 定义排斥等级:"></a>2. effect 定义排斥等级:</h5><ul><li><p><code>NoSchedule</code>: 零容忍，但值影响调度过程，已经调度上去的 Pod 不会受影响，且仅会对新增的 pod 生效（绝不调度）</p></li><li><p><code>PreferNoSchedule</code>: 软约束，节点现存的 Pod 不会受影响，如果实在没有符合的节点，也可以调度上了（尽量不调度）</p></li><li><p><code>NoExecute</code>: 零容忍，不但不能调度，且连原有 Pod 对象也会被驱逐，会影响已经在节点上运行的 Pod</p></li></ul><h4 id="3）管理节点的污点"><a href="#3）管理节点的污点" class="headerlink" title="3）管理节点的污点"></a>3）管理节点的污点</h4><h5 id="1-给节点添加污点"><a href="#1-给节点添加污点" class="headerlink" title="1. 给节点添加污点"></a>1. 给节点添加污点</h5><h6 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl taint node &lt;node-name&gt; &lt;key&gt;=&lt;value&gt;:&lt;effect&gt;<br></code></pre></td></tr></table></figure><h6 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl taint node node2 node-type=production:NoShedule<br></code></pre></td></tr></table></figure><h5 id="2-查看节点污点"><a href="#2-查看节点污点" class="headerlink" title="2. 查看节点污点"></a>2. 查看节点污点</h5><h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法:"></a>语法:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get nodes &lt;nodename&gt; -o go-template=&#123;&#123;.spec.taints&#125;&#125;<br></code></pre></td></tr></table></figure><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例:"></a>示例:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get nodes node2 -o go-template=&#123;&#123;.spec.taints&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-删除节点污点"><a href="#3-删除节点污点" class="headerlink" title="3. 删除节点污点"></a>3. 删除节点污点</h5><h6 id="语法-2"><a href="#语法-2" class="headerlink" title="语法:"></a>语法:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl taint node &lt;node-name&gt; &lt;key&gt;[:&lt;effect&gt;]-# 后面的 - 就是删除的意思<br></code></pre></td></tr></table></figure><h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例:"></a>示例:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 删除 key 为 node-type, effect 为 NoSchedule 的污点</span><br>kubectl taint node node1 node-type:NoSchedule-<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除 key 为 node-type 的所有污点</span><br>kubectl taint node node1 node-type-<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除节点的所有污点</span><br>kubectl patch nodes node1 -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;taints&quot;:[]&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><h4 id="4）在-Pod-上定义容忍度"><a href="#4）在-Pod-上定义容忍度" class="headerlink" title="4）在 Pod 上定义容忍度"></a>4）在 Pod 上定义容忍度</h4><ul><li>在 <code>spec.tolerations</code> 定义 Pod 的容忍度</li><li><code>tolerationSeconds</code> 则用于定义延迟驱逐 Pod 的时长，单位为秒 </li><li><code>operator</code> 的默认值为 Equal</li></ul><h5 id="1-等值判断语法"><a href="#1-等值判断语法" class="headerlink" title="1. 等值判断语法:"></a>1. 等值判断语法:</h5><p>容忍度与污点在 key、value、effect 上三者完全匹配</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><span class="hljs-comment"># 判断条件为 Equal</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;value1&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>  <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">3600</span> <br>  <span class="hljs-comment"># 通常而言设置节点污点为 NoExecute 时，会立即驱逐节点上的所有不能容忍该污点的 Pod，指定 tolerationSeconds 则可以延迟一段时间再驱逐这些 Pod</span><br></code></pre></td></tr></table></figure><h5 id="2-存在性判断示例"><a href="#2-存在性判断示例" class="headerlink" title="2. 存在性判断示例:"></a>2. 存在性判断示例:</h5><p>key、effect 上完全匹配，value 使用空值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><span class="hljs-comment"># 判断条件为 Exists，即只要污点是存在的，就可以匹配</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-yaml-示例"><a href="#3-yaml-示例" class="headerlink" title="3. yaml 示例:"></a>3. yaml 示例:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-deploy</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">selector:</span><br>        <span class="hljs-attr">matchLabels:</span><br>            <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>            <span class="hljs-attr">release:</span> <span class="hljs-string">canary</span><br>    <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">metadata:</span><br>            <span class="hljs-attr">labels:</span><br>                <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>                <span class="hljs-attr">release:</span> <span class="hljs-string">canary</span><br>        <span class="hljs-attr">spec:</span><br>            <span class="hljs-attr">containers:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br>            <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>            <span class="hljs-attr">tolerations:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;node-type&quot;</span><br>              <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-attr">&quot;production&quot;:</span><br>              <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>              <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">3600</span><br></code></pre></td></tr></table></figure><h4 id="5）基于污点的驱逐机制"><a href="#5）基于污点的驱逐机制" class="headerlink" title="5）基于污点的驱逐机制"></a>5）基于污点的驱逐机制</h4><p>上面已经提到污点的 <code>effect</code> 值为 <code>NoExecute</code> 时会影响该节点上运行的 Pod，如同如下形式:</p><ul><li>如果 Pod 不能容忍 effect 为 NoExecute 的污点，那么 Pod 会马上被驱逐</li><li>如果 Pod 可以容忍 effect 为 NoExecute 的污点，但是在容忍度设置中没有指定 <code>tolerationSeconds</code>，则 Pod 会一直在该节点运行</li><li>如果 Pod 可以容忍 effect 为 NoExecute 的污点，并且指定了 <code>tolerationSeconds</code>，则 Pod 会在该节点运行指定的时长，然后被驱逐</li></ul><p>K8S 本身也会基于某些异常状态，节点控制器或 kubelet 会自动给节点添加一个内置污点，并设置 effect 为 <code>NoExecute</code> ，进行 Pod 驱逐。当异常状态恢复正常后，就会移除相关的污点。</p><h5 id="1-内置污点"><a href="#1-内置污点" class="headerlink" title="1. 内置污点"></a>1. 内置污点</h5><table><thead><tr><th>内置污点</th><th>描述</th></tr></thead><tbody><tr><td>node.kubernetes.io/not-ready</td><td>节点未就绪，相当于节点状态 <code>Ready</code> 的值为 <code>False</code>，默认 <code>tolerationSeconds=300</code>（DaemonSet 不会设置<code>tolerationSeconds</code>）</td></tr><tr><td>node.kubernetes.io/unreachable</td><td>节点控制器访问不到该节点，相当于节点状态 <code>Ready</code> 的值为 <code>Unknown</code>，默认 <code>tolerationSeconds=300</code>（DaemonSet 不会设置<code>tolerationSeconds</code>）</td></tr><tr><td>node.kubernetes.io/memory-pressure</td><td>节点存在内存压力</td></tr><tr><td>node.kubernetes.io/disk-pressure</td><td>节点存在磁盘压力</td></tr><tr><td>node.kubernetes.io/pid-pressure</td><td>节点存在 pid 压力</td></tr><tr><td>node.kubernetes.io/network-unavailable</td><td>节点网络不可用</td></tr><tr><td>node.kubernetes.io/unschedulable</td><td>节点不可调度</td></tr><tr><td>node.cloudprovider.kubernetes.io/uninitialized</td><td>如果 kubelet 启动时指定了一个 “外部” 云平台驱动，它将会给当前节点添加一个污点，将其标志为不可用。然后在 cloud-controller-manager 的一个控制器初始化该节点后，kubelet 会将这个污点删除。</td></tr></tbody></table><blockquote><p>🚩 事实上，K8S 会以限定速率的方式去添加内置污点，这样可以避免 Pod 被大量驱逐，给其他组件造成压力。比如，master 节点和 node 通信中断的场景。</p><p>结合这种特性，配合 <code>tolerationSeconds</code> 的使用，就可以指定 Pod 在节点出现上述问题时还会在节点上运行多久。比如，一个使用了许多本地状态的应用在网络断开时，仍然希望停留在当前节点上运行较长的时间，愿意等待网络恢复，不愿意被驱逐。在这种情况下，Pod 的容忍度可能是下面这样的:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;node.kubernetes.io/unreachable&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>  <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="8、Pod-优先级调度-了解"><a href="#8、Pod-优先级调度-了解" class="headerlink" title="8、Pod 优先级调度 (了解)"></a>8、Pod 优先级调度 (了解)</h3><p>Pod 的优先级、抢占功能是从 K8S v1.8 开始引用的功能，在 v1.11 进入 beta 状态，到了 v1.14 后正式进入 GA 阶段，已经是一个成熟稳定的特性了。从 v1.14 起，该功能（feature <code>PodPriority</code>） 默认是开启的。之前的版本如要使用则需要同时为 kube-apiserver、kube-scheduler、kubelet 的 <code>--feature-gates</code> 参数添加 <code>PodPriority=true</code>。</p><p>Pod 的优先级，故名思义就是将 Pod 区分重要程度，将资源优先提供给个重要程度更高的 Pod，以此来提供资源的可用率，并保障重要服务的服务质量。</p><h4 id="1）系统默认优先级"><a href="#1）系统默认优先级" class="headerlink" title="1）系统默认优先级"></a>1）系统默认优先级</h4><p>查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get priorityclasses.scheduling.k8s.io<br></code></pre></td></tr></table></figure><p>返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                      VALUE        GLOBAL-DEFAULT   AGE<br>system-cluster-critical   2000000000   false            7d<br>system-node-critical      2000001000   false            7d<br></code></pre></td></tr></table></figure><h4 id="2）使用-Pod-优先级和抢占"><a href="#2）使用-Pod-优先级和抢占" class="headerlink" title="2）使用 Pod 优先级和抢占"></a>2）使用 Pod 优先级和抢占</h4><p>首先，新增一个或多个 <code>PriorityClass</code> ，示例如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: PriorityClass<br>metadata:<br>  name: high-priority<br>value: 1000000# value 为 32 位整数，用于表示权重，权重越大，优先级越高<br>globalDefault: false# 用于未配置 PriorityClassName 的 Pod，当整个集群中只有一个 PriorityClass 时，可将其设置为 true<br>description: &quot;This priority class should be used for xxx service pods only.&quot;<br></code></pre></td></tr></table></figure><p>然后在创建 Pod 时，在 PodSpec 中将 PriorityClassName 设置为新增的 PriorityClass，示例如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">env:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">high-priority</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入 Kubernetes —— informer 模块</title>
    <link href="/2021/10/21/%E6%B7%B1%E5%85%A5-Kubernetes-%E2%80%94%E2%80%94-informer-%E6%A8%A1%E5%9D%97/"/>
    <url>/2021/10/21/%E6%B7%B1%E5%85%A5-Kubernetes-%E2%80%94%E2%80%94-informer-%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="深入-Kubernetes-——-informer-模块"><a href="#深入-Kubernetes-——-informer-模块" class="headerlink" title="深入 Kubernetes —— informer 模块"></a>深入 Kubernetes —— informer 模块</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入 Kubernetes —— List-Watch 机制</title>
    <link href="/2021/10/21/%E6%B7%B1%E5%85%A5-Kubernetes-%E2%80%94%E2%80%94-List-Watch-%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/10/21/%E6%B7%B1%E5%85%A5-Kubernetes-%E2%80%94%E2%80%94-List-Watch-%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="深入-Kubernetes-——-List-Watch-机制"><a href="#深入-Kubernetes-——-List-Watch-机制" class="headerlink" title="深入 Kubernetes —— List-Watch 机制"></a>深入 Kubernetes —— List-Watch 机制</h1><span id="more"></span><h2 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h2><h3 id="1、list-watch-简介"><a href="#1、list-watch-简介" class="headerlink" title="1、list-watch 简介"></a>1、list-watch 简介</h3><p>在 Kubernetes 中，对于异步消息的处理并没有使用消息队列的形式，而是使用了一种称为 <code>List-Watch</code> 的异步消息处理机制，它是 K8S 整体架构的精髓所在，保障了 K8S 中消息的实时性、可靠性、顺序性和性能等，为声明式风格的 API 奠定了良好的基础。、</p><p><code>List-Watch</code> 顾名思义是由 <code>list</code> 和 <code>watch</code> 两个功能组成，在 K8S 中以 Restful API 的方式呈现。</p><ul><li><p><code>List</code>: 从表面理解是列出明细，事实上正如其实，它的作用就是调用资源的 <code>List API</code> 罗列出资源信息，这是一短期过程，所以是基于 HTTP 短链接实现；</p></li><li><p><code>Watch</code>: 从表面理解是观察，或者说是监视监控，它的作用就是调用资源的 <code>Watch API</code> 监听资源的变更（增删改）事件，这是一个持续性过程，所以需要通过 HTTP 长链接实现。</p></li></ul><p>我们知道在 K8S 的整体架构中，<code>ETCD</code> 作为数据库存储集群的数据，<code>apiserver</code> 作为对 ETCD 操作的统一入口，为其他组件提供对数据的增删改查能力。客户端组件（kubelet、scheduler、controller-manager）会通过 <code>List-Watch</code> 监听 <code>apiserver</code> 中各资源（如，pod、rc、rs 等）的 create、update、delete 事件，并针对 <code>事件类型</code> 去触发对应的 <code>事件处理函数</code>。</p><h3 id="2、示例说明"><a href="#2、示例说明" class="headerlink" title="2、示例说明"></a>2、示例说明</h3><p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#list-all-namespaces-pod-v1-core">https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#list-all-namespaces-pod-v1-core</a></p><p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#watch-pod-v1-core">https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#watch-pod-v1-core</a></p><h2 id="二、设计理念"><a href="#二、设计理念" class="headerlink" title="二、设计理念"></a>二、设计理念</h2><h2 id="三、相关源码"><a href="#三、相关源码" class="headerlink" title="三、相关源码"></a>三、相关源码</h2>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— 监控组件</title>
    <link href="/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-%E7%9B%91%E6%8E%A7%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-%E7%9B%91%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-监控组件"><a href="#Kubernetes-基础组件介绍-——-监控组件" class="headerlink" title="Kubernetes 基础组件介绍 —— 监控组件"></a>Kubernetes 基础组件介绍 —— 监控组件</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 插件介绍 —— kube-state-metrics</title>
    <link href="/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-state-metrics/"/>
    <url>/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-state-metrics/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-插件介绍-——-kube-state-metrics"><a href="#Kubernetes-插件介绍-——-kube-state-metrics" class="headerlink" title="Kubernetes 插件介绍 —— kube-state-metrics"></a>Kubernetes 插件介绍 —— kube-state-metrics</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 插件介绍 —— metrics-server</title>
    <link href="/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-metrics-server/"/>
    <url>/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-metrics-server/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-插件介绍-——-metrics-server"><a href="#Kubernetes-插件介绍-——-metrics-server" class="headerlink" title="Kubernetes 插件介绍 —— metrics-server"></a>Kubernetes 插件介绍 —— metrics-server</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 插件介绍 —— Dashboard</title>
    <link href="/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-Dashboard/"/>
    <url>/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-Dashboard/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-插件介绍-——-Dashboard"><a href="#Kubernetes-插件介绍-——-Dashboard" class="headerlink" title="Kubernetes 插件介绍 —— Dashboard"></a>Kubernetes 插件介绍 —— Dashboard</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 插件介绍 —— CoreDNS</title>
    <link href="/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-CoreDNS/"/>
    <url>/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-CoreDNS/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-插件介绍-——-CoreDNS"><a href="#Kubernetes-插件介绍-——-CoreDNS" class="headerlink" title="Kubernetes 插件介绍 —— CoreDNS"></a>Kubernetes 插件介绍 —— CoreDNS</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— 网络组件</title>
    <link href="/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-网络组件"><a href="#Kubernetes-基础组件介绍-——-网络组件" class="headerlink" title="Kubernetes 基础组件介绍 —— 网络组件"></a>Kubernetes 基础组件介绍 —— 网络组件</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— kube-proxy</title>
    <link href="/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-proxy/"/>
    <url>/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-proxy/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-kube-proxy"><a href="#Kubernetes-基础组件介绍-——-kube-proxy" class="headerlink" title="Kubernetes 基础组件介绍 —— kube-proxy"></a>Kubernetes 基础组件介绍 —— kube-proxy</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— kube-controller-manager</title>
    <link href="/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-controller-manager/"/>
    <url>/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-controller-manager/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-kube-controller-manager"><a href="#Kubernetes-基础组件介绍-——-kube-controller-manager" class="headerlink" title="Kubernetes 基础组件介绍 —— kube-controller-manager"></a>Kubernetes 基础组件介绍 —— kube-controller-manager</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— kube-apiserver</title>
    <link href="/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-apiserver/"/>
    <url>/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-apiserver/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-kube-apiserver"><a href="#Kubernetes-基础组件介绍-——-kube-apiserver" class="headerlink" title="Kubernetes 基础组件介绍 —— kube-apiserver"></a>Kubernetes 基础组件介绍 —— kube-apiserver</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 基础组件介绍 —— etcd</title>
    <link href="/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-etcd/"/>
    <url>/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-etcd/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-基础组件介绍-——-etcd"><a href="#Kubernetes-基础组件介绍-——-etcd" class="headerlink" title="Kubernetes 基础组件介绍 —— etcd"></a>Kubernetes 基础组件介绍 —— etcd</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 二次调度解决方案</title>
    <link href="/2021/10/20/Kubernetes-%E4%BA%8C%E6%AC%A1%E8%B0%83%E5%BA%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/10/20/Kubernetes-%E4%BA%8C%E6%AC%A1%E8%B0%83%E5%BA%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-二次调度解决方案"><a href="#Kubernetes-二次调度解决方案" class="headerlink" title="Kubernetes 二次调度解决方案"></a>Kubernetes 二次调度解决方案</h1><span id="more"></span><h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>我们知道，<code>kube-scheduler</code> 在 Kubernetes 集群中负责调度的组件。但是默认的调度机制却并不那么友善，即使我们为 Node 配置了亲和或反亲和，仍然会出现某些节点负载高，某些节点则几乎空闲的情况。这是因为正常情况下，在 pod 创建运行后，<code>scheduler</code> 并不会再次尝试重新调度它，除非触发驱逐，才有可能是这些 Pod 再次调度v 。</p><p>在这个案例中国，我们的 K8S 在运行过程中，就碰到了这种情况。pod 的调度经常会出现倾斜的情况，大量副本积压在个别 node 节点上，将节点资源占用完（这里主要体现在内存方面），如下图的情况：</p><p>Node15、Node16 内存资源使用率以100%了，但是空闲的节点内存使用率可能未超过 50%，这种分布的倾斜事实上是不健康的。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211020161447795.png" alt="image-20211020161447795"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211020161535235.png" alt="image-20211020161535235"></p><p>由于我们在 kubelet 中设置了 eviction，也就是驱逐机制，在节点资源紧张时，驱逐机制就会开启，以此来尝试回收节点资源。</p><p>但是这种通过 kubelet 驱逐的方式是十分被动的，并不能及时的解决资源适应倾斜的问题。虽然 K8S 原始的调度提供了一些优先级调度和自定义调度的方法，但是这种方式并不灵活，有些也缺乏合理性，所以我们需要另一种方案去解决这类问题。</p><p>事实上，我们并不需要再 Pod 初次调度时，就解决资源倾斜的问题，同样也可以在资源发生不平衡时触发 Pod 的再一次的调度，从而回收资源，这也能够解决倾斜问题。这也及时本方案所涉及的概念 —— 二次调度。</p><h2 id="二、Kubernetes-的驱逐、调度原理"><a href="#二、Kubernetes-的驱逐、调度原理" class="headerlink" title="二、Kubernetes 的驱逐、调度原理"></a>二、Kubernetes 的驱逐、调度原理</h2><h3 id="1、Kubernetes-默认调度机制-——-kube-scheduler"><a href="#1、Kubernetes-默认调度机制-——-kube-scheduler" class="headerlink" title="1、Kubernetes 默认调度机制 —— kube-scheduler"></a>1、Kubernetes 默认调度机制 —— kube-scheduler</h3><p>调度器是一个控制面的进程，它负责将 Pod 指派到 Node 节点上。调度基于约束和可用资源为调度队列中每个 Pod 确定其合适的运行位置。之后，调度器会对所有合适的节点进行优先级排序，并将 Pod 绑定到得分最高的节点去。</p><p>通过对于其原理的学习，可以进一步了解 K8S 中的调度到底是在做什么。相关具体内容可以看之前的博文: <a href="https://tareya.github.io/2021/10/27/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-scheduler/#%E4%B8%80%E3%80%81K8S-%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86%E5%92%8C%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5">K8S 调度原理和调度策略</a></p><h3 id="2、Kubernetes-节点压力驱逐-——-kubelet-的驱逐机制"><a href="#2、Kubernetes-节点压力驱逐-——-kubelet-的驱逐机制" class="headerlink" title="2、Kubernetes 节点压力驱逐 —— kubelet 的驱逐机制"></a>2、Kubernetes 节点压力驱逐 —— kubelet 的驱逐机制</h3><p>除了通过调度的方式驱逐 Pod 外，K8S 还存在一种兜底的驱逐机制，就是节点压力驱逐，这个机制用于在节点资源耗尽前紧急回收系统资源，以避免节点所在系统由于资源耗尽宕机。相关具体内容可以看之前的博文: <a href="https://tareya.github.io/2021/11/03/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kubelet/#%E4%B8%89%E3%80%81Kubernetes-%E8%8A%82%E7%82%B9%E5%8E%8B%E5%8A%9B%E9%A9%B1%E9%80%90">K8S 节点压力驱逐</a></p><h2 id="三、Descheduler-二次调度方案"><a href="#三、Descheduler-二次调度方案" class="headerlink" title="三、Descheduler 二次调度方案"></a>三、Descheduler 二次调度方案</h2><h3 id="1、Descheduler-简介"><a href="#1、Descheduler-简介" class="headerlink" title="1、Descheduler 简介"></a>1、Descheduler 简介</h3><h4 id="1）什么是-Descheduler-？"><a href="#1）什么是-Descheduler-？" class="headerlink" title="1）什么是 Descheduler ？"></a>1）什么是 Descheduler ？</h4><p>上文中我们介绍了Kubernetes 中的调度机制，简单的说调度就是将 Pending 状态的 Pod 绑定到 Node 节点的过程，这个工作默认是由 kube-scheduler 这个组件来完成的，它完成了 Pod 的初次调度。并且 Kubernetes 也允许在同一个集群中使用多个调度器。</p><p>由于 Kubernetes 整体来说是非常动态的，集群的状态随着时间的推移会不断的变化。我们经常会因为各种原因，期望将已运行的 Pod 可以移动到其他节点上。我们将这个过程称为二次调度。</p><p>而 Descheduler 就是一个用于处理二次调度过程的调度器。它会根据调度策略，找到可以移动 Pod 并进行驱逐。但是需要注意的是，Descheduler 并不是用来代替 kube-scheduler 的，而是依赖于 K8S 原始的调度机制来完成工作。</p><h4 id="2）版本兼容性"><a href="#2）版本兼容性" class="headerlink" title="2）版本兼容性"></a>2）版本兼容性</h4><p>虽然 <code>Descheduler</code> 对于 K8S 的版本没有硬性以来，但是一般来说 K8S 提供的客户端包（client-go、apimachinery 等）会向下兼容三个版本，例如，调度程序 v0.18 应与 k8s v1.18、v1.17 和 v1.16 配合使用。</p><p>下面的兼容性矩阵显示了用于编译 descheduler 的 k8s 客户端包版本。 从 descheduler 版本 v0.18 开始，descheduler 的次要版本与编译它的 k8s 客户端软件包的次要版本相匹配。</p><table><thead><tr><th>Descheduler</th><th>supported Kubernetes version</th></tr></thead><tbody><tr><td>v0.22</td><td>v1.22</td></tr><tr><td>v0.21</td><td>v1.21</td></tr><tr><td>v0.20</td><td>v1.20</td></tr><tr><td>v0.19</td><td>v1.19</td></tr><tr><td>v0.18</td><td>v1.18</td></tr><tr><td>v0.10</td><td>v1.17</td></tr><tr><td>v0.4 - v0.9</td><td>v1.9 +</td></tr><tr><td>v0.1 - v0.3</td><td>v1.7 - v1.8</td></tr></tbody></table><blockquote><p>🚩 由于产线环境的 K8S 版本一般都低于 v1.17，所以这里我们选用 v0.9 版本。</p></blockquote><h4 id="3）Descheduler-的二次调度策略"><a href="#3）Descheduler-的二次调度策略" class="headerlink" title="3）Descheduler 的二次调度策略"></a>3）Descheduler 的二次调度策略</h4><h5 id="1-RemoveDuplicates-策略"><a href="#1-RemoveDuplicates-策略" class="headerlink" title="1. RemoveDuplicates 策略"></a>1. RemoveDuplicates 策略</h5><p>去重策略，该策略确保只有一个 Pod 与在同节点上的运行的<code>ReplicSet</code>、<code>ReplicationController</code>、<code>StatefulSet</code> 或 <code>Job</code> 相关联。如果存在复数个，就会将重复的容器进行驱逐，以此让容器可以更好的分布在集群中。（事实上通过 Pod 的反亲和也可以实现）</p><p>当有某些节点由于某种原因宕机时，它上面的 Pod 就会迁移至其他节点，这种情况下，就可能出现多个与 RS 或 RC 关联的 Pod 运行在同一节点上。当故障节点恢复后，就可以通过该策略来驱逐这些重复的 Pod。</p><p>该策略提供了一个 <code>excludeOwnerKinds</code>的参数，是一个包含控制器类型的列表。如果 Pod 将该列表内的任何一种做为控制器，则不会考虑驱逐该 Pod。比如以 Deployment 创建的 Pod 会被该策略驱逐，为了避免被驱逐，则需要在列表中加入 <code>ReplicaSet</code>。</p><h6 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemoveDuplicates&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>     <span class="hljs-attr">params:</span><br>       <span class="hljs-attr">removeDuplicates:</span><br>         <span class="hljs-attr">excludeOwnerKinds:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ReplicaSet&quot;</span><br></code></pre></td></tr></table></figure><h6 id="禁用示例"><a href="#禁用示例" class="headerlink" title="禁用示例:"></a>禁用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemoveDuplicates&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h5 id="2-LowNodeUtilization-策略"><a href="#2-LowNodeUtilization-策略" class="headerlink" title="2. LowNodeUtilization 策略"></a>2. LowNodeUtilization 策略</h5><p>低节点使用率策略，该策略会找到使用率较低的节点，并且在可能的情况下，从其他节点驱逐 Pod，并驱逐到这些使用率较低的节点上。此策略的配置参数为 <code>nodeResourceUtilizationThresholds</code>。</p><h6 id="策略相关参数"><a href="#策略相关参数" class="headerlink" title="策略相关参数:"></a>策略相关参数:</h6><ul><li><p><code>thresholds</code> : 节点利用率不足的阈值，可以按照 cpu、内存、pod 数量和扩展资源的百分比来配置。如果一个节点的使用率低于所有阈值（cpu、内存、pod 数量），节点就会被认定为未充分利用。目前，计算节点资源利用率也考虑了 pod 的 request 资源需求。</p></li><li><p><code>targetThresholds</code>: 节点利用率不足的阈值，可以按照 cpu、内存、pod 数量和扩展资源的百分比来配置。用于计算可以驱逐 Pod 的潜在节点，如果某个节点的使用率高于任何一个 <code>targetThresholds</code> 的阈值（cpu、内存、pod 数量或扩展资源），该目标节点就会被认定为过度使用。</p></li></ul><p>任何一个节点的资源使用率在 <code>thresholds </code> 和 <code>targetThresholds</code> 的阈值之间，就会被认定为适当使用，则不会考虑驱逐上面的 Pod。<code>thresholds</code> 和 <code>targetThresholds</code> 的阈值可以根据集群的要求进行调整。</p><p>但是需要注意，这个策略是将 Pod 从过度使用的节点（使用率高于 <code>targetThresholds</code> 阈值的节点）驱逐到使用率不足的节点（使用率低于 <code>thresholds</code> 阈值的节点），如果没有这类节点，则策略会终止。</p><h6 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;LowNodeUtilization&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>     <span class="hljs-attr">params:</span><br>       <span class="hljs-attr">nodeResourceUtilizationThresholds:</span><br>         <span class="hljs-attr">thresholds:</span><br>           <span class="hljs-string">&quot;cpu&quot;</span> <span class="hljs-string">:</span> <span class="hljs-number">20</span><br>           <span class="hljs-attr">&quot;memory&quot;:</span> <span class="hljs-number">20</span><br>           <span class="hljs-attr">&quot;pods&quot;:</span> <span class="hljs-number">20</span><br>         <span class="hljs-attr">targetThresholds:</span><br>           <span class="hljs-string">&quot;cpu&quot;</span> <span class="hljs-string">:</span> <span class="hljs-number">50</span><br>           <span class="hljs-attr">&quot;memory&quot;:</span> <span class="hljs-number">50</span><br>           <span class="hljs-attr">&quot;pods&quot;:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>与该 <code>LowNodeUtilization</code> 策略相关的另一个参数称为 <code>numberOfNodes</code>。仅当未充分利用的节点数大于配置的值时，才可以配置此参数以激活策略。这在大型群集中很有用，其中一些节点可能会频繁使用或短期使用不足。默认情况下，<code>numberOfNodes</code>设置为0。</p><h5 id="3-RemovePodsViolatingInterPodAntiAffinity-策略"><a href="#3-RemovePodsViolatingInterPodAntiAffinity-策略" class="headerlink" title="3. RemovePodsViolatingInterPodAntiAffinity 策略"></a>3. RemovePodsViolatingInterPodAntiAffinity 策略</h5><p>移除违法 Pod 反亲和性 Pods 策略，该策略可以确保从节点中删除违反了 Interpod 反亲和性的 Pod。例如运行在同一节点的 podA、podB、podC 设置了反亲和性规则，禁止他们运行在同一节点上。则 podA 就会被驱逐出节点，以便让 podB 和 podC 可以正常运行。但是当 podB、podC 已经运行在节点上了，然后再增加了反亲和规则，kube-scheduler 并不会再调度已经在运行的 Pod ，所以需要通过该策略触发二次驱逐。目前该策略没有相关的参数。</p><h6 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemovePodsViolatingInterPodAntiAffinity&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h6 id="禁用示例-1"><a href="#禁用示例-1" class="headerlink" title="禁用示例:"></a>禁用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemovePodsViolatingInterPodAntiAffinity&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h5 id="4-RemovePodsViolatingNodeAffinity-策略"><a href="#4-RemovePodsViolatingNodeAffinity-策略" class="headerlink" title="4. RemovePodsViolatingNodeAffinity 策略"></a>4. RemovePodsViolatingNodeAffinity 策略</h5><p>移除违反 Node 亲和性 Pods 策略，该策略可以确保所有违反了节点亲和性的 Pod 都会被驱逐。Pod 可以通过指定 <code>requiredDuringSchedulingIgnoredDuringExecution</code>类型来告知调度器在调度时要遵循的节点亲和性规则，这个过程在初次调度时完成，在 Pod 正式运行后，kubelet 为了避免节点随时发生变化，会忽略亲和性的配置。</p><p>启用该策略后，如果节点在后续过程中不在满足 Pod 的节点亲和，就会触发驱逐。例如，nodeA 上运行了 podA，podA 在初次调度时满足节点管理新规则 <code>requiredDuringSchedulingIgnoredDuringExecution</code>，但是随着时间的推移，nodeA 不再满足该规则（如节点的 namespace label 变更），而 nodeB 可用且满足 podA 的节点关联性，那么 podA 就会被驱逐到 nodeB。</p><h6 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemovePodsViolatingNodeAffinity&quot;:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">params:</span><br>      <span class="hljs-attr">nodeAffinityType:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;requiredDuringSchedulingIgnoredDuringExecution&quot;</span><br></code></pre></td></tr></table></figure><h5 id="5-RemovePodsViolatingNodeTaints-策略"><a href="#5-RemovePodsViolatingNodeTaints-策略" class="headerlink" title="5. RemovePodsViolatingNodeTaints 策略"></a>5. RemovePodsViolatingNodeTaints 策略</h5><p>移除违反 Node 污点 Pods 策略，该策略可以确保违反了节点上 <code>NoSchedule</code> 污点规则的 Pod会被驱逐。例如，podA 设置了对于污点 <code>key=value:NoSchedule</code> 的容忍，并被调度到有对应污点的 nodeA 上运行。如果后来 nodeA 的污点被更改或删除，podA 的容忍就不再适用，但是除非是设置了 NoExcute，否则正常运行的 podA 并不会被驱逐。而启用该策略后，就会再此触发污点容忍判断，进而驱逐 podA。</p><h6 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemovePodsViolatingNodeTaints&quot;:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="6-RemovePodsHavingTooManyRestarts-策略"><a href="#6-RemovePodsHavingTooManyRestarts-策略" class="headerlink" title="6. RemovePodsHavingTooManyRestarts 策略"></a>6. RemovePodsHavingTooManyRestarts 策略</h5><p>移除重启过多 Pods 策略，该策略可以确保节点上重启次数过多的 Pod 会被驱逐。例如，挂载 volume 或磁盘失败，这种 pod 应该被二次调度到其他节点。</p><h6 id="策略相关参数-1"><a href="#策略相关参数-1" class="headerlink" title="策略相关参数:"></a>策略相关参数:</h6><ul><li><code>podRestartThreshold</code>: 用于设置重启次数的阈值，当一个 Pod 的重启次数超过该阈值，就会被驱逐</li><li><code>includingInitContainers</code>: 确认 init 容器阶段的 Pod 是否也包括在内</li></ul><h6 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemovePodsHavingTooManyRestarts&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>     <span class="hljs-attr">params:</span><br>       <span class="hljs-attr">podsHavingTooManyRestarts:</span><br>         <span class="hljs-attr">podRestartThreshold:</span> <span class="hljs-number">100</span><br>         <span class="hljs-attr">includingInitContainers:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="7-PodLifeTime-策略"><a href="#7-PodLifeTime-策略" class="headerlink" title="7. PodLifeTime 策略"></a>7. PodLifeTime 策略</h5><p>Pod 存活周期管理策略，该策略会可以根据运行时间和 Pod 状态为依据来触发 Pod 二次调度。</p><h6 id="策略相关参数-2"><a href="#策略相关参数-2" class="headerlink" title="策略相关参数:"></a>策略相关参数:</h6><ul><li><code>maxPodLifeTimeSeconds</code>: 预设运行时长阈值，超过阈值的 Pod 就会被驱逐。</li><li><code>podStatusPhases</code>: 预设 Pod 运行状态（running 或 pending），如果 Pod 为该预设状态就会被驱逐。</li></ul><h6 id="使用示例-6"><a href="#使用示例-6" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;PodLifeTime&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>     <span class="hljs-attr">params:</span><br>       <span class="hljs-attr">podLifeTime:</span><br>         <span class="hljs-attr">maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span> <br>         <span class="hljs-attr">podStatusPhases:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;Pending&quot;</span><br></code></pre></td></tr></table></figure><h5 id="8-RemoveFailedPods-策略"><a href="#8-RemoveFailedPods-策略" class="headerlink" title="8. RemoveFailedPods 策略"></a>8. RemoveFailedPods 策略</h5><p>该策略会移除状态为 failed 的 Pod。</p><h6 id="策略相关参数-3"><a href="#策略相关参数-3" class="headerlink" title="策略相关参数:"></a>策略相关参数:</h6><ul><li><code>reasons</code>: 失败原因列表，可以根据列表中的原因进行过滤，以触发驱逐</li><li><code>includingInitContainers</code>: 确认 init 容器阶段的 Pod 是否也包括在内</li><li><code>excludeOwnerKinds</code>: 控制器列表，可以根据列表中的控制器类型进行过滤，以触发驱逐</li><li><code>minPodLifeTimeSeconds</code>: 指定 Pod 最小存活活时间，如果比预设的最小值大，则触发驱逐</li></ul><h6 id="使用示例-7"><a href="#使用示例-7" class="headerlink" title="使用示例:"></a>使用示例:</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;RemoveFailedPods&quot;:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>     <span class="hljs-attr">params:</span><br>       <span class="hljs-attr">failedPods:</span><br>         <span class="hljs-attr">reasons:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;NodeAffinity&quot;</span><br>         <span class="hljs-attr">includingInitContainers:</span> <span class="hljs-literal">true</span><br>         <span class="hljs-attr">excludeOwnerKinds:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;Job&quot;</span><br>         <span class="hljs-attr">minPodLifeTimeSeconds:</span> <span class="hljs-number">3600</span><br></code></pre></td></tr></table></figure><h4 id="4）Pod-的驱逐机制"><a href="#4）Pod-的驱逐机制" class="headerlink" title="4）Pod 的驱逐机制"></a>4）Pod 的驱逐机制</h4><p>当 <code>Descheduler</code> 决定从节点驱逐 Pod 时，会采用以下常规机制:</p><ul><li>高优先度 Pod（PriorityClassName 为 <code>system-cluster-critical</code> 和 <code>system-node-critical</code>）不会被驱逐（除非设置了 <code>evictSystemCriticalPods: true</code>）</li><li>不属于 RC、RS、Deployment、Job 的 Pod（静态或镜像 Pod 或独立 Pod）不会被驱逐，因为他们不会自动重新创建。</li><li>与 DeamonSets 相关的 Pod 不会被驱逐</li><li>有本地存储的 Pod 不会被驱逐（除非设置了 <code>evictLocalStoragePods: true</code>）</li><li>有 PVC 的 Pod 会被驱逐（除非设置了 <code>ignorePvcPods: true</code>）</li><li>使用了 <code>LowNodeUtilization</code> 和 <code>RemovePodsViolatingInterPodAntiAffinity</code> 策略，会根据他们的优先级从低到高进行驱逐，如果优先级相同，则会依据 QoS 判断，首先驱逐 <code>Best-Effort</code> 优先级的 pod，再驱逐 <code>Burstable</code> 优先级的 Pod，最后驱逐 <code>Guaranteed</code> 优先级的 Pod。</li><li>带有注释 <code>descheduler.alpha.kubernetes.io/evict</code> 的所有类型的 Pod 都会被驱逐。该注释用于覆盖防止驱逐的检查，用户可以选择驱逐哪个 Pod。用户应该知道如何以及是否可以重新创建容器。</li><li>设置 –v=4 或者更大，Descheduler 会在日志中记录所有 pod 没有被驱逐的原因</li></ul><blockquote><p>⚠️ <strong>注意:</strong> PDB 不会受 Descheduler 控制。</p></blockquote><h3 id="2、方案实施"><a href="#2、方案实施" class="headerlink" title="2、方案实施"></a>2、方案实施</h3><p><code>Descheduler</code> 可以在 K8S 集群中作为 <code>Job</code>、<code>CronJob</code> 或 <code>Deployment</code>（0.21后） 运行。它的优点在于可以多次运行而无需用户进行干预。它的 Pod 会在 <code>kube-system</code> 命名空间中作为关键容器运行，以避免被自身或kubelet逐出。</p><p>我这里已经打好了镜像，地址为 <code>tareya/descheduler:0.9.0</code>，在下文的 yaml 中会使用，当然由于 <code>Descheduler</code> 更新是速度很快，也可以通过以下方式自行准备镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/kubernetes-sigs/descheduler.git &amp;&amp; \<br>cd descheduler &amp;&amp; make image <br></code></pre></td></tr></table></figure><h4 id="1）创建-RBAC-授权"><a href="#1）创建-RBAC-授权" class="headerlink" title="1）创建 RBAC 授权"></a>1）创建 RBAC 授权</h4><p>文件路径: <code>~/descheduler/rbac.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler-cluster-role</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;nodes&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods/eviction&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler-sa</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">descehduler-cluster-role-binding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler-cluster-role</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler-sa</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><h4 id="2）创建-configmap"><a href="#2）创建-configmap" class="headerlink" title="2）创建 configmap"></a>2）创建 configmap</h4><p>文件路径: <code>~/descheduler/configmap.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler-policy-configmap</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">policy.yaml:</span> <span class="hljs-string">|-  </span><br><span class="hljs-string">    apiVersion: descheduler/v1alpha1</span><br><span class="hljs-string">    kind: DeschedulerPolicy</span><br><span class="hljs-string">    strategies:</span><br><span class="hljs-string">      RemoveDuplicates:</span><br><span class="hljs-string">         enabled: false</span><br><span class="hljs-string">      LowNodeUtilization:</span><br><span class="hljs-string">         enabled: true</span><br><span class="hljs-string">         params:</span><br><span class="hljs-string">           nodeResourceUtilizationThresholds:</span><br><span class="hljs-string">             thresholds:</span><br><span class="hljs-string">               memory: 50</span><br><span class="hljs-string">             targetThresholds:</span><br><span class="hljs-string">               memory: 85</span><br><span class="hljs-string">      RemovePodsViolatingInterPodAntiAffinity:</span><br><span class="hljs-string">        enabled: true</span><br><span class="hljs-string">      RemovePodsViolatingNodeAffinity:</span><br><span class="hljs-string">        enabled: true</span><br><span class="hljs-string">        params:</span><br><span class="hljs-string">          nodeAffinityType:</span><br><span class="hljs-string">          - requiredDuringSchedulingIgnoredDuringExecution</span><br></code></pre></td></tr></table></figure><h4 id="3）创建计划任务对象"><a href="#3）创建计划任务对象" class="headerlink" title="3）创建计划任务对象"></a>3）创建计划任务对象</h4><p>文件路径: <code>~/descheduler/cronjob.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;*/30 * * * *&quot;</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">descheduler-sa</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">tareya/descheduler:v0.9.0</span><br>            <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/policy-dir</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">policy-volume</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/descheduler</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--v=4</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--max-pods-to-evict-per-node=10</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--policy-config-file=/policy-dir/policy.yaml</span><span class="hljs-comment">#此处为&lt;path-to-policy-dir/policy.yaml&gt;文件</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">&quot;OnFailure&quot;</span><br>          <span class="hljs-attr">volumes:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">policy-volume</span><br>            <span class="hljs-attr">configMap:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">descheduler-policy-configmap</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第6章、Golang 网络编程（下）</title>
    <link href="/2021/10/14/%E7%AC%AC6%E7%AB%A0%E3%80%81Golang-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC6%E7%AB%A0%E3%80%81Golang-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第6章、Golang-网络编程（下）"><a href="#第6章、Golang-网络编程（下）" class="headerlink" title="第6章、Golang 网络编程（下）"></a>第6章、Golang 网络编程（下）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章、Golang 网络编程（中）</title>
    <link href="/2021/10/14/%E7%AC%AC5%E7%AB%A0%E3%80%81Golang-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC5%E7%AB%A0%E3%80%81Golang-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章、Golang-网络编程（中）"><a href="#第5章、Golang-网络编程（中）" class="headerlink" title="第5章、Golang 网络编程（中）"></a>第5章、Golang 网络编程（中）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、Golang 网络编程（上）</title>
    <link href="/2021/10/14/%E7%AC%AC4%E7%AB%A0%E3%80%81Golang-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC4%E7%AB%A0%E3%80%81Golang-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Golang-网络编程（上）"><a href="#第4章、Golang-网络编程（上）" class="headerlink" title="第4章、Golang 网络编程（上）"></a>第4章、Golang 网络编程（上）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、Golang 并发编程（下）</title>
    <link href="/2021/10/14/%E7%AC%AC3%E7%AB%A0%E3%80%81Golang-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC3%E7%AB%A0%E3%80%81Golang-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、Golang-并发编程（下）"><a href="#第3章、Golang-并发编程（下）" class="headerlink" title="第3章、Golang 并发编程（下）"></a>第3章、Golang 并发编程（下）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Golang 并发编程（中）</title>
    <link href="/2021/10/14/%E7%AC%AC2%E7%AB%A0%E3%80%81Golang-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC2%E7%AB%A0%E3%80%81Golang-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Golang-并发编程（中）"><a href="#第2章、Golang-并发编程（中）" class="headerlink" title="第2章、Golang 并发编程（中）"></a>第2章、Golang 并发编程（中）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、Golang 并发编程（上）</title>
    <link href="/2021/10/14/%E7%AC%AC1%E7%AB%A0%E3%80%81Golang-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC1%E7%AB%A0%E3%80%81Golang-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、Golang-并发编程（上）"><a href="#第1章、Golang-并发编程（上）" class="headerlink" title="第1章、Golang 并发编程（上）"></a>第1章、Golang 并发编程（上）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第10章、Golang 反射</title>
    <link href="/2021/10/14/%E7%AC%AC10%E7%AB%A0%E3%80%81Golang-%E5%8F%8D%E5%B0%84/"/>
    <url>/2021/10/14/%E7%AC%AC10%E7%AB%A0%E3%80%81Golang-%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="第10章、Golang-反射"><a href="#第10章、Golang-反射" class="headerlink" title="第10章、Golang 反射"></a>第10章、Golang 反射</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第8章、Golang 文件操作（基础）</title>
    <link href="/2021/10/14/%E7%AC%AC8%E7%AB%A0%E3%80%81Golang-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC8%E7%AB%A0%E3%80%81Golang-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第8章、Golang-文件操作（基础）"><a href="#第8章、Golang-文件操作（基础）" class="headerlink" title="第8章、Golang 文件操作（基础）"></a>第8章、Golang 文件操作（基础）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第9章、Golang 文件操作（进阶）</title>
    <link href="/2021/10/14/%E7%AC%AC9%E7%AB%A0%E3%80%81Golang-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC9%E7%AB%A0%E3%80%81Golang-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第9章、Golang-文件操作（进阶）"><a href="#第9章、Golang-文件操作（进阶）" class="headerlink" title="第9章、Golang 文件操作（进阶）"></a>第9章、Golang 文件操作（进阶）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第7章、Golang 接口</title>
    <link href="/2021/10/14/%E7%AC%AC7%E7%AB%A0%E3%80%81Golang-%E6%8E%A5%E5%8F%A3/"/>
    <url>/2021/10/14/%E7%AC%AC7%E7%AB%A0%E3%80%81Golang-%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="第7章、Golang-接口"><a href="#第7章、Golang-接口" class="headerlink" title="第7章、Golang 接口"></a>第7章、Golang 接口</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第6章、Golang 结构体</title>
    <link href="/2021/10/14/%E7%AC%AC6%E7%AB%A0%E3%80%81Golang-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2021/10/14/%E7%AC%AC6%E7%AB%A0%E3%80%81Golang-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="第6章、Golang-结构体"><a href="#第6章、Golang-结构体" class="headerlink" title="第6章、Golang 结构体"></a>第6章、Golang 结构体</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章、Golang 函数</title>
    <link href="/2021/10/14/%E7%AC%AC5%E7%AB%A0%E3%80%81Golang-%E5%87%BD%E6%95%B0/"/>
    <url>/2021/10/14/%E7%AC%AC5%E7%AB%A0%E3%80%81Golang-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章、Golang-函数"><a href="#第5章、Golang-函数" class="headerlink" title="第5章、Golang 函数"></a>第5章、Golang 函数</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、Golang 数据类型（进阶）</title>
    <link href="/2021/10/14/%E7%AC%AC4%E7%AB%A0%E3%80%81Golang-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC4%E7%AB%A0%E3%80%81Golang-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Golang-数据类型（进阶）"><a href="#第4章、Golang-数据类型（进阶）" class="headerlink" title="第4章、Golang 数据类型（进阶）"></a>第4章、Golang 数据类型（进阶）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、Golang 数据类型（基础）</title>
    <link href="/2021/10/14/%E7%AC%AC3%E7%AB%A0%E3%80%81Golang-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <url>/2021/10/14/%E7%AC%AC3%E7%AB%A0%E3%80%81Golang-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、Golang-数据类型（基础）"><a href="#第3章、Golang-数据类型（基础）" class="headerlink" title="第3章、Golang 数据类型（基础）"></a>第3章、Golang 数据类型（基础）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Golang 包管理</title>
    <link href="/2021/10/14/%E7%AC%AC2%E7%AB%A0%E3%80%81Golang-%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/2021/10/14/%E7%AC%AC2%E7%AB%A0%E3%80%81Golang-%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Golang-包管理"><a href="#第2章、Golang-包管理" class="headerlink" title="第2章、Golang 包管理"></a>第2章、Golang 包管理</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、Python 装饰器</title>
    <link href="/2021/10/13/%E7%AC%AC4%E7%AB%A0%E3%80%81Python-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2021/10/13/%E7%AC%AC4%E7%AB%A0%E3%80%81Python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Python-装饰器"><a href="#第4章、Python-装饰器" class="headerlink" title="第4章、Python 装饰器"></a>第4章、Python 装饰器</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python 函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、Python 内置函数、匿名函数</title>
    <link href="/2021/10/13/%E7%AC%AC3%E7%AB%A0%E3%80%81Python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <url>/2021/10/13/%E7%AC%AC3%E7%AB%A0%E3%80%81Python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、Python-内置函数、匿名函数"><a href="#第3章、Python-内置函数、匿名函数" class="headerlink" title="第3章、Python 内置函数、匿名函数"></a>第3章、Python 内置函数、匿名函数</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python 函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Python 迭代器、生成器</title>
    <link href="/2021/10/13/%E7%AC%AC2%E7%AB%A0%E3%80%81Python-%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2021/10/13/%E7%AC%AC2%E7%AB%A0%E3%80%81Python-%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Python-迭代器、生成器"><a href="#第2章、Python-迭代器、生成器" class="headerlink" title="第2章、Python 迭代器、生成器"></a>第2章、Python 迭代器、生成器</h1><span id="more"></span><h2 id="一、迭代器-——-Iterator"><a href="#一、迭代器-——-Iterator" class="headerlink" title="一、迭代器 —— Iterator"></a>一、迭代器 —— Iterator</h2><h3 id="1、关于可迭代的对象"><a href="#1、关于可迭代的对象" class="headerlink" title="1、关于可迭代的对象"></a>1、关于可迭代的对象</h3><h4 id="1）什么是可迭代对象？"><a href="#1）什么是可迭代对象？" class="headerlink" title="1）什么是可迭代对象？"></a>1）什么是可迭代对象？</h4><p>我们知道，Python 中一切皆对象，一个对象就是一个实例；而关于迭代，意在可重复性，我们平时最常说就是版本迭代，这是一个反复的过程，但是每一次的重复又会获得不尽相同的结果。那么就字面意思来说，可迭代对象就是个反复获取结果的对象，也就可反复取值的对象。</p><p><strong>通俗的说，在 Python 中，凡是内部含有 _<em>iter</em>_ 方法的对象都是可迭代对象。</strong> 如，str、list、tuple、dic、set、range、文件句柄等。</p><h4 id="2）判断对象是否为可迭代对象"><a href="#2）判断对象是否为可迭代对象" class="headerlink" title="2）判断对象是否为可迭代对象"></a>2）判断对象是否为可迭代对象</h4><h5 id="1-查看对象内部方法"><a href="#1-查看对象内部方法" class="headerlink" title="1. 查看对象内部方法"></a>1. 查看对象内部方法</h5><blockquote><p>🚩 除了查看源码，也可以通过 dir() 方法去判断一个对象的具体方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&quot;Tareya&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(str1))<br></code></pre></td></tr></table></figure><p>返回值为一个列表，其中含有该对象的所有方法名，可以看出 str 对象是有 <code>__iter__</code> 方法的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;__add__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__getnewargs__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__mod__&#x27;</span>, <span class="hljs-string">&#x27;__mul__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__rmod__&#x27;</span>, <span class="hljs-string">&#x27;__rmul__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;capitalize&#x27;</span>, <span class="hljs-string">&#x27;casefold&#x27;</span>, <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;encode&#x27;</span>, <span class="hljs-string">&#x27;endswith&#x27;</span>, <span class="hljs-string">&#x27;expandtabs&#x27;</span>, <span class="hljs-string">&#x27;find&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-string">&#x27;format_map&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;isalnum&#x27;</span>, <span class="hljs-string">&#x27;isalpha&#x27;</span>, <span class="hljs-string">&#x27;isascii&#x27;</span>, <span class="hljs-string">&#x27;isdecimal&#x27;</span>, <span class="hljs-string">&#x27;isdigit&#x27;</span>, <span class="hljs-string">&#x27;isidentifier&#x27;</span>, <span class="hljs-string">&#x27;islower&#x27;</span>, <span class="hljs-string">&#x27;isnumeric&#x27;</span>, <span class="hljs-string">&#x27;isprintable&#x27;</span>, <span class="hljs-string">&#x27;isspace&#x27;</span>, <span class="hljs-string">&#x27;istitle&#x27;</span>, <span class="hljs-string">&#x27;isupper&#x27;</span>, <span class="hljs-string">&#x27;join&#x27;</span>, <span class="hljs-string">&#x27;ljust&#x27;</span>, <span class="hljs-string">&#x27;lower&#x27;</span>, <span class="hljs-string">&#x27;lstrip&#x27;</span>, <span class="hljs-string">&#x27;maketrans&#x27;</span>, <span class="hljs-string">&#x27;partition&#x27;</span>, <span class="hljs-string">&#x27;replace&#x27;</span>, <span class="hljs-string">&#x27;rfind&#x27;</span>, <span class="hljs-string">&#x27;rindex&#x27;</span>, <span class="hljs-string">&#x27;rjust&#x27;</span>, <span class="hljs-string">&#x27;rpartition&#x27;</span>, <span class="hljs-string">&#x27;rsplit&#x27;</span>, <span class="hljs-string">&#x27;rstrip&#x27;</span>, <span class="hljs-string">&#x27;split&#x27;</span>, <span class="hljs-string">&#x27;splitlines&#x27;</span>, <span class="hljs-string">&#x27;startswith&#x27;</span>, <span class="hljs-string">&#x27;strip&#x27;</span>, <span class="hljs-string">&#x27;swapcase&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;translate&#x27;</span>, <span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-string">&#x27;zfill&#x27;</span>]<br></code></pre></td></tr></table></figure><h5 id="2-判断可迭代对象的方法"><a href="#2-判断可迭代对象的方法" class="headerlink" title="2. 判断可迭代对象的方法"></a>2. 判断可迭代对象的方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&quot;Tareya&quot;</span><br>num1 = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(num1))<span class="hljs-comment"># 返回 False，方法列表中没有 __iter__</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(str1))<span class="hljs-comment"># 返回 True,方法列表中有 __iter__</span><br></code></pre></td></tr></table></figure><h4 id="3）可迭代对象的优缺点"><a href="#3）可迭代对象的优缺点" class="headerlink" title="3）可迭代对象的优缺点"></a>3）可迭代对象的优缺点</h4><h5 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h5><ul><li>可以直观的查看里面的数据</li></ul><h5 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h5><ul><li>占用内存</li><li>不能迭代取值（除去索引、key 以外）</li></ul><h3 id="2、关于迭代器"><a href="#2、关于迭代器" class="headerlink" title="2、关于迭代器"></a>2、关于迭代器</h3><h4 id="1）什么是迭代器？"><a href="#1）什么是迭代器？" class="headerlink" title="1）什么是迭代器？"></a>1）什么是迭代器？</h4><p>迭代器是用于访问可迭代对象的工具，它实现了无参数的 _<em>next</em>_ 方法，用于返回序列中下一元素，如果没有元素了就会抛出 <code>StopIteration</code> 异常。Python 中的迭代器还实现了 __iter__ 方法，可以从可迭代对象中返回一个迭代器。</p><p><strong>通俗的说，在 python 中，内部含有 __Iter__ 方法并且含有 __next__ 方法的对象就是迭代器。</strong></p><h4 id="2）判断对象是否为迭代器"><a href="#2）判断对象是否为迭代器" class="headerlink" title="2）判断对象是否为迭代器"></a>2）判断对象是否为迭代器</h4><h5 id="1-判断-str-list-tuple-dict-set-range-文件句柄-中哪些是迭代器"><a href="#1-判断-str-list-tuple-dict-set-range-文件句柄-中哪些是迭代器" class="headerlink" title="1. 判断 str list tuple dict set range 文件句柄 中哪些是迭代器"></a>1. 判断 str list tuple dict set range 文件句柄 中哪些是迭代器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">obj1 = <span class="hljs-string">&#x27;Tareya&#x27;</span><br>obj2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>obj3 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>obj4 = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Tareya&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>obj5 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,mode=<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj1))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj2))<span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj3))<span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj4))<span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj5))<span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__iter__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(f))<span class="hljs-comment"># True</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__next__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj1))<span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__next__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj2))<span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__next__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj3))<span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__next__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj4))<span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__next__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj5))<span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__next__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(f))<span class="hljs-comment"># True</span><br>f.close()<br></code></pre></td></tr></table></figure><blockquote><p>🚩 经判断，只有文件句柄是迭代器，剩下的数据类型都是可迭代对象。</p></blockquote><h5 id="2-可迭代对象转化迭代器的方法"><a href="#2-可迭代对象转化迭代器的方法" class="headerlink" title="2. 可迭代对象转化迭代器的方法"></a>2. 可迭代对象转化迭代器的方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>obj   = list1.__iter__()<br><span class="hljs-built_in">print</span>(obj)<span class="hljs-comment"># &lt;list_iterator object at 0x7fc8456d1100&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(iter(list1))# &lt;list_iterator object at 0x7fc84491bfd0&gt;<br></code></pre></td></tr></table></figure><h5 id="3-迭代器取值"><a href="#3-迭代器取值" class="headerlink" title="3. 迭代器取值"></a>3. 迭代器取值</h5><blockquote><p>🚩 迭代器使用 _<em>next</em>_() 方法取值，一个 next 对应一个取出的值，如果迭代器里面的值取完了，则会抛出 <code>StopIteration</code> 异常，从而停止继续迭代取值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>obj   = <span class="hljs-built_in">iter</span>(list1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(obj))<span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(obj))<span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(obj))<span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(obj))<span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(obj))<span class="hljs-comment"># StopIteration</span><br></code></pre></td></tr></table></figure><h5 id="4-模拟-for-的内部循环机制"><a href="#4-模拟-for-的内部循环机制" class="headerlink" title="4. 模拟 for 的内部循环机制"></a>4. 模拟 for 的内部循环机制</h5><blockquote><p>🌈 <strong>为什么可以通过 for 循环方式对可迭代对象进行取值？</strong></p><p>for 循环的内部机制是将可迭代对象转化成迭代器，然后再利用 next 进行取值，最后再利用异常处理处理 StopIteration抛出的异常，示例如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-string">&#x27;师傅&#x27;</span>,<span class="hljs-string">&#x27;悟空&#x27;</span>,<span class="hljs-string">&#x27;八戒&#x27;</span>,<span class="hljs-string">&#x27;沙僧&#x27;</span>&#125;<br><span class="hljs-comment"># 1. 将可迭代对象转化成迭代器</span><br>obj  = <span class="hljs-built_in">iter</span>(set1)<br><br><span class="hljs-comment"># 2. 利用 while 循环，next 进行取值</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-comment"># 3. 利用异常处理终止循环</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(obj))<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询完毕.&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h4 id="3）迭代器的优缺点"><a href="#3）迭代器的优缺点" class="headerlink" title="3）迭代器的优缺点"></a>3）迭代器的优缺点</h4><h5 id="1-优点-1"><a href="#1-优点-1" class="headerlink" title="1. 优点"></a>1. 优点</h5><ul><li>节省内存<ul><li><strong>迭代器在内存中相当于只占一个数据的空间。每次取值都上一条数据会在内存释放，加载当前的此条数据。</strong></li></ul></li><li>惰性机制<ul><li>next 一次只取一个值，绝不多取</li></ul></li></ul><h5 id="2-缺点-1"><a href="#2-缺点-1" class="headerlink" title="2. 缺点"></a>2. 缺点</h5><ul><li>不能直观的查看里面的数据</li><li>取值的时候不能走回头路，只能一路向下（取1释放1）<ul><li><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211013163304251.png" alt="image-20211013163304251"></li></ul></li></ul><h3 id="3、可迭代对象与迭代器的对比"><a href="#3、可迭代对象与迭代器的对比" class="headerlink" title="3、可迭代对象与迭代器的对比"></a>3、可迭代对象与迭代器的对比</h3><table><thead><tr><th></th><th>可迭代对象</th><th>迭代器</th></tr></thead><tbody><tr><td><strong>优点</strong></td><td>私有的方法比较多，操作灵活；比较直观，可以直接查看内部数据</td><td>节省内存；可以记录取值位置；可以直接通过循环 + next() 进行取值</td></tr><tr><td><strong>缺点</strong></td><td>占用内存；且不能直接通过循环迭代取值</td><td>不直观，无法直接查看内部数据；操作方法就是取值，比较单一</td></tr><tr><td><strong>使用场景</strong></td><td>侧重于数据的灵活处理，并且内存空间充足，可以将数据集设置为可迭代对象。（比如列表，字典的增删改查，字符串的常用操作方法等）</td><td>数据量过大，可能会撑爆内存或者一节省内存为需求，可以将数据集设置为迭代器。（比如 Python 将文件句柄设置为迭代器就是为了避免文件过大打爆内存）</td></tr></tbody></table><h2 id="二、生成器-——-Generator"><a href="#二、生成器-——-Generator" class="headerlink" title="二、生成器 —— Generator"></a>二、生成器 —— Generator</h2><h3 id="1、关于生成器"><a href="#1、关于生成器" class="headerlink" title="1、关于生成器"></a>1、关于生成器</h3><h4 id="1）什么是生成器？"><a href="#1）什么是生成器？" class="headerlink" title="1）什么是生成器？"></a>1）什么是生成器？</h4><p>生成器是指能够动态提供数据的对象，并且生成器对象也是一个迭代器。但是与迭代器不同的是，迭代器是Python已经事先实现好的功能，用就完了（比如文件句柄预设为迭代器，iter([1,2,3]) 转化成迭代器）。而生成器则需要自己通过生成器函数或生成器表达式进行构建。</p><h4 id="2）生成器的构建方式"><a href="#2）生成器的构建方式" class="headerlink" title="2）生成器的构建方式"></a>2）生成器的构建方式</h4><p>Python 中提供了以下三种方式来构建生成器</p><ul><li>通过生成器函数构建（自定义生成器函数）</li><li>通过生成器表达式构建</li><li>通过 Python 内置函数或模块提供（Python 提供的生成器函数）</li></ul><h3 id="2、生成器函数"><a href="#2、生成器函数" class="headerlink" title="2、生成器函数"></a>2、生成器函数</h3><h4 id="1）什么是生成器函数？"><a href="#1）什么是生成器函数？" class="headerlink" title="1）什么是生成器函数？"></a>1）什么是生成器函数？</h4><p><strong>通俗的说，含有 yield 语句的函数即生成器函数，此函数被调用时会返回一个生成器对象。</strong> </p><h5 id="1-创建一个简单的生成器函数"><a href="#1-创建一个简单的生成器函数" class="headerlink" title="1. 创建一个简单的生成器函数"></a>1. 创建一个简单的生成器函数</h5><p>如下创建一个简单的生成器函数（实际上就是将一个普通函数的 return 改为 yield），调用该生成器函数则会返回一个生成器对象，且该生成器对象也是一个迭代器，我们可以通过 next 对其循环取值，一个 yield 对应一个 next，如果 next 数量超过 yield 的数量，就会返回 StopIteration。 （如下例，由于 11 是函数 print 的输出，而非生成器器函数本身返回的值，所以循环执行2次 next 超过了 yield 的数量了，返回了 StopIteration）</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211013180116144.png" alt="image-20211013180116144"></p><h4 id="2）yield-和-return-的区别"><a href="#2）yield-和-return-的区别" class="headerlink" title="2）yield 和 return 的区别:"></a>2）yield 和 return 的区别:</h4><ul><li><code>return</code>: 一般在函数中只会设置一个，它的作用是终止函数并返回函数执行结果，由于结果会一次性生成，所以会占用较多的内存。</li><li><code>yield</code>: 可以在函数中设置多个，并不会终止函数。使用 next 取值时，会取对应的 yield 生成的结果。next 在调用生成器函数取值 yield 时会记录位置，再次调用时会返回 yield 的位置，继续向下执行，和迭代器一样，生成器函数也只需占用一个内存空间，并且取1释放 1，以此来节省内存资源。</li></ul><h5 id="以吃东西举例"><a href="#以吃东西举例" class="headerlink" title="以吃东西举例:"></a>以吃东西举例:</h5><p>上面说了，return 的作用是将函数执行的结果返回，实际上他们都被保存在该函数的内存空间内了，也就是说函数生成的结果越多，占用的内存空间也就越大，如下，30串羊肉串一下全做出来放着，你如果吃不完，剩下的就会继续占着内存空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>():</span><br>    <br>    <span class="hljs-built_in">list</span> = []<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">31</span>):<br>    <br>        <span class="hljs-built_in">list</span>.append(<span class="hljs-string">&quot;羊肉串&quot;</span>+<span class="hljs-built_in">str</span>(i))<br>        <br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span><br><br><br>e = eat()<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>返回如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211014100235168.png" alt="image-20211014100235168"></p><p>而使用 yield，只有当 next 调用时才会生成结果，也就是说是吃一个包子（调 eat），做一个包子（yield），并且还会记录上次吃到第几个了（next），这样就比较节省内存空间了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>():</span><br>    <br>    <span class="hljs-built_in">list</span> = []<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">31</span>):<br>    <br>        <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;包子&quot;</span>+<span class="hljs-built_in">str</span>(i)<br>        <br><br>e = eat()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(e))<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;早上先吃10个，剩下的留着下次吃&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(e))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;中午再吃10个，剩下的留着下次吃&#x27;</span>)<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(e))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;晚上把剩下的都吃了&#x27;</span>)<br></code></pre></td></tr></table></figure><p>返回如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211014101240667.png" alt="image-20211014101240667"></p><h4 id="3）send-方法"><a href="#3）send-方法" class="headerlink" title="3）send 方法"></a>3）send 方法</h4><p>我们之前说过，next 的使用方式比较单一，它只能用来获取 yield 生成的值，并不能传递值，如下所示:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211014102937726.png" alt="image-20211014102937726"></p><p>如果我们能要进行传参，就需要用到 send，它同样也可像 next 一样获取到 yield 的值，并且还可以将值传给 yield，如下所示:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211014103739335.png" alt="image-20211014103739335"></p><blockquote><p>⚠️ 注意先要 next()，让指针指向 yield，才能实现传参。</p></blockquote><h4 id="4）yield-from-方法"><a href="#4）yield-from-方法" class="headerlink" title="4）yield from 方法"></a>4）yield from 方法</h4><h3 id="3、生成器表达式"><a href="#3、生成器表达式" class="headerlink" title="3、生成器表达式"></a>3、生成器表达式</h3><h4 id="1）什么是生成器表达式？"><a href="#1）什么是生成器表达式？" class="headerlink" title="1）什么是生成器表达式？"></a>1）什么是生成器表达式？</h4>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python 函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、初识 Python 函数</title>
    <link href="/2021/10/13/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Python-%E5%87%BD%E6%95%B0/"/>
    <url>/2021/10/13/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Python-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、初识-Python-函数"><a href="#第1章、初识-Python-函数" class="headerlink" title="第1章、初识 Python 函数"></a>第1章、初识 Python 函数</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python 函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据包从网卡到应用层过程研究</title>
    <link href="/2021/10/13/%E6%95%B0%E6%8D%AE%E5%8C%85%E4%BB%8E%E7%BD%91%E5%8D%A1%E5%88%B0%E5%BA%94%E7%94%A8%E5%B1%82%E8%BF%87%E7%A8%8B%E7%A0%94%E7%A9%B6/"/>
    <url>/2021/10/13/%E6%95%B0%E6%8D%AE%E5%8C%85%E4%BB%8E%E7%BD%91%E5%8D%A1%E5%88%B0%E5%BA%94%E7%94%A8%E5%B1%82%E8%BF%87%E7%A8%8B%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="数据包从网卡到应用层过程研究"><a href="#数据包从网卡到应用层过程研究" class="headerlink" title="数据包从网卡到应用层过程研究"></a>数据包从网卡到应用层过程研究</h1><span id="more"></span><h2 id="1、数据包从网卡到内存"><a href="#1、数据包从网卡到内存" class="headerlink" title="1、数据包从网卡到内存"></a>1、数据包从网卡到内存</h2><h2 id="2、内存-网络模块-协议栈"><a href="#2、内存-网络模块-协议栈" class="headerlink" title="2、内存-网络模块-协议栈"></a>2、内存-网络模块-协议栈</h2><h2 id="3、进入传输层"><a href="#3、进入传输层" class="headerlink" title="3、进入传输层"></a>3、进入传输层</h2><h2 id="4、进入应用层"><a href="#4、进入应用层" class="headerlink" title="4、进入应用层"></a>4、进入应用层</h2>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核协议栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第13章、信息系统测试知识</title>
    <link href="/2021/09/28/%E7%AC%AC13%E7%AB%A0%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/09/28/%E7%AC%AC13%E7%AB%A0%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第13章、信息系统测试知识"><a href="#第13章、信息系统测试知识" class="headerlink" title="第13章、信息系统测试知识"></a>第13章、信息系统测试知识</h1><span id="more"></span><h2 id="一、知识管理"><a href="#一、知识管理" class="headerlink" title="一、知识管理"></a>一、知识管理</h2><h3 id="1、软件测试分类"><a href="#1、软件测试分类" class="headerlink" title="1、软件测试分类"></a>1、软件测试分类</h3><h4 id="1）单元测试（模块测试）"><a href="#1）单元测试（模块测试）" class="headerlink" title="1）单元测试（模块测试）"></a>1）单元测试（模块测试）</h4><h5 id="1-测试对象"><a href="#1-测试对象" class="headerlink" title="1. 测试对象"></a>1. 测试对象</h5><ul><li>程序模块</li><li>软件构件</li><li>软件中的类</li></ul><h5 id="2-测试目的"><a href="#2-测试目的" class="headerlink" title="2. 测试目的"></a>2. 测试目的</h5><ul><li>检查是否正确地按设计说明中的功能、性能、接口和其他设计约束实现，预先检查可能存在的bug</li></ul><p>3.</p><h4 id="2）集成测试"><a href="#2）集成测试" class="headerlink" title="2）集成测试"></a>2）集成测试</h4><h4 id="3）确认测试"><a href="#3）确认测试" class="headerlink" title="3）确认测试"></a>3）确认测试</h4><h4 id="4）系统测试"><a href="#4）系统测试" class="headerlink" title="4）系统测试"></a>4）系统测试</h4><h4 id="5）配置项测试"><a href="#5）配置项测试" class="headerlink" title="5）配置项测试"></a>5）配置项测试</h4><h4 id="6）回归测试"><a href="#6）回归测试" class="headerlink" title="6）回归测试"></a>6）回归测试</h4><p>作业：</p><p>1、软件测试可分为哪些类型？</p><p>2、V 模型的特点</p><p>3、W 模型的特点</p><p>4、区分什么是单元测试、集成测试、系统测试和验收测试</p><p>5、区分什么是黑盒测试、白盒测试和灰盒测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create secret docker-registry regcred \<br>    --docker-server=registry.cn-hangzhou.aliyuncs.com\<br>    --docker-username=turbomedia@qq.com \<br>    --docker-password=PassWord@123 \<br>    --namespace=testing-java<br>    <br>          nodeSelector:<br>        namespaces: &#123;&#123; .Values.image.namespace &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes kmem 内存泄漏问题解决方案</title>
    <link href="/2021/09/27/Kubernetes-kmem-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/09/27/Kubernetes-kmem-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-kmem-内存泄漏问题解决方案"><a href="#Kubernetes-kmem-内存泄漏问题解决方案" class="headerlink" title="Kubernetes kmem 内存泄漏问题解决方案"></a>Kubernetes kmem 内存泄漏问题解决方案</h1><span id="more"></span> <h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>当我们的 Kubernetes 集群运行日久后，有的 node 会出现无法再新建 pod 的情况，重启服务器后才可以恢复正常使用，比较典型的有如下情况：</p><p>在 查看 pod 的时候出现如下报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">applying cgroup … caused: mkdir ...no space left on device<br></code></pre></td></tr></table></figure><p>或如下报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unable to ensure pod container exists: ...cannot allocate memory<br></code></pre></td></tr></table></figure><p>或 node 内核日志出现如下报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SLUB: Unable to allocate memory on node -1<br></code></pre></td></tr></table></figure><p>当出现如上这种情况的时候，K8S 集群可能就存在内存泄露问题了，当创建的 pod 越多的时候，内存泄露的越多、越快。我们可以通过以下方式来查看集群是否存在内存泄漏：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/fs/cgroup/memory/kubepods/memory.kmem.slabinfo<br></code></pre></td></tr></table></figure><p>如果没有内存泄漏问题，返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat: /sys/fs/cgroup/memory/kubepods/memory.kmem.slabinfo: Input/output error<br></code></pre></td></tr></table></figure><p>如果存在内存泄漏问题，返回则如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">slabinfo - version: 2.1<br><span class="hljs-meta">#</span><span class="bash"> name            &lt;active_objs&gt; &lt;num_objs&gt; &lt;objsize&gt; &lt;objperslab&gt; &lt;pagesperslab&gt; : tunables &lt;<span class="hljs-built_in">limit</span>&gt; &lt;batchcount&gt; &lt;sharedfactor&gt; : slabdata &lt;active_slabs&gt; &lt;num_slabs&gt; &lt;sharedavail&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>🌈 事实上，绝大多数的 Kubernetes 都会存在该隐患，只不过在一般情况下内存泄漏发生的比较慢，所以难以察觉。一般性来说，即使 pod 百分百发生泄漏，也需要一个节点销毁过 3w + 的pod，才会导致 pod 无法继续创建，这种情况如果出现了，除了重启节点，就没有解决的方法了。虽说，这种情况发生的概率不大，但是当内存泄漏发生时，一个 pod 可能会泄漏 2个 memory cgroup 的数量配额，这是非常可怕的。并且由于某些服务本身的特性，高频率的 gc，往往也是有可能诱发内存泄漏产生的。</p></blockquote><h2 id="二、根因追溯"><a href="#二、根因追溯" class="headerlink" title="二、根因追溯"></a>二、根因追溯</h2><p>其实这个问题在 pingcap 的 <a href="https://en.pingcap.com/blog/try-to-fix-two-linux-kernel-bugs-while-testing-tidb-operator-in-k8s">文章</a> 和腾讯云的 <a href="https://tencentcloudcontainerteam.github.io/2018/12/29/cgroup-leaking/">官方修复</a> 都已经阐述过该问题。其主要产生的原因是，在 Linux 3.10.x 的内核版本中，其 cgroup 的 kmem account 特性（CONFIG_MEMCG_KMEM）存在内存泄露的 bug。如果开启了该特性，就会导致可分配的内存逐步减少，直到无法创建新的 pod 或节点出现异常。该问题在 4.x 的内核版本中已修复。</p><p>官方给出了该内核问题的解释:</p><ul><li><a href="https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672">https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672</a></li><li><a href="https://support.d2iq.com/s/article/Critical-Issue-KMEM-MSPH-2018-0006">https://support.d2iq.com/s/article/Critical-Issue-KMEM-MSPH-2018-0006</a></li></ul><p>事实上，3.10 内核已明确声明过 kmem 只是实验特性，但由于它是 cgroup 自带的扩展能力，所以 runc、docker、k8s 层面都进行了该功能的支持，也就默认打开了 kmem 属性，但是在兼容上面却并没有做好，所以当节点压力大，如频繁启动和停止容器时就会导致 cgroup memory leak。</p><p>该问题也被记录在了 docker 和 kubernetes 的官方 issue 中:</p><ul><li><a href="https://github.com/moby/moby/issues/29638">https://github.com/moby/moby/issues/29638</a></li><li><a href="https://github.com/kubernetes/kubernetes/issues/70324">https://github.com/kubernetes/kubernetes/issues/70324</a></li></ul><p>从 1.13 开始的版本，Docker 就默认启用了该功能，且无法关闭，只到 18.09.1 版本后才修复了该问题。</p><p>kubelet 的 vender 中引用了 runc，所以 kubelet 也就开启了 kmem，要解决该问题就需要修改源码重新编译。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="1、方案一-——-升级内核至-4-x"><a href="#1、方案一-——-升级内核至-4-x" class="headerlink" title="1、方案一 —— 升级内核至 4.x"></a>1、方案一 —— 升级内核至 4.x</h3><p>既然这个问题只会出现在 3.x，并且在 4.x 中解决了，那么直接将内核版本升级是最直接的方法，但是<strong>在产线环境中并不推荐</strong>。</p><h4 id="1）该方式的缺点"><a href="#1）该方式的缺点" class="headerlink" title="1）该方式的缺点:"></a>1）该方式的缺点:</h4><ul><li>需要升级所有的节点并重启，重启必然会导致 pod 漂移，所以一旦集群规模较大这个过程就会比较痛苦，且可能对业务产生直接的影响，需要事先争取业务部门同意</li><li>使用公有云环境时，内核版本的升级可能会与公有云vm环境产生冲突，需要云商有足够的评测，证明其可行性，这个过程就会很长，并且不一定能保证问题被解决</li><li>已有环境的代码在 3.x 运行正常，并不代表在 4.x 也能正常，在全量升级前要做较久的兼容性测试，周期很长。</li></ul><h4 id="2）实施方案"><a href="#2）实施方案" class="headerlink" title="2）实施方案"></a>2）实施方案</h4><blockquote><p><strong>在此仅记录通用的升级内核版本的方案（yum 方式）以供参考：</strong></p></blockquote><h5 id="1-查看当前内核版本"><a href="#1-查看当前内核版本" class="headerlink" title="1. 查看当前内核版本"></a>1. 查看当前内核版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# uname -r<br>3.10.0-862.el7.x86_64<br></code></pre></td></tr></table></figure><h5 id="2-安装-elrepo-的-yum-源"><a href="#2-安装-elrepo-的-yum-源" class="headerlink" title="2. 安装 elrepo 的 yum 源"></a>2. 安装 elrepo 的 yum 源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure><blockquote><p>安装完成后检查 <code>/boot/grub2/grub</code>.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次！</p></blockquote><h5 id="3-安装内核"><a href="#3-安装内核" class="headerlink" title="3. 安装内核"></a>3. 安装内核</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# yum --enablerepo=elrepo-kernel install -y kernel-lt<br></code></pre></td></tr></table></figure><blockquote><p>在 yum 的 elrepo 源中，有最新版本的内核，直接 yum 安装即可</p></blockquote><h5 id="4-设置开机从新内核启动"><a href="#4-设置开机从新内核启动" class="headerlink" title="4. 设置开机从新内核启动"></a>4. 设置开机从新内核启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# grub2-set-default 0<br></code></pre></td></tr></table></figure><h5 id="5-重启服务器"><a href="#5-重启服务器" class="headerlink" title="5. 重启服务器"></a>5. 重启服务器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# reboot<br></code></pre></td></tr></table></figure><h5 id="6-安装内核源文件（在升级完内核并重启机器后执行，也可以不用执行这一步。可选）"><a href="#6-安装内核源文件（在升级完内核并重启机器后执行，也可以不用执行这一步。可选）" class="headerlink" title="6. 安装内核源文件（在升级完内核并重启机器后执行，也可以不用执行这一步。可选）"></a>6. 安装内核源文件（在升级完内核并重启机器后执行，也可以不用执行这一步。可选）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# yum --enablerepo=elrepo-kernel install kernel-lt-devel-$(uname -r) kernel-lt-headers-$(uname -r)<br></code></pre></td></tr></table></figure><h5 id="7-再次查看内核版本"><a href="#7-再次查看内核版本" class="headerlink" title="7. 再次查看内核版本"></a>7. 再次查看内核版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# uname -r<br>4.4.180-2.el7.elrepo.x86_64<br></code></pre></td></tr></table></figure><h3 id="2、方案二-——-关闭-grub-引导中的-kmem-配置"><a href="#2、方案二-——-关闭-grub-引导中的-kmem-配置" class="headerlink" title="2、方案二 —— 关闭 grub 引导中的 kmem 配置"></a>2、方案二 —— 关闭 grub 引导中的 kmem 配置</h3><p>官方早已申明该特性为实验特性，并不推荐使用，事实上，只要不开启 kmem accounting 就不会发出 cgroup 泄漏问题。所以另一种解决方案就是开机引导时就直接关闭该功能，禁用 cgroup 的 kmem 特性。</p><h4 id="1）该方式的缺点-1"><a href="#1）该方式的缺点-1" class="headerlink" title="1）该方式的缺点:"></a>1）该方式的缺点:</h4><ul><li>仍然需要重启服务器，所以其实和升级内核性质差不多</li><li>这个方式并不能全局生效，有些服务器可能无法生效</li></ul><h4 id="2）实施方案-1"><a href="#2）实施方案-1" class="headerlink" title="2）实施方案"></a>2）实施方案</h4><blockquote><p><strong>在此仅记录方案以供参考：</strong></p></blockquote><h5 id="1-修改-etc-default-grub-，修改内容如下"><a href="#1-修改-etc-default-grub-，修改内容如下" class="headerlink" title="1. 修改 /etc/default/grub ，修改内容如下:"></a>1. 修改 <code>/etc/default/grub</code> ，修改内容如下:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GRUB_CMDLINE_LINUX=&quot;crashkernel=auto net.ifnames=0 biosdevname=0 intel_pstate=disable cgroup.memory=nokmem&quot;<br></code></pre></td></tr></table></figure><blockquote><p>设置 <code>cgroup.memory=nokmem</code>，禁用 kmem。</p></blockquote><h5 id="2-生成配置"><a href="#2-生成配置" class="headerlink" title="2. 生成配置"></a>2. 生成配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure><h5 id="3-重启服务器"><a href="#3-重启服务器" class="headerlink" title="3. 重启服务器"></a>3. 重启服务器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# reboot<br></code></pre></td></tr></table></figure><h5 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-master01 ~]# cat /sys/fs/cgroup/memory/kubepods/burstable/pod*/*/memory.kmem.slabinfo<br></code></pre></td></tr></table></figure><blockquote><p>无输出即可。</p></blockquote><h3 id="3、方案三-——-从使用方维度关闭-kmem-配置（推荐）"><a href="#3、方案三-——-从使用方维度关闭-kmem-配置（推荐）" class="headerlink" title="3、方案三 —— 从使用方维度关闭 kmem 配置（推荐）"></a>3、方案三 —— 从使用方维度关闭 kmem 配置（推荐）</h3><p>之前的两种方案都是从OS层面解决问题，但是归根结底，问题其实是出在使用方的兼容性上，所以从使用方的维度去禁用该特性是更加有效的，这也是官方推荐的方法，并也给出了解决方式。</p><h4 id="1）对于-Docker"><a href="#1）对于-Docker" class="headerlink" title="1）对于 Docker"></a>1）对于 Docker</h4><p>针对 Dokcer 既然官方已经解决了该兼容性问题，那么我们在安装 Docker 时安装高于 18.09.1 的版本即可（或升级）。</p><h4 id="2）对于-runc-官方针对这个问题做了比较灵活的修复，通过-BUILDTAGS-的方式重新编译即可，方法如下"><a href="#2）对于-runc-官方针对这个问题做了比较灵活的修复，通过-BUILDTAGS-的方式重新编译即可，方法如下" class="headerlink" title="2）对于 runc 官方针对这个问题做了比较灵活的修复，通过 BUILDTAGS 的方式重新编译即可，方法如下"></a>2）对于 runc 官方针对这个问题做了比较灵活的修复，通过 BUILDTAGS 的方式重新编译即可，方法如下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $GO_PATH/src/github.com/opencontainers/runc/<br>make BUILDTAGS=&quot;seccomp nokmem&quot;<br></code></pre></td></tr></table></figure><h4 id="3）对于-kubelet"><a href="#3）对于-kubelet" class="headerlink" title="3）对于 kubelet"></a>3）对于 kubelet</h4><p>针对 kubelet  ，官方 issue 给出的解决方式是自行重新编译 kubelet 来解决。</p><h5 id="1-v1-13-及以前版本的-kubelet"><a href="#1-v1-13-及以前版本的-kubelet" class="headerlink" title="1. v1.13 及以前版本的 kubelet"></a>1. v1.13 及以前版本的 kubelet</h5><p>修改源码，文件路径: <code>vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/memory.go</code>，替换以下两个函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EnableKernelMemoryAccounting</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setKernelMemory</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>, kernelMemoryLimit <span class="hljs-keyword">int64</span>)</span> <span class="hljs-title">error</span></span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后重新编译 kubelet：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make WHAT=cmd/kubelet GOFLAGS=-v GOGCFLAGS=&quot;-N -l&quot;<br></code></pre></td></tr></table></figure><h5 id="2-v1-14-及以后版本的-kubelet"><a href="#2-v1-14-及以后版本的-kubelet" class="headerlink" title="2. v1.14 及以后版本的 kubelet"></a>2. v1.14 及以后版本的 kubelet</h5><p>k8s v1.14 起也已经如 runc 一样支持通过 BUILDTAGS 的方式来禁止 kmem accounting 了，使用如下命令重新编译 kubelet：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make BUILDTAGS=&quot;nokmem&quot; WHAT=cmd/kubelet GOFLAGS=-v GOGCFLAGS=&quot;-N -l&quot;<br></code></pre></td></tr></table></figure><h2 id="四、实施记录"><a href="#四、实施记录" class="headerlink" title="四、实施记录"></a>四、实施记录</h2><h3 id="1、配置-go-环境"><a href="#1、配置-go-环境" class="headerlink" title="1、配置 go 环境"></a>1、配置 go 环境</h3><p>由于不同版本的 k8s 编译使用 go 版本是不同的，所以可以采用多版本控制的方式来配置 go 环境。具体可参考之前的文章: <a href="https://tareya.github.io/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/">golang 多版本管理工具 — g</a></p><h3 id="2、重新编译-runc"><a href="#2、重新编译-runc" class="headerlink" title="2、重新编译 runc"></a>2、重新编译 runc</h3><h4 id="1）下载-runc-源码"><a href="#1）下载-runc-源码" class="headerlink" title="1）下载 runc 源码"></a>1）下载 runc 源码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/opencontainers/runc &amp;&amp; \<br>cd runc/ &amp;&amp; \<br>git checkout v1.0.2<br></code></pre></td></tr></table></figure><blockquote><p>切换到最新tag</p></blockquote><h4 id="2）重新编译"><a href="#2）重新编译" class="headerlink" title="2）重新编译"></a>2）重新编译</h4><h5 id="1-安装编译组件"><a href="#1-安装编译组件" class="headerlink" title="1. 安装编译组件"></a>1. 安装编译组件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install libseccomp-devel -y <br></code></pre></td></tr></table></figure><h5 id="2-编译源码"><a href="#2-编译源码" class="headerlink" title="2. 编译源码"></a>2. 编译源码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make BUILDTAGS=&quot;seccomp nokmem&quot;<br></code></pre></td></tr></table></figure><blockquote><p>会在当前目录下生成新的 runc 二进制文件</p></blockquote><h3 id="3、重新编译-kubelet"><a href="#3、重新编译-kubelet" class="headerlink" title="3、重新编译 kubelet"></a>3、重新编译 kubelet</h3><h4 id="1）下载-Kubernetes-源码"><a href="#1）下载-Kubernetes-源码" class="headerlink" title="1）下载 Kubernetes 源码"></a>1）下载 Kubernetes 源码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/kubernetes/kubernetes.git &amp;&amp; \<br>cd kubernetes &amp;&amp; \<br>git checkout v1.18.18<br></code></pre></td></tr></table></figure><h4 id="2）重新编译-1"><a href="#2）重新编译-1" class="headerlink" title="2）重新编译"></a>2）重新编译</h4><blockquote><p>修改源码函数过程忽略</p></blockquote><h5 id="1-v1-18-18-版本"><a href="#1-v1-18-18-版本" class="headerlink" title="1. v1.18.18 版本"></a>1. v1.18.18 版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_GIT_TREE_STATE=clean KUBE_GIT_VERSION=v1.18.18 make BUILDTAGS=&quot;nokmem&quot; WHAT=cmd/kubelet GOFLAGS=-v GOGCFLAGS=&quot;-N -l&quot;<br></code></pre></td></tr></table></figure><blockquote><p><strong>参数说明:</strong></p><ul><li><code>KUBE_GIT_TREE_STATE</code> 和 <code>KUBE_GIT_VERSION</code> 两个参数用于设置版本，保持版本号干净；</li><li><code>BUILDTAGS</code> 设置 nokmem 用于关闭 kmem 的使用。</li></ul></blockquote><p>编译结果会生产在 <code>kubernetes/_output/local/bin/linux/amd64</code> 下，查看版本以验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">_output/local/bin/linux/amd64/kubelet --version<br></code></pre></td></tr></table></figure><p>正常返回值为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Kubernetes v1.18.18<br></code></pre></td></tr></table></figure><h5 id="2-v1-15-5-版本"><a href="#2-v1-15-5-版本" class="headerlink" title="2. v1.15.5 版本"></a>2. v1.15.5 版本</h5><blockquote><p>⚠️ <strong>关于编译 k8s 源码的 go 版本</strong></p><p>由于 v1.15.5 版本的 k8s 使用的 go 版本为 1.12.10，新版本的go 对于包管理的方式与老版本四不同的，而且 k8s 版本的vender 是不兼容的，需要根据 go.mod 里的需求来进行匹配，最直接的方式其实就是看官方给出的 kubectl 二进制包使用哪个版本的 go 编译的，再二次编译的时候使用相同版本即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl version --client<br></code></pre></td></tr></table></figure><p>其返回为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;15&quot;, GitVersion:&quot;v1.15.5&quot;, GitCommit:&quot;20c265fef0741dd71a66480e35bd69f18351daea&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-10-15T19:16:51Z&quot;, GoVersion:&quot;go1.12.10&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;<br></code></pre></td></tr></table></figure><p>可以看到使用的go 版本为 1.12.10 ，通过 g 来切换到对应的版本，具体如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g install 1.12.10<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Downloading 100% |███████████████| (122/122 MB, 1.149 MB/s) [1m46s:0s]         <br><br>Computing checksum with SHA256<br><br>Checksums matched<br><br>Now using go1.12.10<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_GIT_TREE_STATE=clean KUBE_GIT_VERSION=v1.15.5 make BUILDTAGS=&quot;nokmem&quot; WHAT=cmd/kubelet GOFLAGS=-v GOGCFLAGS=&quot;-N -l&quot;<br></code></pre></td></tr></table></figure><p>编译结果仍然会生产在 <code>kubernetes/_output/local/bin/linux/amd64</code> 下，查看版本以验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">_output/local/bin/linux/amd64/kubelet --version<br></code></pre></td></tr></table></figure><p>正常返回值为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Kubernetes v1.15.5<br></code></pre></td></tr></table></figure><h3 id="4、替换原有的-kubelet-和-docker-runc"><a href="#4、替换原有的-kubelet-和-docker-runc" class="headerlink" title="4、替换原有的 kubelet 和 docker-runc"></a>4、替换原有的 kubelet 和 docker-runc</h3><h4 id="1）批量备份原版本"><a href="#1）批量备份原版本" class="headerlink" title="1）批量备份原版本"></a>1）批量备份原版本</h4><blockquote><p>该过程可以批量进行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m file -a &quot;path=/tmp/bak state=directory owner=root group=root&quot;<br>ansible all -S -R root -m shell -a &quot;cp -a /usr/bin/runc /tmp/bak/&quot;<br>ansible all -S -R root -m shell -a &quot;cp -a /usr/bin/docker-runc /tmp/bak/&quot;<br>ansible all -S -R root -m shell -a &quot;cp -a /data/application/kubernetes/bin/kubelet /tmp/bak/&quot;<br></code></pre></td></tr></table></figure><h4 id="2）分发重新编译后的-runc-和-kubelet"><a href="#2）分发重新编译后的-runc-和-kubelet" class="headerlink" title="2）分发重新编译后的 runc 和 kubelet"></a>2）分发重新编译后的 runc 和 kubelet</h4><blockquote><p>该过程可以批量进行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m copy -a &quot;src=runc dest=/tmp/runc owner=root group=root mode=0755&quot; <br>ansible all -S -R root -m copy -a &quot;src=runc dest=/tmp/docker-runc owner=root group=root mode=0755&quot; <br>ansible all -S -R root -m copy -a &quot;src=kubelet dest=/tmp/kubelet owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h4 id="3）停止-docker-和-kubelet"><a href="#3）停止-docker-和-kubelet" class="headerlink" title="3）停止 docker 和 kubelet"></a>3）停止 docker 和 kubelet</h4><blockquote><p>该过程建议逐个节点进行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop kubelet<br>systemctl stop docker<br></code></pre></td></tr></table></figure><h4 id="3）替换重新编译的-runc-和-kubelet"><a href="#3）替换重新编译的-runc-和-kubelet" class="headerlink" title="3）替换重新编译的 runc 和 kubelet"></a>3）替换重新编译的 runc 和 kubelet</h4><blockquote><p>该过程建议逐个节点进行</p></blockquote><h5 id="1-替换-runc"><a href="#1-替换-runc" class="headerlink" title="1. 替换 runc"></a>1. 替换 runc</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/rm -f /usr/bin/runc /usr/bin/docker-runc &amp;&amp; \<br>/bin/mv /tmp/*runc /usr/bin/<br></code></pre></td></tr></table></figure><h5 id="2-替换-kubelet"><a href="#2-替换-kubelet" class="headerlink" title="2. 替换 kubelet"></a>2. 替换 kubelet</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/rm -f /data/applications/kubernetes/bin/kubelet &amp;&amp; \<br>/bin/mv -a /tmp/kubelet /data/applications/kubernetes/bin/<br></code></pre></td></tr></table></figure><h4 id="4）重启服务器验证"><a href="#4）重启服务器验证" class="headerlink" title="4）重启服务器验证"></a>4）重启服务器验证</h4><blockquote><p>检查 kmem 是否关闭需要将节点的 pod 杀掉重启或重启服务器，但是这一工作可以再新增节点的准备环境就完成</p></blockquote><h5 id="1-查看k8s-pod-kmem-内存-使用"><a href="#1-查看k8s-pod-kmem-内存-使用" class="headerlink" title="1. 查看k8s pod kmem 内存 使用"></a>1. 查看k8s pod kmem 内存 使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/fs/cgroup/memory/kubepods/burstable/memory.kmem.usage_in_bytes<br></code></pre></td></tr></table></figure><p>如果返回值为0，则表明 kmem 已关闭</p><h5 id="2-查看是否存在内存泄漏"><a href="#2-查看是否存在内存泄漏" class="headerlink" title="2. 查看是否存在内存泄漏"></a>2. 查看是否存在内存泄漏</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/fs/cgroup/memory/kubepods/memory.kmem.slabinfo<br></code></pre></td></tr></table></figure><p>如果返回值为 <code>Input/output error</code>，则也表明 kmem 已关闭</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 1.18（calico 网络）二进制包部署</title>
    <link href="/2021/09/22/Kubernetes-1-18%EF%BC%88calico-%E7%BD%91%E7%BB%9C%EF%BC%89-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/09/22/Kubernetes-1-18%EF%BC%88calico-%E7%BD%91%E7%BB%9C%EF%BC%89-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-1-18（calico-网络）二进制包部署"><a href="#Kubernetes-1-18（calico-网络）二进制包部署" class="headerlink" title="Kubernetes 1.18（calico 网络）二进制包部署"></a>Kubernetes 1.18（calico 网络）二进制包部署</h1><span id="more"></span><h2 id="一、基础信息"><a href="#一、基础信息" class="headerlink" title="一、基础信息"></a>一、基础信息</h2><h3 id="1、集群规划"><a href="#1、集群规划" class="headerlink" title="1、集群规划"></a>1、集群规划</h3><table><thead><tr><th>IP 地址</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.3.231</td><td>k8s-master01</td><td>master节点1、etcd 节点1、node节点2</td></tr><tr><td>192.168.3.232</td><td>k8s-master02</td><td>master节点2、etcd 节点2、node节点3</td></tr><tr><td>192.168.3.233</td><td>k8s-master03</td><td>master节点3、etcd 节点3、node节点4</td></tr><tr><td>192.168.3.234</td><td>k8s-node01</td><td>node 节点1</td></tr><tr><td>192.168.3.235</td><td>k8s-lb01</td><td>LoadBalance 1（VIP 192.168.3.230）</td></tr><tr><td>192.168.3.236</td><td>k8s-lb02</td><td>LoadBalance 2</td></tr></tbody></table><h3 id="2、版本信息"><a href="#2、版本信息" class="headerlink" title="2、版本信息"></a>2、版本信息</h3><table><thead><tr><th>组件名称</th><th>版本信息</th></tr></thead><tbody><tr><td>OS</td><td>CentOS 7.9</td></tr><tr><td>Docker</td><td>20.10.8</td></tr><tr><td>Kubernetes、kubectl</td><td>1.18.18</td></tr><tr><td>etcd</td><td>3.4.14</td></tr><tr><td>cni</td><td>0.6.0</td></tr><tr><td>Calico</td><td>3.19.2</td></tr></tbody></table><h3 id="3、路径标准"><a href="#3、路径标准" class="headerlink" title="3、路径标准"></a>3、路径标准</h3><h4 id="1）Kubernetes-master-节点"><a href="#1）Kubernetes-master-节点" class="headerlink" title="1）Kubernetes master 节点"></a>1）Kubernetes master 节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/applications/<br>├── etcd<br>│   ├── bin<br>│   ├── cfg<br>│   ├── data<br>│   ├── logs<br>│   ├── ssl<br>│   └── wal<br>└── kubernetes<br>    ├── bin<br>    ├── cfg<br>    ├── logs<br>    └── ssl<br></code></pre></td></tr></table></figure><h4 id="2）-Kubernetes-node-节点"><a href="#2）-Kubernetes-node-节点" class="headerlink" title="2） Kubernetes node 节点"></a>2） Kubernetes node 节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/applications/<br>└── kubernetes<br>    ├── bin<br>    ├── cfg<br>    ├── logs<br>    └── ssl<br></code></pre></td></tr></table></figure><h2 id="二、部署实施"><a href="#二、部署实施" class="headerlink" title="二、部署实施"></a>二、部署实施</h2><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><h4 id="1）系统环境"><a href="#1）系统环境" class="headerlink" title="1）系统环境"></a>1）系统环境</h4><h5 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1. 关闭防火墙"></a>1. 关闭防火墙</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld<br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><h5 id="2-关闭-selinux"><a href="#2-关闭-selinux" class="headerlink" title="2. 关闭 selinux"></a>2. 关闭 selinux</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">setenforce 0# 临时关闭<br>sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config# 永久关闭<br></code></pre></td></tr></table></figure><h5 id="3-关闭-swap"><a href="#3-关闭-swap" class="headerlink" title="3. 关闭 swap"></a>3. 关闭 swap</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 所有 K8S 节点执行</span><br>swapoff -a      # 临时关闭<br>sed -i &#x27;/swap/s/UUID/#UUID/g&#x27; /etc/fstab # 永久关闭<br></code></pre></td></tr></table></figure><h5 id="4-yum-镜像源处理"><a href="#4-yum-镜像源处理" class="headerlink" title="4. yum 镜像源处理"></a>4. yum 镜像源处理</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; \<br>curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo <br></code></pre></td></tr></table></figure><h5 id="5-安装必要依赖"><a href="#5-安装必要依赖" class="headerlink" title="5. 安装必要依赖"></a>5. 安装必要依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y conntrack ntpdate ntp jq iptables curl sysstat libseccomp wget lsof telnet<br></code></pre></td></tr></table></figure><h5 id="6-时间同步"><a href="#6-时间同步" class="headerlink" title="6. 时间同步"></a>6. 时间同步</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 所有 K8S 节点执行</span><br>ntpdate -u time1.aliyun.com # 时间同步<br>echo &quot;*/20 * * * * /usr/sbin/ntpdate -u time1.aliyun.com &gt;/dev/null &amp;&quot; &gt;&gt; /var/spool/cron/root  # 添加定时任务<br></code></pre></td></tr></table></figure><h5 id="7-设置系统时区"><a href="#7-设置系统时区" class="headerlink" title="7. 设置系统时区"></a>7. 设置系统时区</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 调整系统 TimeZone</span><br>timedatectl set-timezone Asia/Shanghai<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将当前的 UTC 时间写入硬件时钟</span><br>timedatectl set-local-rtc 0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启依赖于系统时间的服务</span><br>systemctl restart rsyslog<br>systemctl restart crond<br></code></pre></td></tr></table></figure><h5 id="8-内核参数优化"><a href="#8-内核参数优化" class="headerlink" title="8. 内核参数优化"></a>8. 内核参数优化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt; EOF<br>net.ipv4.ip_forward=1<br>net.ipv4.tcp_tw_recycle=0  #由于tcp_tw_recycle与kubernetes的NAT冲突，必须关闭！否则会导致服务不通。<br>vm.swappiness=0            #禁止使用 swap 空间，只有当系统 OOM 时才允许使用它<br>vm.overcommit_memory=1     #不检查物理内存是否够用<br>vm.panic_on_oom=0          #开启 OOM<br>fs.inotify.max_user_instances=8192<br>fs.inotify.max_user_watches=1048576<br>fs.file-max=52706963<br>fs.nr_open=52706963<br>net.ipv6.conf.all.disable_ipv6=1  #关闭不使用的ipv6协议栈，防止触发docker BUG.<br>EOF<br><br>sysctl -p /etc/sysctl.d/kubernetes.conf<br></code></pre></td></tr></table></figure><h5 id="9-关闭无用服务"><a href="#9-关闭无用服务" class="headerlink" title="9. 关闭无用服务"></a>9. 关闭无用服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop postfix.service <br>systemctl disable postfix.service<br></code></pre></td></tr></table></figure><h5 id="10-添加-host-dns-解析"><a href="#10-添加-host-dns-解析" class="headerlink" title="10. 添加 host / dns 解析"></a>10. 添加 host / dns 解析</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br>192.168.3.231    k8s-master01    etcd-01<br>192.168.3.232    k8s-master02    etcd-02<br>192.168.3.233    k8s-master03    etcd-03<br>192.168.3.234    k8s-node01<br>192.168.3.235    k8s-lb01<br>192.168.3.236    k8s-lb02<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2）进行节点间免密通信处理"><a href="#2）进行节点间免密通信处理" class="headerlink" title="2）进行节点间免密通信处理"></a>2）进行节点间免密通信处理</h4><h5 id="1-安装-sshpass"><a href="#1-安装-sshpass" class="headerlink" title="1. 安装 sshpass"></a>1. 安装 sshpass</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y sshpass<br></code></pre></td></tr></table></figure><h5 id="2-创建自动处理脚本ssh-copy-id-sh-，脚本如下"><a href="#2-创建自动处理脚本ssh-copy-id-sh-，脚本如下" class="headerlink" title="2. 创建自动处理脚本ssh-copy-id.sh ，脚本如下:"></a>2. 创建自动处理脚本<code>ssh-copy-id.sh</code> ，脚本如下:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以下变量根据实际情况自行修改</span><br>IPArray=(192.168.3.231 192.168.3.232 192.168.3.233 192.168.3.234 192.168.3.235 192.168.3.236)<br>Port=36022<br>TargetPass=Union@#JuYin2021<br>TargetUser=uniondrug<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建密钥</span><br>rm ~/.ssh/id_rsa* -f<br>ssh-keygen -t rsa -f ~/.ssh/id_rsa -N &quot;&quot; -q<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发公钥</span><br>for IP in $&#123;IPArray[@]&#125;<br>do<br><br>   sshpass -p &quot;$TargetPass&quot; ssh-copy-id -o &quot;StrictHostKeyChecking no&quot;  -i ~/.ssh/id_rsa.pub -p $Port $TargetUser@$IP &amp;&gt;/dev/null<br><br>done<br></code></pre></td></tr></table></figure><h5 id="3-运行脚本："><a href="#3-运行脚本：" class="headerlink" title="3. 运行脚本："></a>3. 运行脚本：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -x ssh-copy-id.sh<br></code></pre></td></tr></table></figure><h4 id="3）安装批管理工具"><a href="#3）安装批管理工具" class="headerlink" title="3）安装批管理工具"></a>3）安装批管理工具</h4><h5 id="1-安装-python3"><a href="#1-安装-python3" class="headerlink" title="1. 安装 python3"></a>1. 安装 python3</h5><p>创建自动处理脚本 <code>install-python3.py</code>，脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> os,sys<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exe_cmd</span>(<span class="hljs-params">cmd</span>):</span><br>    p = subprocess.Popen(cmd, shell=<span class="hljs-literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        next_line = p.stdout.readline()<br>        return_line = next_line.decode(<span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-string">&quot;ignore&quot;</span>)<br>        <span class="hljs-keyword">if</span> return_line == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> p.poll() != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(return_line)<br>    stdout, stderr = p.communicate()<br>    <span class="hljs-keyword">if</span> p.returncode != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;python 3.8.5 一键安装开始！&quot;</span>)<br>    backinfo = exe_cmd(<span class="hljs-string">&#x27;ping -c 1 -w 1 www.baidu.com&#x27;</span>)<br>    <span class="hljs-keyword">if</span> backinfo == <span class="hljs-literal">False</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;网络检测失败程序退出，请重新检测网络环境!&quot;</span>)<br>        sys.exit()<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;网络连接正常!&quot;</span>)<br>    yum_jc = exe_cmd(<span class="hljs-string">&#x27;yum list&#x27;</span>)<br>    <span class="hljs-keyword">if</span> yum_jc == <span class="hljs-literal">False</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;yum 不可用，请先手动配置yum安装!&quot;</span>)<br>        sys.exit()<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;yum安装检测可用!&#x27;</span>)<br><br>    exe_cmd(<span class="hljs-string">&quot;yum install gcc -y&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;yum install openssl-devel bizp2-devel expat-devel gdbm-devel readline-devel sqlite-devel libffi-devel -y&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;wget http://npm.taobao.org/mirrors/python/3.8.5/Python-3.8.5.tgz&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;tar -zxvf Python-3.8.5.tgz&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;mv Python-3.8.5 /usr/local/&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;rm -rf Python-3.8.5.tgz&quot;</span>)<br>    os.chdir(<span class="hljs-string">&#x27;/usr/local/Python-3.8.5&#x27;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;./configure&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;make&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;make install&quot;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;程序执行完成！输入python3 查看效果。&quot;</span>)<br>    exe_cmd(<span class="hljs-string">&quot;python3 -V&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="2-运行脚本"><a href="#2-运行脚本" class="headerlink" title="2. 运行脚本:"></a>2. 运行脚本:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python install-python3.py<br></code></pre></td></tr></table></figure><h5 id="3-安装-ansible"><a href="#3-安装-ansible" class="headerlink" title="3. 安装 ansible"></a>3. 安装 ansible</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple ansible==2.7.1<br></code></pre></td></tr></table></figure><h5 id="4-管理-ansible-配置"><a href="#4-管理-ansible-配置" class="headerlink" title="4. 管理 ansible 配置"></a>4. 管理 ansible 配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /etc/ansible/roles &amp;&amp; \<br>cat &gt; /etc/ansible/ansible.cfg &lt;&lt; EOF<br>[defaults]<br>inventory = /etc/ansible/hosts<br>remote_tmp = /tmp/.ansible/<br>local_tmp = ~/.ansible/tmp<br>remote_user = uniondrug<br>sudo_user = root<br>remote_port = 36022<br>host_key_checking = False  <br><br>roles_path = /etc/ansible/roles<br><br>EOF<br></code></pre></td></tr></table></figure><h5 id="5-管理-ansible-主机清单"><a href="#5-管理-ansible-主机清单" class="headerlink" title="5. 管理 ansible 主机清单"></a>5. 管理 ansible 主机清单</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; /etc/ansible/hosts &lt;&lt; EOF<br>[k8s-master01]<br>192.168.3.231 ansible_ssh_port=36022 ansible_ssh_user=uniondrug ansible_become_pass=&#x27;*UiiJC9&amp;#CzV@b0H&#x27;<br><br>[k8s-master02]<br>192.168.3.232 ansible_ssh_port=36022 ansible_ssh_user=uniondrug ansible_become_pass=&#x27;*UiiJC9&amp;#CzV@b0H&#x27;<br><br>[k8s-master03]<br>192.168.3.233 ansible_ssh_port=36022 ansible_ssh_user=uniondrug ansible_become_pass=&#x27;*UiiJC9&amp;#CzV@b0H&#x27;<br><br>[k8s-node01]<br>192.168.3.234 ansible_ssh_port=36022 ansible_ssh_user=uniondrug ansible_become_pass=&#x27;*UiiJC9&amp;#CzV@b0H&#x27;<br><br>[k8s-lb01]<br>192.168.3.235 ansible_ssh_port=36022 ansible_ssh_user=uniondrug ansible_become_pass=&#x27;*UiiJC9&amp;#CzV@b0H&#x27;<br><br>[k8s-lb02]<br>192.168.3.236 ansible_ssh_port=36022 ansible_ssh_user=uniondrug ansible_become_pass=&#x27;*UiiJC9&amp;#CzV@b0H&#x27;<br><br>[k8s-master:children]<br>k8s-master01<br>k8s-master02<br>k8s-master03<br><br>[k8s-node:children]<br>k8s-master01<br>k8s-master02<br>k8s-master03<br>k8s-node01<br><br>[k8s-nginx:children]<br>k8s-lb01<br>k8s-lb02<br>EOF<br></code></pre></td></tr></table></figure><h4 id="4）设置-rsyslogd-和-systemd-journald-日志持久化"><a href="#4）设置-rsyslogd-和-systemd-journald-日志持久化" class="headerlink" title="4）设置 rsyslogd 和 systemd journald 日志持久化"></a>4）设置 rsyslogd 和 systemd journald 日志持久化</h4><blockquote><p>🌈 systemd 的 journald 是 CentOS 7 缺省日志记录工具，它记录了所有系统、内核、Service Unit 的日志，相较于 systemd 本身，journald 的优势在于:</p><ul><li>可以记录到内存或文件系统；（默认记录到内存，对应的位置为 /run/log/journal）</li><li>可以限制占用的磁盘空间、保证磁盘剩余空间</li><li>可以限制日志的大小、保存的时间</li></ul><p>需要注意的是 <code>journald</code> 默认会将日志转发给 <code>rsyslog</code>，这会导致日志写了多份，``/var/log/messages<code> </code>中包含了太多无关日志，不方便后续查看，同时也影响系统性能，所以我们在这里提前做优化处理。</p></blockquote><h5 id="1-批量创建日志目录"><a href="#1-批量创建日志目录" class="headerlink" title="1. 批量创建日志目录"></a>1. 批量创建日志目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建日志持久化目录</span><br>ansible all -S -R root -m file -a &quot;path=/var/log/journal state=directory owner=root group=root mode=0755&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建 journald 子配置文件目录</span><br>ansible all -S -R root -m file -a &quot;path=/etc/systemd/journald.conf.d state=directory owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h5 id="2-创建-journald-持久化配置"><a href="#2-创建-journald-持久化配置" class="headerlink" title="2. 创建 journald 持久化配置"></a>2. 创建 journald 持久化配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; 99-prophet.conf &lt;&lt;EOF<br>[Journal]<br><span class="hljs-meta">#</span><span class="bash"> 持久化保存到磁盘</span><br>Storage=persistent<br>     <br><span class="hljs-meta">#</span><span class="bash"> 压缩历史日志</span><br>Compress=yes<br>     <br>SyncIntervalSec=5m<br>RateLimitInterval=30s<br>RateLimitBurst=1000<br>     <br><span class="hljs-meta">#</span><span class="bash"> 最大占用空间 10G</span><br>SystemMaxUse=10G<br>     <br><span class="hljs-meta">#</span><span class="bash"> 单日志文件最大 200M</span><br>SystemMaxFileSize=200M<br>     <br><span class="hljs-meta">#</span><span class="bash"> 日志保存时间 2 周</span><br>MaxRetentionSec=2week<br>     <br><span class="hljs-meta">#</span><span class="bash"> 不将日志转发到 syslog</span><br>ForwardToSyslog=no<br>EOF<br></code></pre></td></tr></table></figure><h5 id="3-分发配置文件"><a href="#3-分发配置文件" class="headerlink" title="3. 分发配置文件"></a>3. 分发配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m copy -a &quot;src=99-prophet.conf dest=/etc/systemd/journald.conf.d/99-prophet.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="4-批量重启-journald"><a href="#4-批量重启-journald" class="headerlink" title="4. 批量重启 journald"></a>4. 批量重启 journald</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m shell -a &quot;systemctl restart systemd-journald&quot;<br></code></pre></td></tr></table></figure><h4 id="5）创建-Kubernetes-相关目录"><a href="#5）创建-Kubernetes-相关目录" class="headerlink" title="5）创建 Kubernetes 相关目录"></a>5）创建 Kubernetes 相关目录</h4><h5 id="1-批量创建-etcd-集群相关目录"><a href="#1-批量创建-etcd-集群相关目录" class="headerlink" title="1. 批量创建 etcd 集群相关目录"></a>1. 批量创建 etcd 集群相关目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m shell -a &quot;mkdir -p /data/applications/etcd/&#123;bin,cfg,ssl,data,wal,logs&#125;&quot;<br></code></pre></td></tr></table></figure><h5 id="2-批量创建-K8S-集群相关目录"><a href="#2-批量创建-K8S-集群相关目录" class="headerlink" title="2. 批量创建 K8S 集群相关目录"></a>2. 批量创建 K8S 集群相关目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m shell -a &quot;mkdir -p /data/applications/kubernetes/&#123;bin,cfg,ssl,logs&#125;&quot;<br></code></pre></td></tr></table></figure><h5 id="3-批量创建-docker-相关目录"><a href="#3-批量创建-docker-相关目录" class="headerlink" title="3. 批量创建 docker 相关目录"></a>3. 批量创建 docker 相关目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m file -a &quot;path=/data/applications/docker state=directory owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h4 id="6）下载-kubernetes-组件"><a href="#6）下载-kubernetes-组件" class="headerlink" title="6）下载 kubernetes 组件"></a>6）下载 kubernetes 组件</h4><h5 id="1-下载解压-1-18-18-server-组件"><a href="#1-下载解压-1-18-18-server-组件" class="headerlink" title="1. 下载解压 1.18.18 server 组件"></a>1. 下载解压 1.18.18 server 组件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~ &amp;&amp; \<br>wget -c https://dl.k8s.io/v1.18.18/kubernetes-server-linux-amd64.tar.gz &amp;&amp; \<br>tar xf kubernetes-server-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h6 id="验证"><a href="#验证" class="headerlink" title="验证:"></a>验证:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/kubernetes/server/bin/kube-apiserver --version<br>~/kubernetes/server/bin/kube-controller-manager --version<br>~/kubernetes/server/bin/kube-scheduler --version<br></code></pre></td></tr></table></figure><p>正常返回都如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Kubernetes v1.18.18<br></code></pre></td></tr></table></figure><h5 id="2-下载解压-1-18-18-node-组件"><a href="#2-下载解压-1-18-18-node-组件" class="headerlink" title="2. 下载解压 1.18.18 node 组件"></a>2. 下载解压 1.18.18 node 组件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~ &amp;&amp; \<br>wget -c https://dl.k8s.io/v1.18.18/kubernetes-node-linux-amd64.tar.gz &amp;&amp; \<br>tar xf kubernetes-node-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h6 id="验证-1"><a href="#验证-1" class="headerlink" title="验证:"></a>验证:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/kubernetes/node/bin/kubelet --version<br>~/kubernetes/node/bin/kube-proxy --version<br></code></pre></td></tr></table></figure><p>正常返回都如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Kubernetes v1.18.18<br></code></pre></td></tr></table></figure><h4 id="7）分发-Kubernetes-组件"><a href="#7）分发-Kubernetes-组件" class="headerlink" title="7）分发 Kubernetes 组件"></a>7）分发 Kubernetes 组件</h4><h5 id="1-分发-server-组件至各-master-节点"><a href="#1-分发-server-组件至各-master-节点" class="headerlink" title="1. 分发 server 组件至各 master 节点"></a>1. 分发 server 组件至各 master 节点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 kube-apiserver</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/bin/kube-apiserver dest=/data/applications/kubernetes/bin/kube-apiserver owner=root group=root mode=0755&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 kube-controller-manager</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/bin/kube-controller-manager dest=/data/applications/kubernetes/bin/kube-controller-manager owner=root group=root mode=0755&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 kube-scheduler</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/bin/kube-scheduler dest=/data/applications/kubernetes/bin/kube-scheduler owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h5 id="2-分发-node-组件至各-node-节点（包括-master-节点）"><a href="#2-分发-node-组件至各-node-节点（包括-master-节点）" class="headerlink" title="2. 分发 node 组件至各 node 节点（包括 master 节点）"></a>2. 分发 node 组件至各 node 节点（包括 master 节点）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 kubelet</span><br>ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/node/bin/kubelet dest=/data/applications/kubernetes/bin/kubelet owner=root group=root mode=0755&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 kube-proxy</span><br>ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/node/bin/kube-proxy dest=/data/applications/kubernetes/bin/kube-proxy owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h4 id="8）安装-docker-环境"><a href="#8）安装-docker-环境" class="headerlink" title="8）安装 docker 环境"></a>8）安装 docker 环境</h4><blockquote><p>🚩 <strong>关于是否需要升级系统内核的情况说明</strong></p><p>CentOS 7.x 系统自带的 3.10.x 的内核存在与容器兼容性上的问题，会导致 Docker、Kubernetes 运行不稳定，比如：</p><ul><li>docker 1.13 版本后默认启用了 3.10 内核实验支持的 <code>kernel memory account</code> 功能且无法关闭，当节点压力大、频繁启动和停止容器时会导致 <code>cgroup memory leak</code>；</li><li>网络设备引用的计数泄漏会导致类似报错: <code>&quot;kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1&quot;</code></li></ul><p><strong>针对这种问题有如下几种方案:</strong></p><p>1.升级内核直 4.4.x 以上（已做兼容性处理）</p><p>2.手动编译内核，disable 掉 <code>CONFIG_MEMCG_KMEM</code> 特性</p><p>3.Docker 18.09.1 版本起已修复了该兼容性问题，所以也可以直接选择安装高版本的 Docker；但由于 kubelet 也会设置 kmem（它 vendor 了 runc），所以需要重新编译 kubelet 并指定 GOFLAGS=<code>&quot;-tags=nokmem&quot;</code></p><p>🌈 <strong>解决方案文档</strong></p><p>可看之前的博客，<a href="https://tareya.github.io/2021/09/27/Kubernetes-kmem-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Kubernetes kmem 内存泄漏问题解决方案</a></p><p>🌟 <strong>批量替换 runc</strong></p><p><a href="https://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/runc">已处理 kmem runc 二进制包下载</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m copy -a &quot;src=runc dest=/usr/bin/runc owner=root group=root mode=0755&quot;<br>ansible all -S -R root -m copy -a &quot;src=runc dest=/usr/bin/docker-runc owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure></blockquote><h5 id="1-自动安装升级脚本"><a href="#1-自动安装升级脚本" class="headerlink" title="1. 自动安装升级脚本"></a>1. 自动安装升级脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; /tmp/install-docker.sh &lt;&lt; END<br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>echo &quot;Docker 一键安装开始！&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 清理残留版本</span><br>yum remove -y docker \<br>docker-client \<br>docker-client-latest \<br>docker-common \<br>docker-latest \<br>docker-latest-logrotate \<br>docker-logrotate \<br>docker-engine &amp;&amp; \<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置存储库</span><br>yum install -y yum-utils \<br>  device-mapper-persistent-data \<br>  lvm2 wget&amp;&amp; \<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加 yum 源</span><br>wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo &amp;&amp; \<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改国内镜像源</span><br>sed -i &#x27;s#download.docker.com#mirrors.tuna.tsinghua.edu.cn/docker-ce#g&#x27; /etc/yum.repos.d/docker-ce.repo &amp;&amp; \<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装最新版本（也可以指定版本，如 docker-ce-18.09.5-3.el7）</span><br>yum install -y docker-ce &amp;&amp; \<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加开机自启</span><br>systemctl enable docker <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 生成 docker 镜像加速地址以及日志清理的配置文件。</span><br>if [ ! -d &quot;/etc/docker&quot; ]; then<br>mkdir /etc/docker<br>fi<br><br>cat &gt; /etc/docker/daemon.json &lt;&lt; EOF<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://5a8zducs.mirror.aliyuncs.com&quot;],<br>  &quot;log-driver&quot;:&quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;&#125;<br>&#125;<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动 docker (因为要更改 docker 数据目录，建议不直接启动)</span><br><span class="hljs-meta">#</span><span class="bash"> systemctl start docker</span><br><br>echo &quot;Docker 安装已完成!&quot;<br><br>docker version<br><br>END<br></code></pre></td></tr></table></figure><h5 id="2-新建-docker-systemd-unit-配置"><a href="#2-新建-docker-systemd-unit-配置" class="headerlink" title="2. 新建 docker systemd unit 配置"></a>2. 新建 docker systemd unit 配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; docker.service &lt;&lt; EOF<br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service containerd.service<br>Wants=network-online.target<br>Requires=docker.socket containerd.service<br><br>[Service]<br>Type=notify<br><span class="hljs-meta">#</span><span class="bash"> the default is not to use systemd <span class="hljs-keyword">for</span> cgroups because the delegate issues still</span><br><span class="hljs-meta">#</span><span class="bash"> exists and systemd currently does not support the cgroup feature <span class="hljs-built_in">set</span> required</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> containers run by docker</span><br>ExecStart=/usr/bin/dockerd -H fd:// --graph=/data/applications/docker --containerd=/run/containerd/containerd.sock<br>ExecReload=/bin/kill -s HUP $MAINPID<br>TimeoutSec=0<br>RestartSec=2<br>Restart=always<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Note that StartLimit* options were moved from <span class="hljs-string">&quot;Service&quot;</span> to <span class="hljs-string">&quot;Unit&quot;</span> <span class="hljs-keyword">in</span> systemd 229.</span><br><span class="hljs-meta">#</span><span class="bash"> Both the old, and new location are accepted by systemd 229 and up, so using the old location</span><br><span class="hljs-meta">#</span><span class="bash"> to make them work <span class="hljs-keyword">for</span> either version of systemd.</span><br>StartLimitBurst=3<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Note that StartLimitInterval was renamed to StartLimitIntervalSec <span class="hljs-keyword">in</span> systemd 230.</span><br><span class="hljs-meta">#</span><span class="bash"> Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span><br><span class="hljs-meta">#</span><span class="bash"> this option work <span class="hljs-keyword">for</span> either version of systemd.</span><br>StartLimitInterval=60s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> the kernel. We recommend using cgroups to <span class="hljs-keyword">do</span> container-local accounting.</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Comment TasksMax <span class="hljs-keyword">if</span> your systemd version does not support it.</span><br><span class="hljs-meta">#</span><span class="bash"> Only systemd 226 and above support this option.</span><br>TasksMax=infinity<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span> delegate yes so that systemd does not reset the cgroups of docker containers</span><br>Delegate=yes<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">kill</span> only the docker process, not all processes <span class="hljs-keyword">in</span> the cgroup</span><br>KillMode=process<br>OOMScoreAdjust=-500<br><br>[Install]<br>WantedBy=multi-user.target<br><br>EOF<br></code></pre></td></tr></table></figure><h5 id="3-分发-systemd-unit-配置"><a href="#3-分发-systemd-unit-配置" class="headerlink" title="3. 分发 systemd unit 配置"></a>3. 分发 systemd unit 配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m copy -a &quot;src=docker.service dest=/usr/lib/systemd/system/docker.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="4-批量启动-docker"><a href="#4-批量启动-docker" class="headerlink" title="4. 批量启动 docker"></a>4. 批量启动 docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible all -S -R root -m shell -a &quot;systemctl restart docker&quot;<br></code></pre></td></tr></table></figure><h5 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll /data/applications/docker/<br></code></pre></td></tr></table></figure><p>正常情况，存储目录已转移至<code>/data/applications/docker</code></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210930134233588.png" alt="image-20210930134233588"></p><h3 id="2、生成证书"><a href="#2、生成证书" class="headerlink" title="2、生成证书"></a>2、生成证书</h3><h4 id="1）前期准备"><a href="#1）前期准备" class="headerlink" title="1）前期准备"></a>1）前期准备</h4><h5 id="1-安装-cfssl-工具"><a href="#1-安装-cfssl-工具" class="headerlink" title="1. 安装 cfssl 工具"></a>1. 安装 cfssl 工具</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">export CFSSL_URL=&quot;https://pkg.cfssl.org/R1.2&quot;<br>wget &quot;$&#123;CFSSL_URL&#125;/cfssl_linux-amd64&quot; -O /usr/bin/cfssl<br>wget &quot;$&#123;CFSSL_URL&#125;/cfssljson_linux-amd64&quot; -O /usr/bin/cfssljson<br>wget &quot;$&#123;CFSSL_URL&#125;/cfssl-certinfo_linux-amd64&quot; -O /usr/bin/cfssl-certinfo<br>chmod +x /usr/bin/cfssl*<br></code></pre></td></tr></table></figure><h5 id="2-创建证书统一管理目录（由此分发至正式目录）"><a href="#2-创建证书统一管理目录（由此分发至正式目录）" class="headerlink" title="2. 创建证书统一管理目录（由此分发至正式目录）"></a>2. 创建证书统一管理目录（由此分发至正式目录）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/tls<br></code></pre></td></tr></table></figure><h5 id="3-创建-k8s-相关组件、配置文件统一管理目录（由此分发至正式目录）"><a href="#3-创建-k8s-相关组件、配置文件统一管理目录（由此分发至正式目录）" class="headerlink" title="3. 创建 k8s 相关组件、配置文件统一管理目录（由此分发至正式目录）"></a>3. 创建 k8s 相关组件、配置文件统一管理目录（由此分发至正式目录）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/kubernetes/&#123;server,node,client,etcd,network,prometheus,nginx&#125;/&#123;cfg,systemd&#125;<br></code></pre></td></tr></table></figure><h4 id="2）生成-ca-根证书"><a href="#2）生成-ca-根证书" class="headerlink" title="2）生成 ca 根证书"></a>2）生成 ca 根证书</h4><blockquote><p>🚩 <strong>提示：</strong></p><p>ca 证书是集群所有节点可以共享的，所以只需要创建一个 ca 证书即可，后续创建的所有证书都由其签发。</p></blockquote><h5 id="1-创建-ca-配置文件"><a href="#1-创建-ca-配置文件" class="headerlink" title="1. 创建 ca 配置文件"></a>1. 创建 ca 配置文件</h5><blockquote><p>🌈  ca 配置文件用于配置根证书的使用场景（profile） 和具体参数 (usages，过期时间、服务端认证、客户端认证、加密等)，后续在签名其它证书时需要指定特定场景。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">cat &gt; ~/tls/ca-config.json &lt;&lt;EOF<br>&#123;<br>  <span class="hljs-attr">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-attr">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>signing</td><td>表示该证书可用于签名其他证书，生成的 ca.pem 证书中 CA=TRUE</td></tr><tr><td>server auth</td><td>表示 client 可以通过该证书对 server 提供的证书进行验证</td></tr><tr><td>client auth</td><td>表示 server 可以通过该证书对 client 提供的证书进行验证</td></tr><tr><td>expiry</td><td>过期时间，默认情况下为 8760h，即1年</td></tr></tbody></table><h5 id="2-创建-ca-证书签名请求文件"><a href="#2-创建-ca-证书签名请求文件" class="headerlink" title="2. 创建 ca 证书签名请求文件"></a>2. 创建 ca 证书签名请求文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/tls/ca-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;kubernetes&quot;,<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: 2048<br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;k8s&quot;,<br>      &quot;OU&quot;: &quot;system&quot;<br>    &#125;<br>  ],<br>  &quot;ca&quot;: &#123;<br>      &quot;expiry&quot;: &quot;87600h&quot;<br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-1"><a href="#配置参数说明-1" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>CN</td><td>Common Name，kube-apiserver 会从证书中提取该字段作为请求的用户名（User Name）、浏览器使用该字段验证网站的合法性</td></tr><tr><td>C</td><td>Country，国家</td></tr><tr><td>L</td><td>Locality，地区，城市</td></tr><tr><td>ST</td><td>State，洲，省</td></tr><tr><td>O</td><td>Organization，组织名称，公司名称，kube-apiserver 会从证书中提取该字段作为用户所属的组（Group）</td></tr><tr><td>OU</td><td>Organization Unit，组织单位名称，公司部门</td></tr></tbody></table><blockquote><p>⚠️ <strong>注意:</strong></p><p>kube-apiserver 会提取 Group 和 User 作为 K8S RBAC 授权的用户标识，所以 CN 和 O 的命名和重要，建议命名要规范。</p></blockquote><h5 id="3-生成-CA-证书和私钥"><a href="#3-生成-CA-证书和私钥" class="headerlink" title="3. 生成 CA 证书和私钥"></a>3. 生成 CA 证书和私钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/tls &amp;&amp; \<br>cfssl gencert -initca ca-csr.json | cfssljson -bare ca<br></code></pre></td></tr></table></figure><h5 id="4-证书文件说明"><a href="#4-证书文件说明" class="headerlink" title="4. 证书文件说明"></a>4. 证书文件说明</h5><table><thead><tr><th>证书路径</th><th>描述</th></tr></thead><tbody><tr><td>~/tls/ca.csr</td><td>ca 证书的签名请求文件</td></tr><tr><td>~/tls/ca.pem</td><td>ca 证书文件，即后面 K8S 组件使用的 RootCA</td></tr><tr><td>~/tls/ca-key.pem</td><td>ca 证书的私钥文件</td></tr></tbody></table><h5 id="5-批量分发证书文件"><a href="#5-批量分发证书文件" class="headerlink" title="5. 批量分发证书文件"></a>5. 批量分发证书文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 ca 证书（k8s 所有节点、etcd 所有节点）</span><br>ansible k8s-node -S -R root -m copy -a &quot;src=~/tls/ca.pem dest=/data/applications/kubernetes/ssl/ca.pem owner=root group=root mode=0644&quot; <br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/ca.pem dest=/data/applications/etcd/ssl/ca.pem owner=root group=root mode=0644&quot; <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 ca 证书私钥，为了安全性，权限设置他人无权限（k8s master节点、etcd 所有节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/ca-key.pem  dest=/data/applications/kubernetes/ssl/ca-key.pem owner=root group=root mode=0600&quot; <br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/ca-key.pem  dest=/data/applications/etcd/ssl/ca-key.pem owner=root group=root mode=0600&quot; <br></code></pre></td></tr></table></figure><h4 id="3）生成-server-证书"><a href="#3）生成-server-证书" class="headerlink" title="3）生成 server 证书"></a>3）生成 server 证书</h4><blockquote><p>🚩 <strong>提示:</strong></p><p>此处生成的 server 证书同时可提供 etcd 集群和 kube-apiserver 使用（可以根据实际情况拆分成2套）</p></blockquote><h5 id="1-创建-server-书签名请求文件"><a href="#1-创建-server-书签名请求文件" class="headerlink" title="1. 创建 server 书签名请求文件"></a>1. 创建 server 书签名请求文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/tls/server-csr.json &lt;&lt;EOF<br>&#123;<br>    &quot;CN&quot;: &quot;kubernetes&quot;,<br>    &quot;hosts&quot;: [<br>      &quot;10.0.0.1&quot;,<br>      &quot;127.0.0.1&quot;,<br>      &quot;192.168.3.230&quot;,<br>      &quot;192.168.3.231&quot;,<br>      &quot;192.168.3.232&quot;,<br>      &quot;192.168.3.233&quot;,<br>      &quot;k8s-master01&quot;,<br>      &quot;k8s-master02&quot;,<br>      &quot;k8s-master03&quot;,<br>      &quot;etcd-01&quot;,<br>      &quot;etcd-02&quot;,<br>      &quot;etcd-03&quot;,<br>      &quot;kubernetes&quot;,<br>      &quot;kubernetes.default&quot;,<br>      &quot;kubernetes.default.svc&quot;,<br>      &quot;kubernetes.default.svc.cluster&quot;,<br>      &quot;kubernetes.default.svc.cluster.local&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;rsa&quot;,<br>        &quot;size&quot;: 2048<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;BeiJing&quot;,<br>            &quot;ST&quot;: &quot;BeiJing&quot;,<br>            &quot;O&quot;: &quot;k8s&quot;,<br>            &quot;OU&quot;: &quot;System&quot;<br>        &#125;<br>    ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>如果 hosts 字段的值不为空就需要指定具体授权的 IP 和 域名列表，这里列出了 vip、apiserver 节点 ip、kubernetes 服务 ip 和域名</p><p>server 证书后续会被 etcd 集群和 K8S master 节点使用，所以要将 etcd、master 节点和 kube-apiserver 的vip都填上，同时还有service 网络的首IP也需要填上。(一般是 kube-apiserver 指定 <code>--service-cluster-ip-range</code> 的网段的第一个IP，如 10.0.0.1)</p><hr><p>这里需要注意的是，如果使用域名的话，域名最后的字符不能是 . ，如不能为 <code>kubernetes.default.svc.cluster.local.</code> 。虽然按常规dns解析的话最后带 . 表示根域，但是在 k8s 中会导致解析失败，提示 <code>x509: cannot parse dnsName &quot;kubernetes.default.svc.cluster.local.&quot;</code></p><p>另外，如果要使用非 <code>cluster.local</code> 的域名，如 <code>tareya.cn</code>，则需要修改域名列表中最后两个域名为 <code>kubernetes.default.svc.tareya</code> 和 <code>kubernetes.default.svc.tareya.cn</code></p></blockquote><h5 id="2-生成-server-证书和私钥"><a href="#2-生成-server-证书和私钥" class="headerlink" title="2. 生成 server 证书和私钥"></a>2. 生成 server 证书和私钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/tls &amp;&amp; \<br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server<br></code></pre></td></tr></table></figure><h5 id="3-证书文件说明"><a href="#3-证书文件说明" class="headerlink" title="3. 证书文件说明"></a>3. 证书文件说明</h5><table><thead><tr><th>证书路径</th><th>描述</th></tr></thead><tbody><tr><td>~/tls/server.csr</td><td>server 证书的签名请求文件</td></tr><tr><td>~/tls/server.pem</td><td>server 证书，为 etcd、kube-apiserver 使用</td></tr><tr><td>~/tls/server-key.pem</td><td>server 证书的私钥文件</td></tr></tbody></table><h5 id="4-批量分发证书文件"><a href="#4-批量分发证书文件" class="headerlink" title="4. 批量分发证书文件"></a>4. 批量分发证书文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 server 证书（k8s master节点、etcd 所有节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/server.pem dest=/data/applications/kubernetes/ssl/server.pem owner=root group=root mode=0644&quot; <br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/server.pem dest=/data/applications/etcd/ssl/server.pem owner=root group=root mode=0644&quot; <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 server 证书私钥，为了安全性，权限设置他人无权限（k8s master节点、etcd 所有节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/server-key.pem dest=/data/applications/kubernetes/ssl/server-key.pem owner=root group=root mode=0600&quot; <br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/server-key.pem dest=/data/applications/etcd/ssl/server-key.pem owner=root group=root mode=0600&quot; <br></code></pre></td></tr></table></figure><h4 id="4）生成-etcd-证书"><a href="#4）生成-etcd-证书" class="headerlink" title="4）生成 etcd 证书"></a>4）生成 etcd 证书</h4><h4 id="5）生成-admin-证书"><a href="#5）生成-admin-证书" class="headerlink" title="5）生成 admin 证书"></a>5）生成 admin 证书</h4><blockquote><p>🚩 <strong>提示:</strong></p><p>k8s 的客户端工具（如 kubectl）和 apiserver 之间是通过 https安全端口进行通信，apiserver 会对客户端提供的证书进行认证、授权。客户端工具通过 kubeconfig 文件来进行鉴权。</p><p>kubectl 作为整个集群的管理工具，需要被授予最高的权限，因此这里我们创建具有最高权限的 admin 证书。</p></blockquote><h5 id="1-创建-admin-证书签名请求文件"><a href="#1-创建-admin-证书签名请求文件" class="headerlink" title="1. 创建 admin 证书签名请求文件"></a>1. 创建 admin 证书签名请求文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/tls/admin-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;admin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: 2048<br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;system:masters&quot;,<br>      &quot;OU&quot;: &quot;system&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-2"><a href="#配置参数说明-2" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><blockquote><p>这里将 O 设置为 <code>system:masters</code>，kube-apiserver 会提取该字段，将请求的 Group 设置为 <code>system:masters</code>；</p><p>Kube-apiserver 预定义的 ClusterRoleBinding <code>cluster-admin</code> 将 Group <code>system:masters</code> 和 ClusterRole <code>cluster-admin</code> 绑定，该 Role 授权访问所有 API 的权限；</p><p>该证书只会被 kubectl 当作 client 证书使用，因此 hosts 字段不需要限定IP、域名，设置为空即可。</p></blockquote><h5 id="2-生成-admin-证书和私钥"><a href="#2-生成-admin-证书和私钥" class="headerlink" title="2. 生成 admin 证书和私钥"></a>2. 生成 admin 证书和私钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/tls &amp;&amp; \<br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin<br></code></pre></td></tr></table></figure><h5 id="3-证书文件说明-1"><a href="#3-证书文件说明-1" class="headerlink" title="3. 证书文件说明"></a>3. 证书文件说明</h5><table><thead><tr><th>证书路径</th><th>描述</th></tr></thead><tbody><tr><td>~/tls/admin.csr</td><td>admin 证书的签名请求文件</td></tr><tr><td>~/tls/admin.pem</td><td>admin 证书，kubectl 和其他 k8s 客户端使用</td></tr><tr><td>~/tls/admin-key.pem</td><td>admin 证书的私钥文件</td></tr></tbody></table><h5 id="4-批量分发证书文件-1"><a href="#4-批量分发证书文件-1" class="headerlink" title="4. 批量分发证书文件"></a>4. 批量分发证书文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 admin 证书（k8s master节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/admin.pem dest=/data/applications/kubernetes/ssl/admin.pem owner=root group=root mode=0644&quot; <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 admin 证书私钥，为了安全性，权限设置他人无权限（k8s master节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/admin-key.pem dest=/data/applications/kubernetes/ssl/admin-key.pem owner=root group=root mode=0600&quot; <br></code></pre></td></tr></table></figure><h4 id="6）生成-metrics-server-证书"><a href="#6）生成-metrics-server-证书" class="headerlink" title="6）生成 metrics-server 证书"></a>6）生成 metrics-server 证书</h4><h5 id="1-创建-metrics-server-证书签名请求文件"><a href="#1-创建-metrics-server-证书签名请求文件" class="headerlink" title="1. 创建 metrics-server 证书签名请求文件"></a>1. 创建 metrics-server 证书签名请求文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/tls/metrics-server-csr.json  &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;system:metrics-server&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: 2048<br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;k8s&quot;,<br>      &quot;OU&quot;: &quot;system&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-3"><a href="#配置参数说明-3" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><blockquote><p>这里 CN 设定的名称，需要与后续 metrics-server 的 <code>--requestheader-allowed-names</code> 参数配置保持一致，否则会被 metrics-server 拒绝访问，</p><p>后续需要对 metrics-server 进行专门的 RBAC 授权，建议 CN 配置和 RBAC 授权用户保持一致。</p></blockquote><h5 id="2-生成-metrics-server-证书和私钥"><a href="#2-生成-metrics-server-证书和私钥" class="headerlink" title="2. 生成 metrics-server 证书和私钥"></a>2. 生成 metrics-server 证书和私钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/tls &amp;&amp; \<br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes metrics-server-csr.json | cfssljson -bare metrics-server<br></code></pre></td></tr></table></figure><h5 id="3-证书文件说明-2"><a href="#3-证书文件说明-2" class="headerlink" title="3. 证书文件说明"></a>3. 证书文件说明</h5><table><thead><tr><th>证书路径</th><th>描述</th></tr></thead><tbody><tr><td>~/tls/metrics-server.csr</td><td>metrics-server 证书的签名请求文件</td></tr><tr><td>~/tls/metrics-server.pem</td><td>metrics-server 证书，metrics-server 使用</td></tr><tr><td>~/tls/metrics-server-key.pem</td><td>metrics-server 证书的私钥文件</td></tr></tbody></table><h5 id="4-批量分发证书文件-2"><a href="#4-批量分发证书文件-2" class="headerlink" title="4. 批量分发证书文件"></a>4. 批量分发证书文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 metrics-server 证书（k8s master节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/metrics-server.pem dest=/data/applications/kubernetes/ssl/metrics-server.pem owner=root group=root mode=0644&quot; <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 metrics-server 证书私钥，为了安全性，权限设置他人无权限（k8s master节点）</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/tls/metrics-server-key.pem dest=/data/applications/kubernetes/ssl/metrics-server-key.pem owner=root group=root mode=0600&quot; <br></code></pre></td></tr></table></figure><h4 id="7）生成-kube-proxy-证书"><a href="#7）生成-kube-proxy-证书" class="headerlink" title="7）生成 kube-proxy 证书"></a>7）生成 kube-proxy 证书</h4><h5 id="1-创建-kube-proxy-证书签名请求文件"><a href="#1-创建-kube-proxy-证书签名请求文件" class="headerlink" title="1. 创建 kube-proxy 证书签名请求文件"></a>1. 创建 kube-proxy 证书签名请求文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/tls/kube-proxy-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;system:kube-proxy&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: 2048<br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;k8s&quot;,<br>      &quot;OU&quot;: &quot;system&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-4"><a href="#配置参数说明-4" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><blockquote><p>这里将 CN 设置为 <code>system:kube-proxy</code>，kube-apiserver 会提取该字段，将请求的 User设置为 <code>system:kube-proxy</code>；</p><p>Kube-apiserver 预定义的 ClusterRoleBinding <code>system:node-proxier</code> 将 User <code>system:kube-proxy</code> 和 ClusterRole<code>system:node-proxier </code> 绑定，该 Role 授予了调用 kube-apiserver Proxy 相关 API 的权限；</p><p>该证书只会被 kube-proxy 当作 client 证书使用，因此 hosts 字段不需要限定IP、域名，设置为空即可。</p></blockquote><h5 id="2-生成-kube-proxy-证书和私钥"><a href="#2-生成-kube-proxy-证书和私钥" class="headerlink" title="2. 生成 kube-proxy 证书和私钥"></a>2. 生成 kube-proxy 证书和私钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/tls &amp;&amp; \<br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy<br></code></pre></td></tr></table></figure><h5 id="3-证书文件说明-3"><a href="#3-证书文件说明-3" class="headerlink" title="3. 证书文件说明"></a>3. 证书文件说明</h5><table><thead><tr><th>证书路径</th><th>描述</th></tr></thead><tbody><tr><td>~/tls/kube-proxy.csr</td><td>kube-proxy 证书的签名请求文件</td></tr><tr><td>~/tls/kube-proxy.pem</td><td>kube-proxy 证书，kube-proxy 使用</td></tr><tr><td>~/tls/kube-proxy-key.pem</td><td>Kube-proxy 证书的私钥文件</td></tr></tbody></table><h5 id="4-批量分发证书文件-3"><a href="#4-批量分发证书文件-3" class="headerlink" title="4. 批量分发证书文件"></a>4. 批量分发证书文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 kube-proxy 证书（k8s 所有节点）</span><br>ansible k8s-node -S -R root -m copy -a &quot;src=~/tls/kube-proxy.pem dest=/data/applications/kubernetes/ssl/kube-proxy.pem owner=root group=root mode=0644&quot; <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 kube-proxy 证书私钥，为了安全性，权限设置他人无权限（k8s 所有节点）</span><br>ansible k8s-node -S -R root -m copy -a &quot;src=~/tls/kube-proxy-key.pem dest=/data/applications/kubernetes/ssl/kube-proxy-key.pem owner=root group=root mode=0600&quot; <br></code></pre></td></tr></table></figure><h3 id="2、部署-kubectl-命令行工具"><a href="#2、部署-kubectl-命令行工具" class="headerlink" title="2、部署 kubectl 命令行工具"></a>2、部署 kubectl 命令行工具</h3><h4 id="1）下载-kubectl-二进制文件"><a href="#1）下载-kubectl-二进制文件" class="headerlink" title="1）下载 kubectl 二进制文件"></a>1）下载 kubectl 二进制文件</h4><blockquote><p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.18.md">官方下载地址</a></p><p>虽然 kubectl 是具备向下兼容能力的，但是在选择版本时还是建议尽量与 K8S 版本保持一致，如本文 K8S 版本为 1.18.18，故 kubectl 版本也选用 1.18.18 。下载二进制时，注意平台匹配。</p></blockquote><h5 id="1-下载解压-1-18-18-kubectl-二进制包"><a href="#1-下载解压-1-18-18-kubectl-二进制包" class="headerlink" title="1. 下载解压 1.18.18 kubectl 二进制包"></a>1. 下载解压 1.18.18 kubectl 二进制包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~ &amp;&amp; \<br>wget -c https://dl.k8s.io/v1.18.18/kubernetes-client-linux-amd64.tar.gz &amp;&amp; \<br>tar xf kubernetes-client-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd kubernetes/client/bin/ &amp;&amp; ./kubectl version<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;18&quot;, GitVersion:&quot;v1.18.18&quot;, GitCommit:&quot;6f6ce59dc8fefde25a3ba0ef0047f4ec6662ef24&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-04-15T03:31:30Z&quot;, GoVersion:&quot;go1.13.15&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="2）分发-kubectl-至各-master-节点"><a href="#2）分发-kubectl-至各-master-节点" class="headerlink" title="2）分发 kubectl 至各 master 节点"></a>2）分发 kubectl 至各 master 节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/client/bin/kubectl dest=/usr/bin/kubectl owner=root<br>group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h4 id="3）创建-kubeconfig"><a href="#3）创建-kubeconfig" class="headerlink" title="3）创建 kubeconfig"></a>3）创建 kubeconfig</h4><h5 id="1-设置集群参数"><a href="#1-设置集群参数" class="headerlink" title="1. 设置集群参数"></a>1. 设置集群参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-cluster kubernetes \<br>  --certificate-authority=/data/applications/kubernetes/ssl/ca.pem \<br>  --embed-certs=true \<br>  --server=$&#123;KUBE_APISERVER&#125; \<br>  --kubeconfig=$HOME/.kube/kubectl.kubeconfig<br></code></pre></td></tr></table></figure><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明:"></a>参数说明:</h6><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>–certificate-authority</td><td>验证 kube-apiserver 证书的根证书</td></tr><tr><td>–embed-certs=true</td><td>将证书内容加密嵌入kubeconfig中，如果设为 false 则通过指向的文件路径读取文件</td></tr><tr><td>–server</td><td>apiserver 的加密通信地址</td></tr><tr><td>–kubeconfig</td><td>kubeconfig 生成路径</td></tr></tbody></table><h5 id="2-设置客户端认证参数"><a href="#2-设置客户端认证参数" class="headerlink" title="2. 设置客户端认证参数"></a>2. 设置客户端认证参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-credentials admin \<br>  --client-certificate=/data/applications/kubernetes/ssl/admin.pem \<br>  --client-key=/data/applications/kubernetes/ssl/admin-key.pem \<br>  --embed-certs=true \<br>  --kubeconfig=$HOME/.kube/kubectl.kubeconfig<br></code></pre></td></tr></table></figure><h6 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明:"></a>参数说明:</h6><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>–client-certificate</td><td>连接 apiserver 时，认证使用的客户端证书</td></tr><tr><td>–client-key</td><td>连接 apiserver 时，认证使用的证书私钥</td></tr></tbody></table><h5 id="3-设置上下文参数"><a href="#3-设置上下文参数" class="headerlink" title="3. 设置上下文参数"></a>3. 设置上下文参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-context kubernetes \<br> --cluster=kubernetes \<br> --user=admin \<br> --kubeconfig=$HOME/.kube/kubectl.kubeconfig<br></code></pre></td></tr></table></figure><h5 id="4-设置默认上下文"><a href="#4-设置默认上下文" class="headerlink" title="4. 设置默认上下文"></a>4. 设置默认上下文</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config use-context kubernetes --kubeconfig=$HOME/.kube/kubectl.kubeconfig<br></code></pre></td></tr></table></figure><h4 id="4）分发-kubeconfig-至各-master-节点"><a href="#4）分发-kubeconfig-至各-master-节点" class="headerlink" title="4）分发 kubeconfig 至各 master 节点"></a>4）分发 kubeconfig 至各 master 节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> root 用户</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=$HOME/.kube/kubectl.kubeconfig dest=/root/.kube/kubectl.kubeconfig owner=root group=root mode=0600&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 普通用户</span><br>ansible k8s-master -m copy -a &quot;src=$HOME/.kube/kubectl.kubeconfig dest=$HOME/.kube/kubectl.kubeconfig mode=0600&quot;<br></code></pre></td></tr></table></figure><h3 id="3、部署-etcd-集群"><a href="#3、部署-etcd-集群" class="headerlink" title="3、部署 etcd 集群"></a>3、部署 etcd 集群</h3><p><strong>基础组件介绍 —— etcd:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-etcd/#Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-etcd">传送门</a></p><blockquote><p>🌈 etcd 从 3.4 版本开始会自动通过配置文件加载环境变量参数，EnvironmentFile 文件中有的参数不需要在 systems unit 的 ExecStart 中添加了，可以更加的精简化配置，所以我们这里我们选用 3.4 版本的 etcd。方便后期统一的配置管理。</p></blockquote><h4 id="1）下载-etcd-二进制文件"><a href="#1）下载-etcd-二进制文件" class="headerlink" title="1）下载 etcd 二进制文件"></a>1）下载 etcd 二进制文件</h4><blockquote><p><a href="https://github.com/etcd-io/etcd/releases">官方下载地址</a></p></blockquote><h5 id="1-下载解压-3-4-14-etcd-客户端和服务端二进制包"><a href="#1-下载解压-3-4-14-etcd-客户端和服务端二进制包" class="headerlink" title="1. 下载解压 3.4.14 etcd 客户端和服务端二进制包"></a>1. 下载解压 3.4.14 etcd 客户端和服务端二进制包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~ &amp;&amp; \<br>wget -c https://github.com/coreos/etcd/releases/download/v3.4.14/etcd-v3.4.14-linux-amd64.tar.gz &amp;&amp; \<br>tar xf etcd-v3.4.14-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2-验证-1"><a href="#2-验证-1" class="headerlink" title="2. 验证"></a>2. 验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd etcd-v3.4.14-linux-amd64 &amp;&amp; ./etcdctl version<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">etcdctl version: 3.4.14<br>API version: 3.4<br></code></pre></td></tr></table></figure><h4 id="2）分发-etcd-至各-master-节点"><a href="#2）分发-etcd-至各-master-节点" class="headerlink" title="2）分发 etcd 至各 master 节点"></a>2）分发 etcd 至各 master 节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 etcd server 端</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/etcd-v3.4.14-linux-amd64/etcd dest=/data/applications/etcd/bin/etcd owner=root group=root mode=0755&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 etcd client 工具</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/etcd-v3.4.14-linux-amd64/etcdctl dest=/data/applications/etcd/bin/etcdctl owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h4 id="3）创建配置文件"><a href="#3）创建配置文件" class="headerlink" title="3）创建配置文件"></a>3）创建配置文件</h4><h5 id="1-新建-etcd-配置文件-etcd-conf"><a href="#1-新建-etcd-配置文件-etcd-conf" class="headerlink" title="1. 新建 etcd 配置文件 etcd.conf"></a>1. 新建 etcd 配置文件 <code>etcd.conf</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/kubernetes/etcd/cfg/etcd.conf &lt;&lt; EOF<br><span class="hljs-meta">#</span><span class="bash">[Member]</span><br>ETCD_NAME=&quot;etcd-1&quot;<br>ETCD_DATA_DIR=&quot;/data/applications/etcd/data&quot;<br>ETCD_WAL_DIR=&quot;/data/applications/etcd/wal&quot;<br>ETCD_LISTEN_PEER_URLS=&quot;https://192.168.3.231:2380&quot;<br>ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.3.231:2379,http://127.0.0.1:2379&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.3.231:2380&quot;<br>ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.3.231:2379&quot;<br>ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.3.231:2380,etcd-2=https://192.168.3.232:2380,etcd-3=https://192.168.3.233:2380&quot;<br>ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster-0&quot;<br>ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;<br>ETCD_ENABLE_V2=&quot;true&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">[Security]</span><br>ETCD_CERT_FILE=&quot;/data/applications/etcd/ssl/server.pem&quot;<br>ETCD_KEY_FILE=&quot;/data/applications/etcd/ssl/server-key.pem&quot;<br>ETCD_TRUSTED_CA_FILE=&quot;/data/applications/etcd/ssl/ca.pem&quot;<br>ETCD_CLIENT_CERT_AUTH=&quot;true&quot;<br>ETCD_PEER_CERT_FILE=&quot;/data/applications/etcd/ssl/server.pem&quot;<br>ETCD_PEER_KEY_FILE=&quot;/data/applications/etcd/ssl/server-key.pem&quot;<br>ETCD_PEER_TRUSTED_CA_FILE=&quot;/data/applications/etcd/ssl/ca.pem&quot;<br>ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;<br><br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>etcd 每个节点的配置不同，根据实际情况进行修改，可以通过 jinja 模版渲染。</p><p>3.4 版本的 etcd 默认使用的是 v3 版本的API，并默认关闭了 v2 版本API的使用，如果要继续使用的话，可以在配置文件中设置 <code>ETCD_ENABLE_V2=&quot;true&quot;</code>，或者在使用命令行时设置 <code>ETCDCTL_API</code> 环境变量，如<code>ETCDCTL_API=2 etcdctl</code>。</p><p>flannel 操作 etcd 使用的是 v2 的API， kubernetes 操作 etcd 使用的 v3 的API，calico 3.x 版本也使用 v3 的 API。</p></blockquote><h5 id="2-新建-systemd-unit-配置-etcd-service"><a href="#2-新建-systemd-unit-配置-etcd-service" class="headerlink" title="2. 新建 systemd unit 配置 etcd.service"></a>2. 新建 systemd unit 配置 <code>etcd.service</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/kubernetes/etcd/systemd/etcd.service &lt;&lt; EOF<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br>   <br>[Service]<br>Type=notify<br>EnvironmentFile=/data/applications/etcd/cfg/etcd.conf<br>ExecStart=/data/applications/etcd/bin/etcd \<br>--auto-compaction-mode=periodic \<br>--auto-compaction-retention=1 \<br>--max-request-bytes=33554432 \<br>--quota-backend-bytes=6442450944 \<br>--heartbeat-interval=250 \<br>--election-timeout=2000 \<br>--logger=zap<br>Restart=on-failure<br>RestartSec=5<br>LimitNOFILE=65536<br>   <br>[Install]<br>WantedBy=multi-user.target<br><br>EOF<br></code></pre></td></tr></table></figure><h6 id="重要配置参数说明"><a href="#重要配置参数说明" class="headerlink" title="重要配置参数说明:"></a>重要配置参数说明:</h6><table><thead><tr><th>重要参数</th><th>参数说明</th></tr></thead><tbody><tr><td>EnvironmentFile</td><td>环境变量配置文件，使用改方式可以以加载变量的形式制作统一的 unit 模版</td></tr><tr><td>–cert-file / –key-file</td><td>etcd server 与 client 通信时使用的证书和私钥</td></tr><tr><td>–trusted-ca-file</td><td>签发 client 证书的 ca 证书，用于验证 client 证书；</td></tr><tr><td>–peer-cert-file / –peer-key-file</td><td>etcd peer 之间通信使用的证书和私钥；</td></tr><tr><td>–peer-trusted-ca-file</td><td>签发 peer 证书的 ca 证书，用于验证 peer 证书，可以和 client 证书使用同一套，也可以使用不同的；</td></tr></tbody></table><h4 id="4）分发配置文件"><a href="#4）分发配置文件" class="headerlink" title="4）分发配置文件"></a>4）分发配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分发 systemd unit 配置文件</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/etcd/systemd/etcd.service dest=/usr/lib/systemd/system/etcd.service owner=root group=root mode=0644&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 etcd 配置文件</span><br>ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/etcd/cfg/etcd.conf dest=/data/applications/etcd/cfg/etcd.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h4 id="5）启动集群"><a href="#5）启动集群" class="headerlink" title="5）启动集群"></a>5）启动集群</h4><h5 id="1-批量启动-etcd"><a href="#1-批量启动-etcd" class="headerlink" title="1. 批量启动 etcd"></a>1. 批量启动 etcd</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl enable etcd.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl start etcd.service&quot;<br></code></pre></td></tr></table></figure><h5 id="2-验证服务状态"><a href="#2-验证服务状态" class="headerlink" title="2. 验证服务状态"></a>2. 验证服务状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m shell -a &quot;ETCDCTL_API=3 /data/applications/etcd/bin/etcdctl  --endpoints=http://127.0.0.1:2379 --cacert=/data/applications/etcd/ssl/ca.pem --cert=/data/applications/etcd/ssl/server.pem --key=/data/applications/etcd/ssl/server-key.pem endpoint health&quot;<br></code></pre></td></tr></table></figure><h6 id="正常返回结果"><a href="#正常返回结果" class="headerlink" title="正常返回结果:"></a>正常返回结果:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 均返回 healthy 时，集群状态未正常</span><br>192.168.3.233 | CHANGED | rc=0 &gt;&gt;<br>http://127.0.0.1:2379 is healthy: successfully committed proposal: took = 2.802973ms<br><br>192.168.3.231 | CHANGED | rc=0 &gt;&gt;<br>http://127.0.0.1:2379 is healthy: successfully committed proposal: took = 2.426585ms<br><br>192.168.3.232 | CHANGED | rc=0 &gt;&gt;<br>http://127.0.0.1:2379 is healthy: successfully committed proposal: took = 3.491516ms<br></code></pre></td></tr></table></figure><h5 id="3-查看集群-leader"><a href="#3-查看集群-leader" class="headerlink" title="3. 查看集群 leader"></a>3. 查看集群 leader</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ETCDCTL_API=3 /data/applications/etcd/bin/etcdctl -w table  --endpoints=https://192.168.3.231:2379,https://192.168.3.232:2379,https://192.168.3.233:2379 --cacert=/data/applications/etcd/ssl/ca.pem --cert=/data/applications/etcd/ssl/server.pem --key=/data/applications/etcd/ssl/server-key.pem endpoint status<br></code></pre></td></tr></table></figure><h6 id="正常返回结果-1"><a href="#正常返回结果-1" class="headerlink" title="正常返回结果:"></a>正常返回结果:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 当前 etcd raft leader 为 192.168.3.231</span><br><br>+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|          ENDPOINT          |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://192.168.3.231:2379 | e7d52edc2101ab48 |  3.4.14 |   20 kB |      true |      false |         5 |         28 |                 28 |        |<br>| https://192.168.3.232:2379 | a191bc097f41b735 |  3.4.14 |   20 kB |     false |      false |         5 |         28 |                 28 |        |<br>| https://192.168.3.233:2379 | 307ec828b6239718 |  3.4.14 |   20 kB |     false |      false |         5 |         28 |                 28 |        |<br>+----------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><h3 id="4、部署四层代理-HA-环境"><a href="#4、部署四层代理-HA-环境" class="headerlink" title="4、部署四层代理 HA 环境"></a>4、部署四层代理 HA 环境</h3><blockquote><p>🚩 <strong>用 nginx 4 层透明代理来做负载均衡的功能</strong></p><p>搭建nginx+keepalived环境，对外提供一个统一的vip地址，后端对接多个 apiserver 实例，nginx 对它们做健康检查和负载均衡。这里我们使用的是 openresty，其实质仍然是 nginx，只是封装了 lua。<code>kubelet</code>、<code>kube-proxy</code>、<code>controller-manager</code>、<code>scheduler</code> 通过vip地址访问 kube-apiserver，从而实现 kube-apiserver 的高可用；</p><p>master 节点的 <code>kube-controller-manager</code>、<code>kube-schedule</code>r 是多实例(3个)部署，自身即存在高可用机制，所以只要有一个实例正常，就可以保证高可用。</p></blockquote><h4 id="1）安装-openresty"><a href="#1）安装-openresty" class="headerlink" title="1）安装 openresty"></a>1）安装 openresty</h4><blockquote><p>🚩 以下操作在所有 lb 节点进行</p></blockquote><h5 id="1-安装依赖库"><a href="#1-安装依赖库" class="headerlink" title="1. 安装依赖库"></a>1. 安装依赖库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y curl git gcc glibc gcc-c++ openssl-devel pcre-devel yum-utils<br></code></pre></td></tr></table></figure><h5 id="2-安装openresty以及openssl-依赖"><a href="#2-安装openresty以及openssl-依赖" class="headerlink" title="2. 安装openresty以及openssl 依赖"></a>2. 安装openresty以及openssl 依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo &amp;&amp; \<br>yum install -y openresty openresty-openssl111-devel<br></code></pre></td></tr></table></figure><h5 id="3-软链至标准目录"><a href="#3-软链至标准目录" class="headerlink" title="3. 软链至标准目录"></a>3. 软链至标准目录</h5><p>使用yum安装，默认安装路径在<code>/usr/local/openresty</code> ，将其软链到标准目录 <code>/data/applications</code>，方便统一管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/local/openresty /data/applications<br></code></pre></td></tr></table></figure><p>为了使用习惯，可以将 openresty 别名为 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/bin/openresty /usr/bin/nginx<br></code></pre></td></tr></table></figure><h5 id="4-文件句柄优化"><a href="#4-文件句柄优化" class="headerlink" title="4. 文件句柄优化"></a>4. 文件句柄优化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ulimit -n 65525<br></code></pre></td></tr></table></figure><p>编辑文件 <code>/etc/security/limits.conf </code>，追加以下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 文件底部添加下面四行内容</span><br>* soft nofile 65525<br>* hard nofile 65525<br>* soft nproc 65525<br>* hard nproc 65525<br></code></pre></td></tr></table></figure><h4 id="2）创建-nginx-stream-配置文件"><a href="#2）创建-nginx-stream-配置文件" class="headerlink" title="2）创建 nginx stream 配置文件"></a>2）创建 nginx stream 配置文件</h4><blockquote><p>🚩 以下操作在 k8s-master01 进行</p></blockquote><h5 id="1-编辑配置文件"><a href="#1-编辑配置文件" class="headerlink" title="1. 编辑配置文件"></a>1. 编辑配置文件</h5><p>新建文件 <code>~/kubernetes/nginx/cfg/kube-nginx.conf</code> ，文件内容如下:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span> <span class="hljs-number">2</span>;<br> <br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">65525</span>;<br>&#125;<br> <br><span class="hljs-section">stream</span> &#123;<br>    <span class="hljs-attribute">upstream</span> apiserver &#123;<br>        <span class="hljs-attribute">hash</span> $remote_addr consistent;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">172.16.60.231:6443</span>        max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">172.16.60.232:6443</span>        max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">172.16.60.233:6443</span>        max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;<br>    &#125;<br> <br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">8443</span>;<br>        <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">1s</span>;<br>        <span class="hljs-attribute">proxy_pass</span> apiserver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-分发配置文件"><a href="#2-分发配置文件" class="headerlink" title="2. 分发配置文件"></a>2. 分发配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-nginx -S -R root -m copy -a &quot;src=~/kubernetes/nginx/cfg/kube-nginx.conf dest=/data/applications/openresty/nginx/conf/kube-nginx.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h4 id="3）创建-nginx-systemd-unit-文件"><a href="#3）创建-nginx-systemd-unit-文件" class="headerlink" title="3）创建 nginx systemd unit 文件"></a>3）创建 nginx systemd unit 文件</h4><blockquote><p>🚩 以下操作在 k8s-master01 进行</p></blockquote><h5 id="1-编辑配置文件-1"><a href="#1-编辑配置文件-1" class="headerlink" title="1. 编辑配置文件"></a>1. 编辑配置文件</h5><p>新建文件 <code>~/kubernetes/nginx/systemd/kube-nginx.service</code> ，文件内容如下:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[Unit]<br>Description=kube-<span class="hljs-attribute">apiserver</span> nginx proxy<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br> <br>[Service]<br>Type=forking<br>ExecStartPre=/usr/bin/nginx -c /data/applications/openresty/nginx/conf/kube-nginx.conf -p /data/applications/openresty/nginx -t<br>ExecStart=/usr/bin/nginx -c /data/applications/openresty/nginx/conf/kube-nginx.conf -p /data/applications/openresty/nginx<br>ExecReload=/usr/bin/nginx -c data/applications/openresty/nginx/conf/kube-nginx.conf -p /data/applications/openresty/nginx -s reload<br>PrivateTmp=<span class="hljs-literal">true</span><br>Restart=always<br>RestartSec=<span class="hljs-number">5</span><br>StartLimitInterval=<span class="hljs-number">0</span><br>LimitNOFILE=<span class="hljs-number">65536</span><br> <br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="2-分发配置文件-1"><a href="#2-分发配置文件-1" class="headerlink" title="2. 分发配置文件"></a>2. 分发配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-nginx -S -R root -m copy -a &quot;src=~/kubernetes/nginx/systemd/kube-nginx.service dest=/usr/lib/systemd/system/kube-nginx.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h4 id="4）启动-nginx-代理"><a href="#4）启动-nginx-代理" class="headerlink" title="4）启动 nginx 代理"></a>4）启动 nginx 代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-nginx -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-nginx -S -R root -m shell -a &quot;systemctl enable kube-nginx.service&quot;<br>ansible k8s-nginx -S -R root -m shell -a &quot;systemctl start kube-nginx.service&quot;<br>ansible k8s-nginx -S -R root -m shell -a &quot;systemctl status kube-nginx.service&quot;<br></code></pre></td></tr></table></figure><h4 id="5）安装-keepalived"><a href="#5）安装-keepalived" class="headerlink" title="5）安装 keepalived"></a>5）安装 keepalived</h4><blockquote><p>🚩 以下操作在所有 lb 节点进行</p></blockquote><h5 id="1-配置内核参数"><a href="#1-配置内核参数" class="headerlink" title="1. 配置内核参数"></a>1. 配置内核参数</h5><p>编辑文件 <code>/etc/sysctl.d/kubernetes.conf </code>，追加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.ip_nonlocal_bind = 1# 开启允许绑定非本机IP<br>net.ipv4.conf.lo.arp_announce = 2# arp 相关配置(lvs 的 DR、TUN 模式需要)<br>net.ipv4.conf.all.arp_announce = 2<br>net.ipv4.conf.lo.arp_ignore = 1<br>net.ipv4.conf.all.arp_ignore = 1<br></code></pre></td></tr></table></figure><h6 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置:"></a>加载配置:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -p /etc/sysctl.d/kubernetes.conf <br></code></pre></td></tr></table></figure><h5 id="2-部署-keepalived"><a href="#2-部署-keepalived" class="headerlink" title="2. 部署 keepalived"></a>2. 部署 keepalived</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y keepalived<br></code></pre></td></tr></table></figure><h5 id="3-配置-keepalived-独立日志"><a href="#3-配置-keepalived-独立日志" class="headerlink" title="3. 配置 keepalived 独立日志"></a>3. 配置 keepalived 独立日志</h5><p>文件路径: <code>/etc/sysconfig/keepalived</code>，修改 <code>KEEPALIVED_OPTIONS</code> 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/&quot;-D&quot;/&quot;-D -d -S 0&quot;/g&#x27; /etc/sysconfig/keepalived <br></code></pre></td></tr></table></figure><p>文件路径: <code>/etc/rsyslog.conf </code>，末尾追加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;local0.*                                                 /var/log/keepalived.log&quot; &gt;&gt; /etc/rsyslog.conf<br></code></pre></td></tr></table></figure><h5 id="4-配置-keepalived-日志切割"><a href="#4-配置-keepalived-日志切割" class="headerlink" title="4. 配置 keepalived 日志切割"></a>4. 配置 keepalived 日志切割</h5><p>文件路径: <code>/etc/logrotate.d/keepalived</code>，编辑以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">/var/log/keepalived.log &#123;<br>    daily<br>    missingok<br>    dateext<br>    rotate 7<br>    create 0600 root root<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-重启-rsyslog-服务"><a href="#5-重启-rsyslog-服务" class="headerlink" title="5. 重启 rsyslog 服务"></a>5. 重启 rsyslog 服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart rsyslog.service <br></code></pre></td></tr></table></figure><h4 id="6）创建-keepalived-配置文件"><a href="#6）创建-keepalived-配置文件" class="headerlink" title="6）创建 keepalived 配置文件"></a>6）创建 keepalived 配置文件</h4><h5 id="1-编辑-master-配置文件"><a href="#1-编辑-master-配置文件" class="headerlink" title="1. 编辑 master 配置文件"></a>1. 编辑 master 配置文件</h5><p>新建文件 <code>~/kubernetes/nginx/cfg/keepalived-master.conf</code> ，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived    <br>   <br>global_defs &#123;<br>router_id master<br><br>    script_user root<br>    enable_script_security  <br>&#125;<br>   <br>vrrp_script chk_http_port &#123;     <br>    script &quot;/etc/keepalived/chk_nginx.sh&quot; <br>    interval 2                  <br>    weight -5                  <br>    fall 2              <br>    rise 1                 <br>&#125;<br>   <br>vrrp_instance VI_1 &#123;   <br>    state MASTER   <br>    interface eth0     <br>    virtual_router_id 51        <br>    priority 101               <br>    advert_int 1                <br>    authentication &#123;           <br>        auth_type PASS         <br>        auth_pass kubernetes         <br>    &#125;<br>    <br>    virtual_ipaddress &#123;       <br>        192.168.3.230 dev eth0 label eth0:1<br>    &#125;<br>  <br>track_script &#123;                     <br>   chk_http_port                   <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-编辑-backup-配置文件"><a href="#2-编辑-backup-配置文件" class="headerlink" title="2. 编辑 backup 配置文件"></a>2. 编辑 backup 配置文件</h5><p>新建文件 <code>~/kubernetes/nginx/cfg/keepalived-backup.conf</code> ，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">! Configuration File for keepalived    <br>   <br>global_defs &#123;<br>router_id backup<br><br>    script_user root<br>    enable_script_security  <br>&#125;<br>   <br>vrrp_script chk_http_port &#123;     <br>    script &quot;/etc/keepalived/chk_nginx.sh&quot; <br>    interval 2                  <br>    weight -5                  <br>    fall 2              <br>    rise 1                 <br>&#125;<br>   <br>vrrp_instance VI_1 &#123;   <br>    state BACKUP   <br>    interface eth0     <br>    virtual_router_id 50     <br>    priority 99               <br>    advert_int 1                <br>    authentication &#123;           <br>        auth_type PASS         <br>        auth_pass kubernetes         <br>    &#125;<br>    <br>    virtual_ipaddress &#123;       <br>        192.168.3.230 dev eth0 label eth0:1<br>    &#125;<br>  <br>track_script &#123;                     <br>   chk_http_port                   <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-编辑-nginx-监控脚本"><a href="#3-编辑-nginx-监控脚本" class="headerlink" title="3. 编辑 nginx 监控脚本"></a>3. 编辑 nginx 监控脚本</h5><p>新建文件 <code>~/kubernetes/nginx/cfg/chk_nginx.sh</code> ，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>counter=$(ps -ef|grep -w kube-nginx|grep -v grep|wc -l)<br>if [ &quot;$&#123;counter&#125;&quot; = &quot;0&quot; ]; then<br>    systemctl restart kube-nginx<br>    sleep 2<br>    counter=$(ps -ef|grep kube-nginx|grep -v grep|wc -l)<br>    if [ &quot;$&#123;counter&#125;&quot; = &quot;0&quot; ]; then<br>        systemctl stop keepalived<br>    fi<br>fi<br></code></pre></td></tr></table></figure><h5 id="4-分发配置文件"><a href="#4-分发配置文件" class="headerlink" title="4. 分发配置文件"></a>4. 分发配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> master 配置文件分发到 lb01</span><br>ansible k8s-lb01 -S -R root -m copy -a &quot;src=~/kubernetes/nginx/cfg/keepalived-master.conf dest=/etc/keepalived/keepalived.conf owner=root group=root mode=0644&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> backend 配置文件分发到 lb02</span><br>ansible k8s-lb02 -S -R root -m copy -a &quot;src=~/kubernetes/nginx/cfg/keepalived-backup.conf dest=/etc/keepalived/keepalived.conf owner=root group=root mode=0644&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 监控脚本分发到 2个节点</span><br>ansible k8s-nginx -S -R root -m copy -a &quot;src=~/kubernetes/nginx/cfg/chk_nginx.sh dest=/etc/keepalived/chk_nginx.sh owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h4 id="7）创建-keepalived-systemd-unit-配置文件"><a href="#7）创建-keepalived-systemd-unit-配置文件" class="headerlink" title="7）创建 keepalived systemd unit 配置文件"></a>7）创建 keepalived systemd unit 配置文件</h4><h5 id="1-编辑配置文件-2"><a href="#1-编辑配置文件-2" class="headerlink" title="1. 编辑配置文件"></a>1. 编辑配置文件</h5><p>新建文件 <code>~/kubernetes/nginx/systemd/keepalived.service</code> ，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=LVS and VRRP High Availability Monitor<br>After=syslog.target network-online.target<br><br>[Service]<br>Type=forking<br>PIDFile=/var/run/keepalived.pid<br>KillMode=process<br>EnvironmentFile=-/etc/sysconfig/keepalived<br>ExecStart=/usr/sbin/keepalived $KEEPALIVED_OPTIONS<br>ExecReload=/bin/kill -HUP $MAINPID<br><br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="2-分发配置文件-2"><a href="#2-分发配置文件-2" class="headerlink" title="2. 分发配置文件"></a>2. 分发配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-nginx -S -R root -m copy -a &quot;src=~/kubernetes/nginx/systemd/keepalived.service dest=/usr/lib/systemd/system/keepalived.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h4 id="8）启动-keepalived-HA"><a href="#8）启动-keepalived-HA" class="headerlink" title="8）启动 keepalived HA"></a>8）启动 keepalived HA</h4><h5 id="1-批量启动并加入开机自启"><a href="#1-批量启动并加入开机自启" class="headerlink" title="1. 批量启动并加入开机自启"></a>1. 批量启动并加入开机自启</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-nginx -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-nginx -S -R root -m shell -a &quot;systemctl enable keepalived.service&quot;<br>ansible k8s-nginx -S -R root -m shell -a &quot;systemctl start keepalived.service&quot;<br>ansible k8s-nginx -S -R root -m shell -a &quot;systemctl status keepalived.service&quot;<br></code></pre></td></tr></table></figure><h5 id="2-验证-vip-状态"><a href="#2-验证-vip-状态" class="headerlink" title="2. 验证 vip 状态"></a>2. 验证 vip 状态</h5><blockquote><p>🚩 由于 master 节点的的权重高，所以 vip 默认会起在 master 节点上，在 k8s-lb01 执行如下命令:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifconfig <br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500<br>        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255<br>        ether 02:42:86:cf:0e:ee  txqueuelen 0  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.3.235  netmask 255.255.255.0  broadcast 192.168.3.255<br>        ether 00:50:56:b0:b7:c1  txqueuelen 1000  (Ethernet)<br>        RX packets 4501804  bytes 410256599 (391.2 MiB)<br>        RX errors 0  dropped 259641  overruns 0  frame 0<br>        TX packets 51487  bytes 4490345 (4.2 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>eth0:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.3.230  netmask 255.255.255.255  broadcast 0.0.0.0<br>        ether 00:50:56:b0:b7:c1  txqueuelen 1000  (Ethernet)<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br></code></pre></td></tr></table></figure><blockquote><p>由于我们给 vip 绑定做了别名，故这边可以看到 <code>eth0:1</code> 的虚拟网卡，证明 vip 的确起在 master 节点上了</p></blockquote><h3 id="5、部署-Kubernetes-master-节点"><a href="#5、部署-Kubernetes-master-节点" class="headerlink" title="5、部署 Kubernetes master 节点"></a>5、部署 Kubernetes master 节点</h3><blockquote><p>🌈 <strong>关于 master 节点</strong></p><p>部署在 master 节点的必要组件有 <code>kube-apiserver</code>、<code>kube-scheduler</code> 和 <code>kube-controller-manager</code> ，均为多实例模式运行。</p></blockquote><h4 id="1）部署-kube-apiserver"><a href="#1）部署-kube-apiserver" class="headerlink" title="1）部署 kube-apiserver"></a>1）部署 kube-apiserver</h4><p><strong>基础组件介绍 —— kube-apiserver:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-apiserver/">传送门</a></p><blockquote><p>🚩 这里部署的是一个三实例的 kube-apiserver 集群环境，kube-apiserver 是无状态的，通过 nginx 四层代理进行访问，并对外提供统一的 vip 地址，以此来保证服务的可用性。</p><p><strong>以下的操作都是在 k8s-master01 上进行，然后再通过批管理工具分发至其他节点进行统一管理。</strong></p></blockquote><h5 id="1-创建-TLS-Bootstrap-认证-token-文件"><a href="#1-创建-TLS-Bootstrap-认证-token-文件" class="headerlink" title="1. 创建 TLS Bootstrap 认证 token 文件"></a>1. 创建 TLS Bootstrap 认证 token 文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 生成一个加密token</span><br>export BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d &#x27; &#x27;) <br><span class="hljs-meta">#</span><span class="bash"> 创建 token文件</span><br>cat &gt; ~/kubernetes/server/cfg/token.csv &lt;&lt;EOF<br><span class="hljs-meta">$</span><span class="bash">&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,<span class="hljs-string">&quot;system:node-bootstrap&quot;</span></span><br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>🌈 token文件的格式为 token,用户,uid,用户组</p></blockquote><h6 id="分发-token-至各-master-节点"><a href="#分发-token-至各-master-节点" class="headerlink" title="分发 token 至各 master 节点"></a>分发 token 至各 master 节点</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/cfg/token.csv dest=/data/applications/kubernetes/cfg/token.csv owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="2-创建审计策略文件"><a href="#2-创建审计策略文件" class="headerlink" title="2. 创建审计策略文件"></a>2. 创建审计策略文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/kubernetes/server/cfg/audit-policy.yaml &lt;&lt;EOF<br>apiVersion: audit.k8s.io/v1beta1<br>kind: Policy<br>rules:<br><span class="hljs-meta">  #</span><span class="bash"> The following requests were manually identified as high-volume and low-risk, so drop them.</span><br>  - level: None<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - endpoints<br>          - services<br>          - services/status<br>    users:<br>      - &#x27;system:kube-proxy&#x27;<br>    verbs:<br>      - watch<br>   <br>  - level: None<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - nodes<br>          - nodes/status<br>    userGroups:<br>      - &#x27;system:nodes&#x27;<br>    verbs:<br>      - get<br>   <br>  - level: None<br>    namespaces:<br>      - kube-system<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - endpoints<br>    users:<br>      - &#x27;system:kube-controller-manager&#x27;<br>      - &#x27;system:kube-scheduler&#x27;<br>      - &#x27;system:serviceaccount:kube-system:endpoint-controller&#x27;<br>    verbs:<br>      - get<br>      - update<br>   <br>  - level: None<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - namespaces<br>          - namespaces/status<br>          - namespaces/finalize<br>    users:<br>      - &#x27;system:apiserver&#x27;<br>    verbs:<br>      - get<br>   <br><span class="hljs-meta">  #</span><span class="bash"> Don<span class="hljs-string">&#x27;t log HPA fetching metrics.</span></span><br>  - level: None<br>    resources:<br>      - group: metrics.k8s.io<br>    users:<br>      - &#x27;system:kube-controller-manager&#x27;<br>    verbs:<br>      - get<br>      - list<br>   <br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> Don&#x27;</span>t <span class="hljs-built_in">log</span> these read-only URLs.</span><br>  - level: None<br>    nonResourceURLs:<br>      - &#x27;/healthz*&#x27;<br>      - /version<br>      - &#x27;/swagger*&#x27;<br>   <br><span class="hljs-meta">  #</span><span class="bash"> Don<span class="hljs-string">&#x27;t log events requests.</span></span><br>  - level: None<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - events<br>   <br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> node and pod status calls from nodes are high-volume and can be large, don&#x27;</span>t <span class="hljs-built_in">log</span> responses <span class="hljs-keyword">for</span> expected updates from nodes</span><br>  - level: Request<br>    omitStages:<br>      - RequestReceived<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - nodes/status<br>          - pods/status<br>    users:<br>      - kubelet<br>      - &#x27;system:node-problem-detector&#x27;<br>      - &#x27;system:serviceaccount:kube-system:node-problem-detector&#x27;<br>    verbs:<br>      - update<br>      - patch<br>   <br>  - level: Request<br>    omitStages:<br>      - RequestReceived<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - nodes/status<br>          - pods/status<br>    userGroups:<br>      - &#x27;system:nodes&#x27;<br>    verbs:<br>      - update<br>      - patch<br>   <br><span class="hljs-meta">  #</span><span class="bash"> deletecollection calls can be large, don<span class="hljs-string">&#x27;t log responses for expected namespace deletions</span></span><br>  - level: Request<br>    omitStages:<br>      - RequestReceived<br>    users:<br>      - &#x27;system:serviceaccount:kube-system:namespace-controller&#x27;<br>    verbs:<br>      - deletecollection<br>   <br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> Secrets, ConfigMaps, and TokenReviews can contain sensitive &amp; binary data,</span></span><br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> so only log at the Metadata level.</span></span><br>  - level: Metadata<br>    omitStages:<br>      - RequestReceived<br>    resources:<br>      - group: &quot;&quot;<br>        resources:<br>          - secrets<br>          - configmaps<br>      - group: authentication.k8s.io<br>        resources:<br>          - tokenreviews<br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> Get repsonses can be large; skip them.</span></span><br>  - level: Request<br>    omitStages:<br>      - RequestReceived<br>    resources:<br>      - group: &quot;&quot;<br>      - group: admissionregistration.k8s.io<br>      - group: apiextensions.k8s.io<br>      - group: apiregistration.k8s.io<br>      - group: apps<br>      - group: authentication.k8s.io<br>      - group: authorization.k8s.io<br>      - group: autoscaling<br>      - group: batch<br>      - group: certificates.k8s.io<br>      - group: extensions<br>      - group: metrics.k8s.io<br>      - group: networking.k8s.io<br>      - group: policy<br>      - group: rbac.authorization.k8s.io<br>      - group: scheduling.k8s.io<br>      - group: settings.k8s.io<br>      - group: storage.k8s.io<br>    verbs:<br>      - get<br>      - list<br>      - watch<br>   <br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> Default level for known APIs</span></span><br>  - level: RequestResponse<br>    omitStages:<br>      - RequestReceived<br>    resources:<br>      - group: &quot;&quot;<br>      - group: admissionregistration.k8s.io<br>      - group: apiextensions.k8s.io<br>      - group: apiregistration.k8s.io<br>      - group: apps<br>      - group: authentication.k8s.io<br>      - group: authorization.k8s.io<br>      - group: autoscaling<br>      - group: batch<br>      - group: certificates.k8s.io<br>      - group: extensions<br>      - group: metrics.k8s.io<br>      - group: networking.k8s.io<br>      - group: policy<br>      - group: rbac.authorization.k8s.io<br>      - group: scheduling.k8s.io<br>      - group: settings.k8s.io<br>      - group: storage.k8s.io<br>         <br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> Default level for all other requests.</span></span><br>  - level: Metadata<br>    omitStages:<br>      - RequestReceived<br>EOF<br></code></pre></td></tr></table></figure><h6 id="分发审计策略文件"><a href="#分发审计策略文件" class="headerlink" title="分发审计策略文件:"></a>分发审计策略文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/cfg/audit-policy.yaml dest=/data/applications/kubernetes/cfg/audit-policy.yaml owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="3-创建-kube-apiserver-配置文件"><a href="#3-创建-kube-apiserver-配置文件" class="headerlink" title="3. 创建 kube-apiserver 配置文件"></a>3. 创建 kube-apiserver 配置文件</h5><p>新建文件 <code>~/kubernetes/server/cfg/kube-apiserver.conf</code>，文件内容如下: (节点IP根据实际情况替换)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_APISERVER_OPTS=&quot;--advertise-address=192.168.3.231 \<br>--bind-address=192.168.3.231 \<br>--secure-port=6443 \<br>--insecure-port=8080 \<br>--service-cluster-ip-range=10.0.0.0/16 \<br>--service-node-port-range=30000-50000 \<br>--default-not-ready-toleration-seconds=360 \<br>--default-unreachable-toleration-seconds=360 \<br>--feature-gates=DynamicAuditing=true \<br>--max-mutating-requests-inflight=2000 \<br>--max-requests-inflight=4000 \<br>--default-watch-cache-size=200 \<br>--delete-collection-workers=2 \<br>--etcd-cafile=/data/applications/etcd/ssl/ca.pem \<br>--etcd-certfile=/data/applications/etcd/ssl/server.pem \<br>--etcd-keyfile=/data/applications/etcd/ssl/server-key.pem \<br>--etcd-servers=https://192.168.3.231:2379,https://192.168.3.232:2379,https://192.168.3.233:2379 \<br>--tls-cert-file=/data/applications/kubernetes/ssl/server.pem  \<br>--tls-private-key-file=/data/applications/kubernetes/ssl/server-key.pem \<br>--client-ca-file=/data/applications/kubernetes/ssl/ca.pem \<br>--service-account-key-file=/data/applications/kubernetes/ssl/ca-key.pem \<br>--audit-log-maxage=30 \<br>--audit-log-maxbackup=3 \<br>--audit-log-maxsize=100 \<br>--audit-log-mode=batch \<br>--audit-log-truncate-enabled \<br>--audit-log-batch-buffer-size=20000 \<br>--audit-log-batch-max-size=2 \<br>--audit-log-path=/data/applications/kubernetes/logs/k8s-audit.log \<br>--audit-policy-file=/data/applications/kubernetes/cfg/audit-policy.yaml \<br>--profiling \<br>--enable-bootstrap-token-auth=true \<br>--token-auth-file=/data/applications/kubernetes/cfg/token.csv \<br>--authorization-mode=RBAC,Node \<br>--runtime-config=api/all=true \<br>--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \<br>--allow-privileged=true \<br>--apiserver-count=3 \<br>--event-ttl=168h \<br>--kubelet-certificate-authority=/data/applications/kubernetes/ssl/ca.pem \<br>--kubelet-client-certificate=/data/applications/kubernetes/ssl/server.pem \<br>--kubelet-client-key=/data/applications/kubernetes/ssl/server-key.pem \<br>--kubelet-https=true \<br>--kubelet-timeout=10s \<br>--proxy-client-cert-file=/data/applications/kubernetes/ssl/metrics-server.pem \<br>--proxy-client-key-file=/data/applications/kubernetes/ssl/metrics-server-key.pem \<br>--logtostderr=true \<br>--log-dir=/data/applications/kubernetes/logs \<br>--v=2 \<br>--enable-aggregator-routing=true&quot;<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-5"><a href="#配置参数说明-5" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h6 id="分发配置文件"><a href="#分发配置文件" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/cfg/kube-apiserver.conf dest=/data/applications/kubernetes/cfg/kube-apiserver.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意</strong></p><p>分发后要修改对应节点的 <code>advertise-address</code> 和 <code>bind-address</code></p></blockquote><h5 id="4-创建-systemd-unit-文件"><a href="#4-创建-systemd-unit-文件" class="headerlink" title="4. 创建 systemd unit 文件"></a>4. 创建 systemd unit 文件</h5><p>新建文件 <code>~/kubernetes/server/systemd/kube-apiserver.service</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Kubernetes API Server<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=network.target<br>After=etcd.service<br>Wants=etcd.service<br><br>[Service]<br>EnvironmentFile=/data/application/kubernetes/cfg/kube-apiserver.conf<br>ExecStart=/data/applications/kubernetes/bin/kube-apiserver $KUBE_APISERVER_OPTS<br>Restart=on-failure<br>RestartSec=10<br>Type=notify<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h6 id="分发-systemd-文件"><a href="#分发-systemd-文件" class="headerlink" title="分发 systemd 文件:"></a>分发 systemd 文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/systemd/kube-apiserver.service dest=/usr/lib/systemd/system/kube-apiserver.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="5-启动-kube-apiserver-集群"><a href="#5-启动-kube-apiserver-集群" class="headerlink" title="5. 启动 kube-apiserver 集群"></a>5. 启动 kube-apiserver 集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl enable kube-apiserver.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl start kube-apiserver.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl status kube-apiserver.service&quot;<br></code></pre></td></tr></table></figure><h5 id="6-验证kube-apiserver-集群状态"><a href="#6-验证kube-apiserver-集群状态" class="headerlink" title="6. 验证kube-apiserver 集群状态"></a>6. 验证kube-apiserver 集群状态</h5><h6 id="1⃣️-查看集群信息"><a href="#1⃣️-查看集群信息" class="headerlink" title="1⃣️ 查看集群信息:"></a>1⃣️ 查看集群信息:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl cluster-info<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Kubernetes master is running at https://192.168.3.230:8443<br><br>To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.<br></code></pre></td></tr></table></figure><h6 id="2⃣️-查看集群所有内容"><a href="#2⃣️-查看集群所有内容" class="headerlink" title="2⃣️ 查看集群所有内容:"></a>2⃣️ 查看集群所有内容:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get all --all-namespaces<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAMESPACE   NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE<br>default     service/kubernetes   ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP   49m<br></code></pre></td></tr></table></figure><h6 id="3⃣️-查看集群状态信息"><a href="#3⃣️-查看集群状态信息" class="headerlink" title="3⃣️ 查看集群状态信息:"></a>3⃣️ 查看集群状态信息:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get componentstatuses # 或执行 kubectl get cs<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                 STATUS      MESSAGE                                                                                     ERROR<br>scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   <br>controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused   <br>etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;                                                                           <br>etcd-2               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;                                                                           <br>etcd-1               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;    <br></code></pre></td></tr></table></figure><blockquote><p>🚩 此时还没有部署 <code>controller-managerhe</code> 和 <code>schedule</code> 这两个组件，所以状态为 Unhealthy，待后续部署好之后再查看。</p></blockquote><h5 id="7-查看-kube-apiserver-写入-etcd-中的数据"><a href="#7-查看-kube-apiserver-写入-etcd-中的数据" class="headerlink" title="7. 查看 kube-apiserver 写入 etcd 中的数据"></a>7. 查看 kube-apiserver 写入 etcd 中的数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ETCDCTL_API=3 /data/applications/etcd/bin/etcdctl \<br>--endpoints=https://192.168.3.231:2379,https://192.168.3.232:2379,https://192.168.3.233:2379 \<br>--cacert=/data/applications/etcd/ssl/ca.pem \<br>--cert=/data/applications/etcd/ssl/server.pem \<br>--key=/data/applications/etcd/ssl/server-key.pem \<br>get /registry/ --prefix --keys-only<br></code></pre></td></tr></table></figure><h5 id="8-授权-kube-apiserver-访问-kubelet-API-的权限"><a href="#8-授权-kube-apiserver-访问-kubelet-API-的权限" class="headerlink" title="8. 授权 kube-apiserver 访问 kubelet API 的权限"></a>8. 授权 kube-apiserver 访问 kubelet API 的权限</h5><blockquote><p>🚩 在执行 kubectl exec、run、logs 等命令时，apiserver 会将请求转发到 kubelet 的 https 端口，因此在这边定义 RBAC 规则，授权 apiserver 使用证书（server.pem）用户名（kubernetes）访问 kubelet API 的权限。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes<br></code></pre></td></tr></table></figure><h4 id="2）部署-kube-controller-manager"><a href="#2）部署-kube-controller-manager" class="headerlink" title="2）部署 kube-controller-manager"></a>2）部署 kube-controller-manager</h4><p><strong>基础组件介绍 —— kube-controller-manager:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-controller-manager/">传送门</a></p><blockquote><p>🚩 这里部署的是一个三实例的 kube-controller-manager 集群，启动后会通过选举机制产生一个 leader（类似 consul 或 etcd的机制），其他节点处于堵塞状态，当 leader 节点不可用时，剩余的堵塞节点会再次选举产生新的 leader，从热保证服务的高可用。</p><p><strong>以下的操作都是在 k8s-master01 上进行，然后再通过批管理工具分发至其他节点进行统一管理。</strong></p></blockquote><h5 id="1-创建-kube-controller-manager-配置文件"><a href="#1-创建-kube-controller-manager-配置文件" class="headerlink" title="1. 创建 kube-controller-manager 配置文件"></a>1. 创建 kube-controller-manager 配置文件</h5><p>新建文件 <code>~/kubernetes/server/cfg/kube-controller-manager.conf</code>，文件内容如下: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--v=2 \<br>--logtostderr=true \<br>--log-dir=/data/applications/kubernetes/logs \<br>--profiling \<br>--cluster-name=kubernetes \<br>--bind-address=127.0.0.1 \<br>--master=127.0.0.1:8080 \<br>--service-cluster-ip-range=10.0.0.0/16 \<br>--cluster-cidr=10.244.0.0/16 \<br>--allocate-node-cidrs=true \<br>--cluster-signing-cert-file=/data/applications/kubernetes/ssl/ca.pem \<br>--cluster-signing-key-file=/data/applications/kubernetes/ssl/ca-key.pem  \<br>--service-account-private-key-file=/data/applications/kubernetes/ssl/ca-key.pem \<br>--root-ca-file=/data/applications/kubernetes/ssl/ca.pem \<br>--controllers=*,bootstrapsigner,tokencleaner \<br>--kube-api-qps=1000 \<br>--kube-api-burst=2000 \<br>--leader-elect=true \<br>--use-service-account-credentials=true \<br>--horizontal-pod-autoscaler-sync-period=10s \<br>--concurrent-service-syncs=2 \<br>--concurrent-deployment-syncs=10 \<br>--concurrent-gc-syncs=30 \<br>--node-cidr-mask-size=24 \<br>--pod-eviction-timeout=6m \<br>--terminated-pod-gc-threshold=10000 \<br>--experimental-cluster-signing-duration=87600h0m0s \<br>--feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true&quot;<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-6"><a href="#配置参数说明-6" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h6 id="分发配置文件："><a href="#分发配置文件：" class="headerlink" title="分发配置文件："></a>分发配置文件：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/cfg/kube-controller-manager.conf dest=/data/applications/kubernetes/cfg/kube-controller-manager.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="2-创建-systemd-unit-文件"><a href="#2-创建-systemd-unit-文件" class="headerlink" title="2. 创建 systemd unit 文件"></a>2. 创建 systemd unit 文件</h5><p>新建文件 <code>~/kubernetes/server/systemd/kube-controller-manager.service</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Kubernetes Controller Manager<br>Documentation=https://github.com/kubernetes/kubernetes<br><br>[Service]<br>EnvironmentFile=/data/applications/kubernetes/cfg/kube-controller-manager.conf<br>ExecStart=/data/applications/kubernetes/bin/kube-controller-manager $KUBE_CONTROLLER_MANAGER_OPTS<br>Restart=on-failure<br>RestartSec=5<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-1"><a href="#分发配置文件-1" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/systemd/kube-controller-manager.service dest=/usr/lib/systemd/system/kube-controller-manager.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="3-启动-kube-controller-manager-集群"><a href="#3-启动-kube-controller-manager-集群" class="headerlink" title="3. 启动 kube-controller-manager 集群"></a>3. 启动 kube-controller-manager 集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl enable kube-controller-manager.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl start kube-controller-manager.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl status kube-controller-manager.service&quot;<br></code></pre></td></tr></table></figure><h5 id="4-验证-kube-controller-manager-集群状态"><a href="#4-验证-kube-controller-manager-集群状态" class="headerlink" title="4. 验证 kube-controller-manager 集群状态"></a>4. 验证 kube-controller-manager 集群状态</h5><h6 id="1⃣️-查看集群状态信息"><a href="#1⃣️-查看集群状态信息" class="headerlink" title="1⃣️ 查看集群状态信息:"></a>1⃣️ 查看集群状态信息:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get componentstatuses # 或执行 kubectl get cs<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                 STATUS      MESSAGE                                                                                     ERROR<br>scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   <br>controller-manager   Healthy     ok                                                                                          <br>etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;                                                                           <br>etcd-1               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;                                                                           <br>etcd-2               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125; <br></code></pre></td></tr></table></figure><blockquote><p>🚩 检查集群状态，controller-manager的状态为”ok”</p><p>当 <code>kube-controller-manager</code> 集群中的1个或2个节点的 <code>controller-manager</code> 服务挂掉，只要有一个节点的 <code>controller-manager</code> 服务活着，则集群中 <code>controller-manager</code> 的状态仍然为 <strong>“ok”</strong> ,仍然会继续提供服务！</p></blockquote><h6 id="2⃣️-查看监听端口"><a href="#2⃣️-查看监听端口" class="headerlink" title="2⃣️ 查看监听端口:"></a>2⃣️ 查看监听端口:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -lntp | grep kube-controller <br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcp        0      0 127.0.0.1:10257         0.0.0.0:*               LISTEN      494/kube-controller <br>tcp6       0      0 :::10252                :::*                    LISTEN      494/kube-controller <br></code></pre></td></tr></table></figure><blockquote><p>🌈 kube-controller-manager 监听端口为 10252 和 10257</p><p><code>10257</code>：接收 http 请求，非安全端口，不需要认证授权；<br><code>10252</code>：接收 https 请求，安全端口，需要认证授权；<br>两个接口都对外提供 <code>/metrics</code> 和 <code>/healthz</code> 的访问。</p></blockquote><h6 id="3⃣️-查看集群当中的-leader"><a href="#3⃣️-查看集群当中的-leader" class="headerlink" title="3⃣️ 查看集群当中的 leader:"></a>3⃣️ 查看集群当中的 leader:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml<br></code></pre></td></tr></table></figure><p>返回如下，可见当然 leader 为 <code>k8s-master01</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  annotations:<br>    control-plane.alpha.kubernetes.io/leader: &#x27;&#123;&quot;holderIdentity&quot;:&quot;k8s-master01_a6307360-f814-4a7d-82cc-d4b89928438b&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2021-10-06T13:37:48Z&quot;,&quot;renewTime&quot;:&quot;2021-10-06T13:39:47Z&quot;,&quot;leaderTransitions&quot;:1&#125;&#x27;<br>  creationTimestamp: &quot;2021-10-06T13:11:30Z&quot;<br>  managedFields:<br>  - apiVersion: v1<br>    fieldsType: FieldsV1<br>    fieldsV1:<br>      f:metadata:<br>        f:annotations:<br>          .: &#123;&#125;<br>          f:control-plane.alpha.kubernetes.io/leader: &#123;&#125;<br>    manager: kube-controller-manager<br>    operation: Update<br>    time: &quot;2021-10-06T13:11:30Z&quot;<br>  name: kube-controller-manager<br>  namespace: kube-system<br>  resourceVersion: &quot;7596&quot;<br>  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager<br>  uid: ccc812be-c1cf-4e2c-a1cb-5133198aae47<br></code></pre></td></tr></table></figure><h4 id="3）部署-kube-scheduler"><a href="#3）部署-kube-scheduler" class="headerlink" title="3）部署 kube-scheduler"></a>3）部署 kube-scheduler</h4><p><strong>基础组件介绍 —— kube-scheduler:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-scheduler/">传送门</a></p><blockquote><p>🚩  这里部署的是一个三实例的 kube-scheduler 集群，启动后会通过选举机制产生一个 leader，其他节点处于堵塞状态，当 leader 节点不可用时，剩余的堵塞节点会再次选举产生新的 leader，从热保证服务的高可用。</p><p><strong>以下的操作都是在 k8s-master01 上进行，然后再通过批管理工具分发至其他节点进行统一管理。</strong></p></blockquote><h5 id="1-创建-kube-scheduler-配置文件"><a href="#1-创建-kube-scheduler-配置文件" class="headerlink" title="1. 创建 kube-scheduler 配置文件"></a>1. 创建 kube-scheduler 配置文件</h5><p>新建文件 <code>~/kubernetes/server/cfg/kube-scheduler.conf</code>，文件内容如下: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_SCHEDULER_OPTS=&quot;--master=127.0.0.1:8080 \<br>--address=127.0.0.1 \<br>--leader-elect \<br>--logtostderr=true \<br>--log-dir=/data/applications/kubernetes/logs \<br>--v=2&quot;<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-7"><a href="#配置参数说明-7" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h6 id="分发配置文件-2"><a href="#分发配置文件-2" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/cfg/kube-scheduler.conf dest=/data/applications/kubernetes/cfg/kube-scheduler.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="2-创建-systemd-unit-文件-1"><a href="#2-创建-systemd-unit-文件-1" class="headerlink" title="2. 创建 systemd unit 文件"></a>2. 创建 systemd unit 文件</h5><p>新建文件 <code>~/kubernetes/server/systemd/kube-scheduler.service</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Kubernetes Scheduler<br>Documentation=https://github.com/kubernetes/kubernetes<br><br>[Service]<br>EnvironmentFile=/data/applications/kubernetes/cfg/kube-scheduler.conf<br>ExecStart=/data/applications/kubernetes/bin/kube-scheduler $KUBE_SCHEDULER_OPTS<br>Restart=on-failure<br>RestartSec=5<br>StartLimitInterval=0<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-3"><a href="#分发配置文件-3" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m copy -a &quot;src=~/kubernetes/server/systemd/kube-scheduler.service dest=/usr/lib/systemd/system/kube-scheduler.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="3-启动-kube-scheduler-集群"><a href="#3-启动-kube-scheduler-集群" class="headerlink" title="3. 启动 kube-scheduler 集群"></a>3. 启动 kube-scheduler 集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-master -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl enable kube-scheduler.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl start kube-scheduler.service&quot;<br>ansible k8s-master -S -R root -m shell -a &quot;systemctl status kube-scheduler.service&quot;<br></code></pre></td></tr></table></figure><h5 id="4-验证-kube-scheduler-集群状态"><a href="#4-验证-kube-scheduler-集群状态" class="headerlink" title="4. 验证 kube-scheduler 集群状态"></a>4. 验证 kube-scheduler 集群状态</h5><h6 id="1⃣️-查看集群状态信息-1"><a href="#1⃣️-查看集群状态信息-1" class="headerlink" title="1⃣️ 查看集群状态信息:"></a>1⃣️ 查看集群状态信息:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get componentstatuses # 或执行 kubectl get cs<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                 STATUS    MESSAGE             ERROR<br>controller-manager   Healthy   ok                  <br>scheduler            Healthy   ok                  <br>etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   <br>etcd-1               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   <br>etcd-2               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125; <br></code></pre></td></tr></table></figure><blockquote><p>🚩 检查集群状态，集群的状态就全都为”ok”</p><p>当 <code>kube-scheduler </code> 集群中的1个或2个节点的 <code>scheduler </code> 服务挂掉，只要有一个节点的 <code>scheduler </code> 服务活着，则集群中<code>scheduler</code> 的状态仍然为 <strong>“ok”</strong>,仍然会继续提供服务！</p></blockquote><h6 id="2⃣️-查看监听端口-1"><a href="#2⃣️-查看监听端口-1" class="headerlink" title="2⃣️ 查看监听端口:"></a>2⃣️ 查看监听端口:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -lntp | grep kube-scheduler<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcp        0      0 127.0.0.1:10251         0.0.0.0:*               LISTEN      2049/kube-scheduler <br>tcp6       0      0 :::10259                :::*                    LISTEN      2049/kube-scheduler cai<br></code></pre></td></tr></table></figure><blockquote><p>🌈 kube-scheduler 监听端口为 10251 和 10259</p><p><code>10251</code>：接收 http 请求，非安全端口，不需要认证授权；<br><code>10259</code>：接收 https 请求，安全端口，需要认证授权；<br>两个接口都对外提供 <code>/metrics</code> 和 <code>/healthz</code> 的访问。</p></blockquote><h6 id="3⃣️-查看集群当中的-leader-1"><a href="#3⃣️-查看集群当中的-leader-1" class="headerlink" title="3⃣️ 查看集群当中的 leader:"></a>3⃣️ 查看集群当中的 leader:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get endpoints kube-scheduler --namespace=kube-system  -o yaml<br></code></pre></td></tr></table></figure><p>返回如下，可见当然 leader 为 <code>k8s-master03</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  annotations:<br>    control-plane.alpha.kubernetes.io/leader: &#x27;&#123;&quot;holderIdentity&quot;:&quot;k8s-master03_cd78cdca-b2e3-4f36-b2c3-234bb8651d08&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2021-10-07T02:36:24Z&quot;,&quot;renewTime&quot;:&quot;2021-10-07T02:46:33Z&quot;,&quot;leaderTransitions&quot;:0&#125;&#x27;<br>  creationTimestamp: &quot;2021-10-07T02:36:24Z&quot;<br>  managedFields:<br>  - apiVersion: v1<br>    fieldsType: FieldsV1<br>    fieldsV1:<br>      f:metadata:<br>        f:annotations:<br>          .: &#123;&#125;<br>          f:control-plane.alpha.kubernetes.io/leader: &#123;&#125;<br>    manager: kube-scheduler<br>    operation: Update<br>    time: &quot;2021-10-07T02:36:24Z&quot;<br>  name: kube-scheduler<br>  namespace: kube-system<br>  resourceVersion: &quot;69322&quot;<br>  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler<br>  uid: 645f7d7d-6413-4ef4-bd2b-61a5a82adfe8<br></code></pre></td></tr></table></figure><h3 id="6、部署-Kubernetes-node-节点"><a href="#6、部署-Kubernetes-node-节点" class="headerlink" title="6、部署 Kubernetes node 节点"></a>6、部署 Kubernetes node 节点</h3><blockquote><p>🌈 <strong>关于 node 节点</strong></p><p>部署在 master 节点的必要组件有 <code>docker</code>、<code>kubelet</code> 、 <code>kube-proxy</code> 、<code>网络组件</code>，由于考虑到后续 mertics-server、istio 等服务的使用，这里我们将 master 节点也作为 node 加入集群，但是通过污点的方式禁止直接调度。</p></blockquote><h4 id="1）部署-kubelet"><a href="#1）部署-kubelet" class="headerlink" title="1）部署 kubelet"></a>1）部署 kubelet</h4><p><strong>基础组件介绍 —— kubelet:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kubelet/">传送门</a></p><blockquote><p>🚩 kubelet 运行在每个node节点上，接收 kube-apiserver 发送的请求，管理 Pod 容器，执行交互式命令，如 exec、run、logs 等。kubelet 启动时自动向 kube-apiserver 注册节点信息，内置的 cadvisor 统计和监控节点的资源使用情况，这里我们在部署时直接开启 TLS bootstrap，以此来自动签发 kubelet 的证书。</p><p><strong>以下的操作都是在 k8s-master01 上进行，然后再通过批管理工具分发至其他节点进行统一管理。</strong></p></blockquote><h5 id="1-创建-kubelet-的-kubeconfig-配置文件"><a href="#1-创建-kubelet-的-kubeconfig-配置文件" class="headerlink" title="1. 创建 kubelet 的 kubeconfig 配置文件"></a>1. 创建 kubelet 的 kubeconfig 配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置必要变量</span><br>BOOTSTRAP_TOKEN=$(cat /data/applications/kubernetes/cfg/token.csv | awk -F &#x27;,&#x27; &#x27;&#123;print $1&#125;&#x27;)<br>KUBE_APISERVER=&quot;https://$(hostname -i):6443&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/data/applications/kubernetes/ssl/ca.pem \<br>  --embed-certs=true \<br>  --server=$&#123;KUBE_APISERVER&#125; \<br>  --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/bootstrap.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置客户端认证参数</span><br>kubectl config set-credentials kubelet-bootstrap \<br>  --token=$&#123;BOOTSTRAP_TOKEN&#125; \<br>  --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/bootstrap.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kubelet-bootstrap \<br>  --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/bootstrap.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/bootstrap.kubeconfig<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-4"><a href="#分发配置文件-4" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy  -a &quot;src=~/kubernetes/node/cfg/bootstrap.kubeconfig dest=/data/applications/kubernetes/cfg/bootstrap.kubeconfig owner=root group=root mode=0600&quot;<br></code></pre></td></tr></table></figure><h5 id="2-创建-kubelet-参数-yaml-配置文件"><a href="#2-创建-kubelet-参数-yaml-配置文件" class="headerlink" title="2. 创建 kubelet 参数 yaml 配置文件"></a>2. 创建 kubelet 参数 yaml 配置文件</h5><p>新建文件 <code>~/kubernetes/node/cfg/kubelet-config.yml</code>，文件内容如下: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">10250</span><br><span class="hljs-attr">readOnlyPort:</span> <span class="hljs-number">10255</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">cgroupfs</span><br><span class="hljs-attr">clusterDNS:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br><span class="hljs-attr">clusterDomain:</span> <span class="hljs-string">cluster.local</span> <br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">authentication:</span><br>  <span class="hljs-attr">anonymous:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheTTL:</span> <span class="hljs-string">2m0s</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">x509:</span><br>    <span class="hljs-attr">clientCAFile:</span> <span class="hljs-string">/data/applications/kubernetes/ssl/ca.pem</span> <br><span class="hljs-attr">authorization:</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">Webhook</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheAuthorizedTTL:</span> <span class="hljs-string">5m0s</span><br>    <span class="hljs-attr">cacheUnauthorizedTTL:</span> <span class="hljs-string">30s</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">imagefs.available:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">100Mi</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-number">10</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">nodefs.inodesFree:</span> <span class="hljs-number">5</span><span class="hljs-string">%</span><br><span class="hljs-attr">maxOpenFiles:</span> <span class="hljs-number">1000000</span><br><span class="hljs-attr">maxPods:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">featureGates:</span><br>  <span class="hljs-attr">RotateKubeletServerCertificate:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">rotateCertificates:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">serverTLSBootstrap:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h6 id="配置参数说明-8"><a href="#配置参数说明-8" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h6 id="分发配置文件-5"><a href="#分发配置文件-5" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy  -a &quot;src=~/kubernetes/node/cfg/kubelet-config.yml dest=/data/applications/kubernetes/cfg/kubelet-config.yml owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="3-创建-kubelet-配置文件"><a href="#3-创建-kubelet-配置文件" class="headerlink" title="3. 创建 kubelet 配置文件"></a>3. 创建 kubelet 配置文件</h5><p>新建文件 <code>~/kubernetes/node/cfg/kubelet.conf</code>，文件内容如下: (<code>hostname-override</code> 根据实际情况替换)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBELET_OPTS=&quot;--hostname-override=k8s-master01 \<br>--pod_infra_container_image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 \<br>--bootstrap-kubeconfig=/data/applications/kubernetes/cfg/bootstrap.kubeconfig \<br>--kubeconfig=/data/application/kubernetes/cfg/kubelet.kubeconfig \<br>--config=/data/applications/kubernetes/cfg/kubelet-config.yml \<br>--cert-dir=/data/applications/kubernetes/ssl \<br>--network-plugin=cni \<br>--fail-swap-on=false \<br>--logtostderr=true \<br>--v=2 \<br>--log-dir=/data/applications/kubernetes/logs \<br>--node-labels=node.kubernetes.io/k8s-master=true&quot;<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-6"><a href="#分发配置文件-6" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy  -a &quot;src=~/kubernetes/node/cfg/kubelet.conf dest=/data/applications/kubernetes/cfg/kubelet.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p><code>hostname-override</code> 设置为各node节点主机IP（或 主机名dns解析）</p><p><code>KUBELET_POD_INFRA_CONTAINER</code> 可设置为私有容器仓库地址，如有可设置为 <code>KUBELET_POD_INFRA_CONTAINER=&quot;--pod_infra_container_image=&#123;私有镜像仓库ip&#125;:80/k8s/pause-amd64:v3.1&quot;</code></p><p><code>node-labels</code> 如是 master 节点则设置为 master，node 节点则设置为 node</p></blockquote><h5 id="4-创建-systemd-unit-文件-1"><a href="#4-创建-systemd-unit-文件-1" class="headerlink" title="4. 创建 systemd unit 文件"></a>4. 创建 systemd unit 文件</h5><p>新建文件 <code>~/kubernetes/node/systemd/kubelet.service</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=docker.service<br>Requires=docker.service<br><br>[Service]<br>EnvironmentFile=/data/applications/kubernetes/cfg/kubelet.conf <br>ExecStart=/data/applications/kubernetes/bin/kubelet $KUBELET_OPTS<br>Restart=always<br>RestartSec=5<br>StartLimitInterval=0<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-7"><a href="#分发配置文件-7" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/node/systemd/kubelet.service dest=/usr/lib/systemd/system/kubelet.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="5-启动-kubelet-服务"><a href="#5-启动-kubelet-服务" class="headerlink" title="5. 启动 kubelet 服务"></a>5. 启动 kubelet 服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;systemctl enable kubelet.service&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;systemctl start kubelet.service&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;systemctl status kubelet.service&quot;<br></code></pre></td></tr></table></figure><h5 id="6-bootstrap-token-认证授权"><a href="#6-bootstrap-token-认证授权" class="headerlink" title="6. bootstrap token 认证授权"></a>6. bootstrap token 认证授权</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><h5 id="7-自动-approce-CSR-请求"><a href="#7-自动-approce-CSR-请求" class="headerlink" title="7. 自动 approce CSR 请求"></a>7. 自动 approce CSR 请求</h5><p>新建文件 <code>~/kubernetes/yaml/csr-crb.yaml </code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Approve all CSRs <span class="hljs-keyword">for</span> the group <span class="hljs-string">&quot;system:bootstrappers&quot;</span></span><br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: auto-approve-csrs-for-group<br>subjects:<br>- kind: Group<br>  name: system:node-bootstrap<br>  apiGroup: rbac.authorization.k8s.io<br>roleRef:<br>  kind: ClusterRole<br>  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient<br>  apiGroup: rbac.authorization.k8s.io<br>---<br><span class="hljs-meta">#</span><span class="bash"> To <span class="hljs-built_in">let</span> a node of the group <span class="hljs-string">&quot;system:nodes&quot;</span> renew its own credentials</span><br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: node-client-cert-renewal<br>subjects:<br>- kind: Group<br>  name: system:nodes<br>  apiGroup: rbac.authorization.k8s.io<br>roleRef:<br>  kind: ClusterRole<br>  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient<br>  apiGroup: rbac.authorization.k8s.io<br>---<br><span class="hljs-meta">#</span><span class="bash"> A ClusterRole <span class="hljs-built_in">which</span> instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-meta">#</span><span class="bash"> serving cert matching its client cert.</span><br>kind: ClusterRole<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: approve-node-server-renewal-csr<br>rules:<br>- apiGroups: [&quot;certificates.k8s.io&quot;]<br>  resources: [&quot;certificatesigningrequests/selfnodeserver&quot;]<br>  verbs: [&quot;create&quot;]<br>---<br><span class="hljs-meta">#</span><span class="bash"> To <span class="hljs-built_in">let</span> a node of the group <span class="hljs-string">&quot;system:nodes&quot;</span> renew its own server credentials</span><br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: node-server-cert-renewal<br>subjects:<br>- kind: Group<br>  name: system:nodes<br>  apiGroup: rbac.authorization.k8s.io<br>roleRef:<br>  kind: ClusterRole<br>  name: approve-node-server-renewal-csr<br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><blockquote><p>🌈 <strong>rbac规则解释说明</strong></p><p><code>auto-approve-csrs-for-group</code>：</p><ul><li>自动 approve node 的第一次 CSR； 注意第一次 CSR 时，请求的 Group 为 system:bootstrap（注意 group 要和认证用的 token.csv 中的 group 保持一致）；</li></ul><p><code>node-client-cert-renewal</code>：</p><ul><li>自动 approve node 后续过期的 client 证书，自动生成的证书 Group 为 system:nodes；</li></ul><p><code>node-server-cert-renewal</code>：</p><p>自动 approve node 后续过期的 server 证书，自动生成的证书 Group 为 system:nodes;`</p></blockquote><h6 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建:"></a>执行创建:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f ~/kubernetes/yaml/csr-crb.yaml <br></code></pre></td></tr></table></figure><h5 id="8-查看CSR证书请求并批准-kubelet-的-TLS-证书请求"><a href="#8-查看CSR证书请求并批准-kubelet-的-TLS-证书请求" class="headerlink" title="8. 查看CSR证书请求并批准 kubelet 的 TLS 证书请求"></a>8. 查看CSR证书请求并批准 kubelet 的 TLS 证书请求</h5><blockquote><p>🚩 如果通过 TLS bootstrap 管理后，kubelet 的 证书就会变成轮询证书的形式，client 证书会自动签发，server 证书基于安全性考虑，CSR approving controllers 不会自动 approve kubelet server 证书签名请求，需要手动 approve，但是通过自定义的触发器，同样也能实现自动化。并且会自动生成 kubelet.kubeconfig 专门用于证书的认证和签发管理。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 批量签发(Pending 的 CSR 用于创建 kubelet server 证书，需要手动 approve)</span><br>kubectl get csr|grep &#x27;Pending&#x27; | awk &#x27;NR&gt;0&#123;print $1&#125;&#x27;|xargs kubectl certificate approve<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看 csr 请求（批准申请查看后CONDITION显示Approved,Issued即可）</span><br>kubectl get csr<br></code></pre></td></tr></table></figure><h5 id="9-验证-TLS-bootstrap-管理证书"><a href="#9-验证-TLS-bootstrap-管理证书" class="headerlink" title="9. 验证 TLS bootstrap 管理证书:"></a>9. 验证 TLS bootstrap 管理证书:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll /data/applications/kubernetes/ssl/kubelet-*.pem<br></code></pre></td></tr></table></figure><p>正常情况，结果如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211008113644603.png" alt="image-20211008113644603"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /data/applications/kubernetes/cfg/kubelet.kubeconfig <br></code></pre></td></tr></table></figure><p>正常情况，结果如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVR0lHZ2VQSWNoSWtKRnFZOTJ6MWE2Z1RCNVBnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HYzNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEl4TURreU16QTVNVEF3TUZvWERUTXhNRGt5TVRBNU1UQXdNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbGFVcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HYzNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUU4ZytUWUhMdCtjQXJSRkRyZTYKNmp5ZG9VbFkvM29TeW1uT3d6dEhHMFk0ZDhPOXVBZVZRTTdNWm1BMGhpRHhXUVZiWHlKQTBvNkVwVzFvRlR3YgpHdG5QUWlqSVFJTWlnZVNTNnVHVEZiRklpUTNBam53Y2tGdlI5WHlRTHVyejBRNnJFM21yc3RMNlBLYUx1SEJwCmo1SDZsRUx3OTdxdCtjR0NtQnMraEdFc202THVEWmwxRGlBb1RQQnduZTdlWHRqM2xmam5oUW44a0IrbGJMSmYKYjRSakFSbkN5RUgwMnBzTXNUcW85ckhiZEczUUNCeHlGZ2s1ZHRNczQwVFMyV0VzQjNyRnJnaHF0R2hPRWM2cApGZytrMjZEL0RMTHpNTWxCLzBKOXlkN0FkOUZlbkdjeUZIc2FKclMvM3RCVlFpWk5oaTBaZzlWM013Rk0zUHZPClZ3SURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVREhEaGVia1hzWlRPZWw3TTdhQmtML2cxSUtvd0h3WURWUjBqQkJnd0ZvQVVESERoZWJrWApzWlRPZWw3TTdhQmtML2cxSUtvd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFSjZZby9oNklsTWlZSFVHY1NhCkNJKytuUTNHWklKQlJYc0huMWlSRGVUaVBtejQvQm5pWmJlT3dXK1V2WVIwcytEMTlVeTRwa2cvb2tYUGdUM1oKdjBIN1IzdHpmMklGUVNhbnhBTE9hVTdxbm5tWU9JOUpYa0FDclR6QjJ5TlhWSXpZamRDMkxZS1kzRDI2TVZFZwpLQWtVWG5ybWxZcGUxOUh5UWFiVy9uSklPTDNJUzZRQlp2WGZ1aHpRMEJXL3g5OWdPV2swVGFrYnIrdlhhdWZxCk9Eb2hJT0E1cmk0UkVWN0M4WE1QYWNpREVGRVVGNG9hZlV6eFVjNVlIbDhkMnQwN1k3Mkl3WTdFaDY5ZG8weGkKQjNRZS8xc2dLRWZBZXp1NXV5eGhTZlpqODYybzQ1WGpCMzc1dHRETlEwdlhkcVRBUGU1SFpaUzUyeDAyRVFLWAp1V2c9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://192.168.3.231:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default-cluster</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">default-cluster</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">default-auth</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default-context</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">default-context</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">default-auth</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate:</span> <span class="hljs-string">/data/applications/kubernetes/ssl/kubelet-client-current.pem</span><br>    <span class="hljs-attr">client-key:</span> <span class="hljs-string">/data/applications/kubernetes/ssl/kubelet-client-current.pem</span><br></code></pre></td></tr></table></figure><h5 id="10-验证节点状态"><a href="#10-验证节点状态" class="headerlink" title="10. 验证节点状态"></a>10. 验证节点状态</h5><h6 id="1⃣️-查看节点状态信息"><a href="#1⃣️-查看节点状态信息" class="headerlink" title="1⃣️ 查看节点状态信息:"></a>1⃣️ 查看节点状态信息:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get nodes<br></code></pre></td></tr></table></figure><p>正常情况，返回如下: (此时发现所有node节点状态均为 “ready”)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME           STATUS   ROLES    AGE   VERSION<br>k8s-master01   Ready    &lt;none&gt;   12h   v1.18.18<br>k8s-master02   Ready    &lt;none&gt;   12h   v1.18.18<br>k8s-master03   Ready    &lt;none&gt;   12h   v1.18.18<br>k8s-node1      Ready    &lt;none&gt;   12h   v1.18.18<br></code></pre></td></tr></table></figure><h6 id="2⃣️-查看监听端口-2"><a href="#2⃣️-查看监听端口-2" class="headerlink" title="2⃣️ 查看监听端口:"></a>2⃣️ 查看监听端口:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -lntp|grep kubelet<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcp        0      0 127.0.0.1:40621         0.0.0.0:*               LISTEN      28305/kubelet       <br>tcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      28305/kubelet       <br>tcp6       0      0 :::10250                :::*                    LISTEN      28305/kubelet       <br>tcp6       0      0 :::10255                :::*                    LISTEN      28305/kubelet    <br></code></pre></td></tr></table></figure><blockquote><p>🌈 kubelet 监听端口为 10248、10250、10255</p><p><code>10248</code>：healthz http服务端口，即健康检查服务的端口，接收 http 请求，不需要认证授权；<br><code>10250</code>：kubelet 服务监听的端口, api 会检测他是否存活。接收 https 请求，访问该端口时需要认证和授权（即使访问<code>/healthz</code>也需要）；</p><p><code>10255</code>: 只读端口，可以不用验证和授权机制，直接访问。配置 <code>&quot;readOnlyPort: 0&quot;</code> 则表示关闭只读端口；</p></blockquote><h4 id="2）部署-kube-proxy"><a href="#2）部署-kube-proxy" class="headerlink" title="2）部署 kube-proxy"></a>2）部署 kube-proxy</h4><p><strong>基础组件介绍 —— kube-proxy:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-kube-proxy/">传送门</a></p><blockquote><p>🚩 kube-proxy运行在所有的node节点上，它监听apiserver中service和endpoint的变化情况，创建路由规则以提供服务IP和负载均衡功能。</p><p><strong>以下的操作都是在 k8s-master01 上进行，然后再通过批管理工具分发至其他节点进行统一管理。</strong></p></blockquote><h5 id="1-创建-kube-proxy-的-kubeconfig-配置文件"><a href="#1-创建-kube-proxy-的-kubeconfig-配置文件" class="headerlink" title="1. 创建 kube-proxy 的 kubeconfig 配置文件"></a>1. 创建 kube-proxy 的 kubeconfig 配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_APISERVER=&quot;https://$(hostname -i):6443&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/data/applications/kubernetes/ssl/ca.pem \<br>  --embed-certs=true \<br>  --server=$&#123;KUBE_APISERVER&#125; \<br>  --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/kube-proxy.kubeconfig<br><span class="hljs-meta"> </span><br><span class="hljs-meta">#</span><span class="bash"> 设置客户端认证参数</span> <br>kubectl config set-credentials kube-proxy \<br>  --client-certificate=/data/applications/kubernetes/ssl/kube-proxy.pem \<br>  --client-key=/data/applications/kubernetes/ssl/kube-proxy-key.pem \<br>  --embed-certs=true \<br>  --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/kube-proxy.kubeconfig<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kube-proxy \<br>  --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/kube-proxy.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置默认上下文</span> <br>kubectl config use-context default --kubeconfig=$&#123;HOME&#125;/kubernetes/node/cfg/kube-proxy.kubeconfig<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-8"><a href="#分发配置文件-8" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy  -a &quot;src=~/kubernetes/node/cfg/kube-proxy.kubeconfig dest=/data/applications/kubernetes/cfg/kube-proxy.kubeconfig owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="2-创建-kube-proxy-参数-yaml-配置文件"><a href="#2-创建-kube-proxy-参数-yaml-配置文件" class="headerlink" title="2. 创建 kube-proxy 参数 yaml 配置文件"></a>2. 创建 kube-proxy 参数 yaml 配置文件</h5><p>新建文件 <code>~/kubernetes/node/cfg/kube-proxy-config.yml</code>，文件内容如下:  (<code>hostname-override</code> 根据实际情况替换)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">kind: KubeProxyConfiguration<br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>hostnameOverride: k8s-master01<br>address: 0.0.0.0<br>metricsBindAddress: 0.0.0.0:10249<br>healthzBindAddress: 0.0.0.0:10256<br>clientConnection:<br>  burst: 200<br>  kubeconfig: &quot;/data/applications/kubernetes/cfg/kube-proxy.kubeconfig&quot;<br>  qps: 100<br>enableProfiling: true<br>clusterCIDR: 10.0.0.0/16<br>portRange: &quot;&quot;<br>mode: &quot;ipvs&quot;<br>kubeProxyIPTablesConfiguration:<br>  masqueradeAll: true<br>kubeProxyIPVSConfiguration:<br>  scheduler: rr<br>  excludeCIDRs: []<br></code></pre></td></tr></table></figure><h6 id="配置参数说明-9"><a href="#配置参数说明-9" class="headerlink" title="配置参数说明:"></a>配置参数说明:</h6><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h6 id="分发配置文件-9"><a href="#分发配置文件-9" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy  -a &quot;src=~/kubernetes/node/cfg/kube-proxy-config.yml dest=/data/applications/kubernetes/cfg/kube-proxy-config.yml owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="3-创建-kube-proxy-配置文件"><a href="#3-创建-kube-proxy-配置文件" class="headerlink" title="3. 创建 kube-proxy 配置文件"></a>3. 创建 kube-proxy 配置文件</h5><p>新建文件 <code>~/kubernetes/node/cfg/kube-proxy.conf</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">KUBE_PROXY_OPTS=&quot;--logtostderr=true \<br>--v=2 \<br>--log-dir=/data/applications/kubernetes/logs \<br>--ipvs-min-sync-period=5s \<br>--ipvs-sync-period=5s \<br>--config=/data/applications/kubernetes/cfg/kube-proxy-config.yml&quot;<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-10"><a href="#分发配置文件-10" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy  -a &quot;src=~/kubernetes/node/cfg/kube-proxy.conf dest=/data/applications/kubernetes/cfg/kube-proxy.conf owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="4-创建-systemd-unit-文件-2"><a href="#4-创建-systemd-unit-文件-2" class="headerlink" title="4. 创建 systemd unit 文件"></a>4. 创建 systemd unit 文件</h5><p>新建文件 <code>~/kubernetes/node/systemd/kube-proxy.service</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Kubernetes Kube-Proxy Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=network.target<br><br>[Service]<br>EnvironmentFile=/data/applications/kubernetes/cfg/kube-proxy.conf<br>ExecStart=/data/applications/kubernetes/bin/kube-proxy $KUBE_PROXY_OPTS<br>Restart=on-failure<br>RestartSec=5<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h6 id="分发配置文件-11"><a href="#分发配置文件-11" class="headerlink" title="分发配置文件:"></a>分发配置文件:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/node/systemd/kube-proxy.service dest=/usr/lib/systemd/system/kube-proxy.service owner=root group=root mode=0644&quot;<br></code></pre></td></tr></table></figure><h5 id="5-开启-ipvs"><a href="#5-开启-ipvs" class="headerlink" title="5. 开启 ipvs"></a>5. 开启 ipvs</h5><blockquote><p>🌈 从 <code>k8s</code> 的1.8版本开始，<code>kube-proxy</code> 引入了 <code>IPVS</code> 模式，<code>IPVS</code>模式与 <code>iptables</code> 同样基于 <code>Netfilter</code> ，但是采用的 <code>hash</code> 表，因此当<code>service</code>数量达到一定规模时，hash查表的速度优势就会显现出来，从而提高 <code>service</code>的服务性能。</p><p><strong>以下的操作都是在所有 node 节点上执行。</strong></p></blockquote><h6 id="1⃣️-开启内核参数"><a href="#1⃣️-开启内核参数" class="headerlink" title="1⃣️ 开启内核参数"></a>1⃣️ 开启内核参数</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 追加内核参数，开启二层网桥处理</span><br>cat &gt;&gt; /etc/sysctl.d/kubernetes.conf &lt;&lt; EOF<br>net.bridge.bridge-nf-call-iptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加载参数</span><br>sysctl -p /etc/sysctl.d/kubernetes.conf <br></code></pre></td></tr></table></figure><h6 id="2⃣️-安装-ipvsadm-等工具"><a href="#2⃣️-安装-ipvsadm-等工具" class="headerlink" title="2⃣️ 安装 ipvsadm 等工具"></a>2⃣️ 安装 ipvsadm 等工具</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m shell -a &quot;yum install -y ipvsadm ipset bridge-utils conntrack&quot;<br></code></pre></td></tr></table></figure><h6 id="3⃣️-开启-ipvs-支持"><a href="#3⃣️-开启-ipvs-支持" class="headerlink" title="3⃣️ 开启 ipvs 支持"></a>3⃣️ 开启 ipvs 支持</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建 ipvs 模块配置</span><br>cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF<br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack_ipv4<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 赋予执行权限</span><br>chmod 755 /etc/sysconfig/modules/ipvs.modules<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加载配置</span><br>bash /etc/sysconfig/modules/ipvs.modules<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看加载信息</span><br>lsmod | grep ip_vs<br></code></pre></td></tr></table></figure><p>正确情况，返回如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211008141710750.png" alt="image-20211008141710750"></p><h5 id="6-启动-kube-proxy-服务"><a href="#6-启动-kube-proxy-服务" class="headerlink" title="6. 启动 kube-proxy 服务"></a>6. 启动 kube-proxy 服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m shell -a &quot;systemctl daemon-reload&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;systemctl enable kube-proxy.service&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;systemctl start kube-proxy.service&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;systemctl status kube-proxy.service&quot;<br></code></pre></td></tr></table></figure><h5 id="7-验证节点状态"><a href="#7-验证节点状态" class="headerlink" title="7. 验证节点状态"></a>7. 验证节点状态</h5><h6 id="1⃣️-查看监听端口"><a href="#1⃣️-查看监听端口" class="headerlink" title="1⃣️ 查看监听端口:"></a>1⃣️ 查看监听端口:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -lnpt|grep kube-proxy<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcp6       0      0 :::10256                :::*                    LISTEN      25828/kube-proxy    <br>tcp6       0      0 :::10249                :::*                    LISTEN      25828/kube-proxy       <br></code></pre></td></tr></table></figure><blockquote><p>🌈 kubelet 监听端口为 10249、10256</p><p><code>10249</code>：接收 http 请求，不需要认证授权，用于提供 <code>/metrics </code>；<br><code>10256</code>：接收 http 请求，不需要认证授权，用于提供<code> /healthz</code>。</p></blockquote><h6 id="2⃣️-查看-ipvs-路由规则"><a href="#2⃣️-查看-ipvs-路由规则" class="headerlink" title="2⃣️ 查看 ipvs 路由规则"></a>2⃣️ 查看 ipvs 路由规则</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipvsadm -ln<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.0.1:443 rr<br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.3.231:6443           Masq    1      0          0</span>         <br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.3.232:6443           Masq    1      0          0</span>         <br><span class="hljs-meta">  -&gt;</span><span class="bash"> 192.168.3.233:6443           Masq    1      0          0</span>        <br></code></pre></td></tr></table></figure><blockquote><p>🚩 <strong>由上面可以看出</strong>：所有通过 https 访问 K8S SVC kubernetes 的请求都转发到 kube-apiserver 节点的 6443 端口；</p></blockquote><h3 id="7、部署-calico-网络方案"><a href="#7、部署-calico-网络方案" class="headerlink" title="7、部署 calico 网络方案"></a>7、部署 calico 网络方案</h3><p><strong>基础组件介绍 —— 网络组件:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6/">传送门</a></p><h4 id="1）下载和分发-calico-和-cni-插件"><a href="#1）下载和分发-calico-和-cni-插件" class="headerlink" title="1）下载和分发 calico 和 cni 插件"></a>1）下载和分发 calico 和 cni 插件</h4><h5 id="1-批量创建-calico-和-cni-组件相关目录"><a href="#1-批量创建-calico-和-cni-组件相关目录" class="headerlink" title="1. 批量创建 calico 和 cni 组件相关目录"></a>1. 批量创建 calico 和 cni 组件相关目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m shell -a &quot;mkdir -p /etc/calico/&#123;conf,yaml&#125; /opt/cni/bin/ /etc/cni/net.d&quot;<br></code></pre></td></tr></table></figure><h5 id="2-下载-calico-二进制文件"><a href="#2-下载-calico-二进制文件" class="headerlink" title="2. 下载 calico 二进制文件"></a>2. 下载 calico 二进制文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/kubernetes/network/bin&amp;&amp; \<br>wget -c https://github.com/projectcalico/calicoctl/releases/download/v3.19.2/calicoctl-linux-amd64 -O ~/kubernetes/network/bin/calicoctl &amp;&amp; \<br>chmod +x ~/kubernetes/network/bin/calicoctl <br></code></pre></td></tr></table></figure><h6 id="验证版本"><a href="#验证版本" class="headerlink" title="验证版本:"></a>验证版本:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/kubernetes/network/bin/calicoctl version<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Client Version:    v3.19.2<br>Git commit:        6f3d4900<br>invalid configuration: no configuration has been provided, try setting KUBERNETES_MASTER environment variable<br></code></pre></td></tr></table></figure><blockquote><p>由于尚未进行配置，故无法获取具体的配置信息。</p></blockquote><h6 id="分发二进制包至各-master-节点"><a href="#分发二进制包至各-master-节点" class="headerlink" title="分发二进制包至各 master 节点:"></a>分发二进制包至各 master 节点:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/network/bin/calicoctl dest=/usr/local/bin/calicoctl owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h5 id="3-下载-cni-组件"><a href="#3-下载-cni-组件" class="headerlink" title="3. 下载 cni 组件"></a>3. 下载 cni 组件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载解 cni 网络插件</span><br>wget -c https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v1.0.1.tgz -O ~/kubernetes/network/bin/cni-plugins-linux-amd64-v1.0.1.tgz <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 下载 calico cni 组件</span><br>wget -c https://github.com/projectcalico/cni-plugin/releases/download/v3.19.2/calico-amd64 -O ~/kubernetes/network/bin/calico &amp;&amp; \<br>wget -c  https://github.com/projectcalico/cni-plugin/releases/download/v3.19.2/calico-ipam-amd64 -O ~/kubernetes/network/bin/calico-ipam<br></code></pre></td></tr></table></figure><h6 id="分发二进制包至各-master-节点-1"><a href="#分发二进制包至各-master-节点-1" class="headerlink" title="分发二进制包至各 master 节点:"></a>分发二进制包至各 master 节点:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 解压 cni 插件压缩包到各节点 cni 默认目录</span><br>ansible k8s-node -S -R root -m unarchive -a &quot;src=~/kubernetes/network/bin/cni-plugins-linux-amd64-v1.0.1.tgz dest=/opt/cni/bin/ mode=0755 copy=yes&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分发 calico cni 组件</span><br>ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/network/bin/calico dest=/opt/cni/bin/calico owner=root group=root mode=0755&quot;<br>ansible k8s-node -S -R root -m copy -a &quot;src=~/kubernetes/network/bin/calico-ipam dest=/opt/cni/bin/calico-ipam owner=root group=root mode=0755&quot;<br></code></pre></td></tr></table></figure><h5 id="4-镜像准备"><a href="#4-镜像准备" class="headerlink" title="4. 镜像准备"></a>4. 镜像准备</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 提前下载如下镜像</span><br>ansible k8s-node -S -R root -m shell -a &quot;docker pull calico/node:v3.19.2&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;docker pull calico/cni:v3.19.2&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;docker pull calico/kube-controllers:v3.19.2&quot;<br>ansible k8s-node -S -R root -m shell -a &quot;docker pull calico/pod2daemon-flexvol:v3.19.2&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 上传至私仓（可选）</span><br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="2）创建-calico-配置文件"><a href="#2）创建-calico-配置文件" class="headerlink" title="2）创建 calico 配置文件"></a>2）创建 calico 配置文件</h4><h5 id="1-获取-calico-manifest"><a href="#1-获取-calico-manifest" class="headerlink" title="1. 获取 calico manifest"></a>1. 获取 calico manifest</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c --no-check-certificate https://docs.projectcalico.org/archive/v3.19/manifests/calico.yaml -O ~/kubernetes/network/cfg/calico.yaml<br></code></pre></td></tr></table></figure><h5 id="2-修改镜像版本（可选）"><a href="#2-修改镜像版本（可选）" class="headerlink" title="2. 修改镜像版本（可选）"></a>2. 修改镜像版本（可选）</h5><blockquote><p>🚩 <strong>关于镜像版本</strong></p><p>由于官方提供的 yaml 文件是实时更新的，其容器的版本也会随之更新。故，如果要使用指定版本的 calico 的话，就需要自行替换镜像版本，如本文使用 v3.19.2，而官方默认提供的可能已经是 v3.19.3 了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取官方默认提供的镜像版本</span><br>DEFAULT_VERSION=$(awk -F &quot;:&quot; &#x27;/image:/&#123;print $NF&#125;&#x27; ~/kubernetes/network/cfg/calico.yaml|head -1)<br><span class="hljs-meta">#</span><span class="bash"> 替换为指定版本</span><br>sed -i &quot;s/$DEFAULT_VERSION/v3.19.2/g&quot; ~/kubernetes/network/cfg/calico.yaml<br></code></pre></td></tr></table></figure><h5 id="3-关闭-IPIP-模式（可选）"><a href="#3-关闭-IPIP-模式（可选）" class="headerlink" title="3. 关闭 IPIP 模式（可选）"></a>3. 关闭 IPIP 模式（可选）</h5><blockquote><p>🚩 <strong>关于 CALICO_IPV4POOL_IPIP 参数</strong></p><p>calico 网络默认使用 IPIP 模式，它会在每个 node 节点创建一个 <code>tunl0</code> 网口，通过隧道路由的方式将所有的node节点连接起来，也就是说，即使是不同网段的节点通过这种方式也可以纳入统一个 k8s 集群，所以官方推荐这种情况时，使用该模式，但是由于我们本文所有节点都在同一网段内，所以这里我们关闭 IPIP 模式。</p><p><code>CALICO_IPV4POOL_IPIP</code> 提供以下三种 value:</p><ul><li><code>Always</code>: 开启 IPIP 模式(默认)</li><li><code>CrossSubnet</code>: 只在跨网段时才开启 IPIP 模式，适合有 Kubernetes 节点在其他网段的情况，属于中肯友好方案</li><li><code>Never</code>: 关闭 IPIP 模式，适合确认所有 Kubernetes 节点都在同一个网段下的情况</li></ul></blockquote><p>在 DaemonSet 部分 <code>calico-node</code>的 <code>pod</code> 的变量中，修改 <code>CALICO_IPV4POOL_IPIP</code> 值为 <code>Never</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Enable IPIP</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_IPV4POOL_IPIP</span><br><span class="hljs-attr">value:</span> <span class="hljs-string">&quot;Never&quot;</span><br></code></pre></td></tr></table></figure><h5 id="4-修改-pod-的网段"><a href="#4-修改-pod-的网段" class="headerlink" title="4. 修改 pod 的网段"></a>4. 修改 pod 的网段</h5><blockquote><p>🚩 <strong>关于 CALICO_IPV4POOL_CIDR 参数</strong></p><p>calico 默认使用的 k8s 集群的 pod 网段为 <code>192.168.0.0/16</code> ，由于我们使用的 CIDR 不同于这个段，所以要自行修改，注意保持和 kube-controller-manager 中的 <code>--cluster-cidr</code> 保持一致。</p></blockquote><p>在 DaemonSet 部分 <code>calico-node</code>的 <code>pod</code> 的变量中，开启 <code>CALICO_IPV4POOL_CIDR</code> ，修改成集群使用的 CIDR 网段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># The default IPv4 pool to create on startup if none exists. Pod IPs will be</span><br><span class="hljs-comment"># chosen from this range. Changing this value after installation will have</span><br><span class="hljs-comment"># no effect. This should fall within `--cluster-cidr`.</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_IPV4POOL_CIDR</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br></code></pre></td></tr></table></figure><h5 id="5-修改-apiserver-的信息"><a href="#5-修改-apiserver-的信息" class="headerlink" title="5. 修改 apiserver 的信息"></a>5. 修改 apiserver 的信息</h5><blockquote><p>🚩 <strong>关于 calico 访问 apiserver</strong></p><p>如果未配置 apiserver 信息。calico默认将设置默认的 calico 网段（CIDR） 和 443端口，如 10.0.0.1:443。会导致 node 节点无法连接 apiserver，报错类似以下情况:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ERROR][9] startup/startup.go 159: failed to query kubeadm&#x27;s config map error=Get &quot;https://10.0.0.1:443/api/v1/namespaces/kube-system/configmaps/kubeadm-config?timeout=2s&quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br></code></pre></td></tr></table></figure><p>以及（calico-kube-controllers）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Failed to create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container &quot;2c9d1a481b2ab8328466ba5f7b236bdc822957371579812fa8e7ce3e464dce04&quot; network for pod &quot;calico-kube-controllers-86497987b6-j2fch&quot;: networkPlugin cni failed to set up pod &quot;calico-kube-controllers-86497987b6-j2fch_kube-system&quot; network: error getting ClusterInformation: Get &quot;https://[10.0.0.1]:443/apis/crd.projectcalico.org/v1/clusterinformations/default&quot;: dial tcp 10.0.0.1:443: i/o timeout<br></code></pre></td></tr></table></figure><p>apiserver 配置字段为：<code>KUBERNETES_SERVICE_HOST</code>、<code>KUBERNETES_SERVICE_PORT</code>、<code>KUBERNETES_SERVICE_PORT_HTTPS</code>。</p><p>分别在 DaemonSet 部分 <code>calico-node</code> 的 <code>upgrade-ipam</code>, <code>install-cni</code>, <code>calico-node</code> 和 Deployment 部分 <code>calico-kube-controllers</code> 的 <code>env</code> 变量中添加 apiserver 信息。</p></blockquote><p>在 DaemonSet 部分 <code>calico-node</code> 的  <code>env</code> 变量和 Deployment 部分 <code>calico-kube-controllers</code> 的 <code>env</code> 变量中增加 apiserver 的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> The kubernetes apiserver info</span><br>- name: KUBERNETES_SERVICE_HOST<br>  value: &quot;192.168.3.231&quot;<br>- name: KUBERNETES_SERVICE_PORT<br>  value: &quot;6443&quot;<br>- name: KUBERNETES_SERVICE_PORT_HTTPS<br>  value: &quot;6443&quot;<br></code></pre></td></tr></table></figure><h5 id="6-修改-typha-service-name（集群节点数超过50以上可选）"><a href="#6-修改-typha-service-name（集群节点数超过50以上可选）" class="headerlink" title="6. 修改 typha_service_name（集群节点数超过50以上可选）"></a>6. 修改 typha_service_name（集群节点数超过50以上可选）</h5><blockquote><p>🚩 <strong>关于 calico-typha</strong></p><p>官方推荐当k8s数据存储模式超过50各节点时启用typha模式，Typha 组件可以帮助 Calico 扩展到大量的节点，并且不会对 Kubernetes API 服务器造成过度影响。</p><p>官方提供的 manifest 地址: <a href="https://docs.projectcalico.org/archive/v3.19/manifests/calico-typha.yaml">https://docs.projectcalico.org/archive/v3.19/manifests/calico-typha.yaml</a></p></blockquote><p>在 ConfigMap 部分的 <code>data</code>变量中，修改 <code>typha_service_name</code> 为 <code>calico-typha</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-comment"># Typha is disabled.</span><br>  <span class="hljs-attr">typha_service_name:</span> <span class="hljs-string">&quot;calico-typha&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3）创建-calico-网络"><a href="#3）创建-calico-网络" class="headerlink" title="3）创建 calico 网络"></a>3）创建 calico 网络</h4><blockquote><p>🚩 创建前先清空 /etc/cni/net.d 目录下的 cni 网络配置，如 <code>10-flannel.conflist</code> 、<code>10-calico.conflist</code>、<code>calico-kubeconfig</code> 、<code>calico-tls</code> 等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible k8s-node -S -R root -m shell -a &quot;\rm -r /etc/cni/net.d/*&quot;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f ~/kubernetes/network/cfg/calico.yaml<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">configmap/calico-config created<br>customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created<br>clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created<br>clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created<br>clusterrole.rbac.authorization.k8s.io/calico-node created<br>clusterrolebinding.rbac.authorization.k8s.io/calico-node created<br>daemonset.apps/calico-node created<br>serviceaccount/calico-node created<br>deployment.apps/calico-kube-controllers created<br>serviceaccount/calico-kube-controllers created<br>poddisruptionbudget.policy/calico-kube-controllers created<br></code></pre></td></tr></table></figure><h4 id="4）集群状态验证"><a href="#4）集群状态验证" class="headerlink" title="4）集群状态验证"></a>4）集群状态验证</h4><h5 id="1-查看-pod-状态"><a href="#1-查看-pod-状态" class="headerlink" title="1. 查看 pod 状态"></a>1. 查看 pod 状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods -n kube-system<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                                       READY   STATUS    RESTARTS   AGE<br>calico-kube-controllers-5cdd469496-sqqdh   1/1     Running   0          4h<br>calico-node-927gm                          1/1     Running   0          4h<br>calico-node-j5886                          1/1     Running   0          4h<br>calico-node-pbgcb                          1/1     Running   0          4h<br>calico-node-zn4g8                          1/1     Running   0          4h<br></code></pre></td></tr></table></figure><h5 id="2-查看-node-状态"><a href="#2-查看-node-状态" class="headerlink" title="2. 查看 node 状态"></a>2. 查看 node 状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get nodes -n kube-system<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME           STATUS   ROLES    AGE   VERSION<br>k8s-master01   Ready    &lt;none&gt;   5h   v1.18.18<br>k8s-master02   Ready    &lt;none&gt;   5h   v1.18.18<br>k8s-master03   Ready    &lt;none&gt;   5h   v1.18.18<br>k8s-node01     Ready    &lt;none&gt;   5h   v1.18.18<br></code></pre></td></tr></table></figure><h5 id="3-查看路由（BGP-模式）"><a href="#3-查看路由（BGP-模式）" class="headerlink" title="3. 查看路由（BGP 模式）"></a>3. 查看路由（BGP 模式）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip route<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">default via 192.168.3.1 dev eth0 proto static metric 100 <br>10.244.32.128 dev calie5ddea5eea8 scope link <br>blackhole 10.244.32.128/26 proto bird <br>10.244.122.128/26 via 192.168.3.232 dev eth0 proto bird <br>172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 <br>192.168.3.0/24 dev eth0 proto kernel scope link src 192.168.3.231 metric 100 <br></code></pre></td></tr></table></figure><p>相关路由说明:</p><blockquote><ul><li><p><code>10.244.32.128 dev calie5ddea5eea8 scope link</code> : 该路由会将通向容器IP的请求导向 veth <code>calie5ddea5eea8</code>，进而让请求直达容器内的网卡。</p></li><li><p><code>blackhole 10.244.32.128/26 proto bird </code>: 该路由表示发往 <code>10.244.32.128/26</code> 网段的报文都会被丢弃且不会回复源地址，所以是 <code>blackhole</code>。配置这条路由以避免报文被发送到非该网段的外部地址。</p></li><li><p><code>10.244.122.128/26 via 192.168.3.232 dev eth0 proto bird</code>: 要访问 calico 网络中的某个网段，需要以 node IP作为网关，通过 eth0 发包。</p></li></ul></blockquote><h3 id="7、部署必要-Kubernetes集群插件"><a href="#7、部署必要-Kubernetes集群插件" class="headerlink" title="7、部署必要 Kubernetes集群插件"></a>7、部署必要 Kubernetes集群插件</h3><blockquote><p>🌈 插件是Kubernetes集群的附件组件，丰富和完善了集群的功能，这里分别介绍的插件有coredns、Dashboard、Metrics Server，需要注意的是：kuberntes 自带插件的 manifests yaml 文件使用 gcr.io 的 docker registry，国内被墙，需要手动替换为其它 registry 地址或提前在FQ服务器上下载，然后再同步到对应的k8s部署机器上。</p></blockquote><h4 id="1）部署-CoreDNS"><a href="#1）部署-CoreDNS" class="headerlink" title="1）部署 CoreDNS"></a>1）部署 CoreDNS</h4><p><strong>插件介绍 —— CoreDNS:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-CoreDNS/">传送门</a></p><h5 id="1-获取-CoreDNS-manifest"><a href="#1-获取-CoreDNS-manifest" class="headerlink" title="1. 获取 CoreDNS manifest"></a>1. 获取 CoreDNS manifest</h5><blockquote><p>🚩 我们之前在部署 k8s server 端的时候，已经解压了 <code>kubernetes-server-linux-amd64.tar.gz</code> ，其中会有 <code>kubernetes-src.tar.gz</code>，其中包含的是 k8s 的源码。解压后，coredns 的目录是 <code>cluster/addons/dns</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/kubernetes &amp;&amp; \<br>mkdir -p src addons &amp;&amp; \<br>tar xf kubernetes-src.tar.gz -C src &amp;&amp; \<br>cp -a src/cluster/addons/dns/coredns/coredns.yaml.base addons/coredns.yaml<br></code></pre></td></tr></table></figure><h5 id="2-修改-CoreDNS-manifest"><a href="#2-修改-CoreDNS-manifest" class="headerlink" title="2. 修改 CoreDNS manifest"></a>2. 修改 CoreDNS manifest</h5><p>文件路径 <code>~/kubernetes/addons/coredns.yaml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i -e &quot;s/__PILLAR__DNS__DOMAIN__/cluster.local/&quot; -e &quot;s/__PILLAR__DNS__SERVER__/10.0.0.2/&quot; -e &quot;s/__PILLAR__DNS__MEMORY__LIMIT__/170Mi/&quot; -e &quot;s/k8s.gcr.io/coredns/&quot; ~/kubernetes/addons/coredns.yaml<br></code></pre></td></tr></table></figure><h6 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明:"></a>参数说明:</h6><blockquote><ul><li><code>__PILLAR__DNS__DOMAIN__</code>: 集群 DNS 域名，这里替换成 cluster.local，即沿用本地解析</li><li><code>__PILLAR__DNS__SERVER__</code>：集群 DNS 服务 IP，从 SERVICE_CIDR 中预分配一个 IP 即可（注意不要用 CIDR 第一个 IP）</li><li><code>__PILLAR__DNS__MEMORY__LIMIT__</code>: CoreDNS 服务内存最大限制，<code>requests</code> 为 70Mi，limit 多给 100Mi 即可</li><li><code>k8s.gcr.io</code>: k8s 默认的镜像地址国内被墙的，但是在 docker hub 上有官方提供的镜像地址，故可以使用 docke hub 地址</li></ul></blockquote><h5 id="3-创建-CoreDNS"><a href="#3-创建-CoreDNS" class="headerlink" title="3. 创建 CoreDNS"></a>3. 创建 CoreDNS</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f ~/kubernetes/addons/coredns.yaml <br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">serviceaccount/coredns created<br>clusterrole.rbac.authorization.k8s.io/system:coredns created<br>clusterrolebinding.rbac.authorization.k8s.io/system:coredns created<br>configmap/coredns created<br>deployment.apps/coredns created<br>service/kube-dns created<br></code></pre></td></tr></table></figure><h5 id="4-验证-CoreDNS-状态"><a href="#4-验证-CoreDNS-状态" class="headerlink" title="4. 验证 CoreDNS 状态"></a>4. 验证 CoreDNS 状态</h5><p>检查 coredns 功能 (执行下面命令后，稍微等一会儿，确保 READY 状态都是可用的)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pod -n kube-system -o wide|grep coredns<br></code></pre></td></tr></table></figure><p>返回结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">coredns-55f9545c85-dbf67                   1/1     Running   0          44s   10.244.32.128    k8s-master01   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>查看创建的coredns的pod状态,确保没有报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl describe pod -n kube-system coredns-55f9545c85-dbf67<br></code></pre></td></tr></table></figure><p>正确返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">......<br>......<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  2m    default-scheduler  Successfully assigned kube-system/coredns-55f9545c85-dbf67 to k8s-master01<br>  Normal  Pulling    119s  kubelet            Pulling image &quot;coredns/coredns:1.6.5&quot;<br>  Normal  Pulled     92s   kubelet            Successfully pulled image &quot;coredns/coredns:1.6.5&quot;<br>  Normal  Created    92s   kubelet            Created container coredns<br>  Normal  Started    92s   kubelet            Started container coredns<br></code></pre></td></tr></table></figure><h5 id="5-验证-CoreDNS-功能"><a href="#5-验证-CoreDNS-功能" class="headerlink" title="5. 验证 CoreDNS 功能"></a>5. 验证 CoreDNS 功能</h5><h6 id="1⃣️-创建-nginx-demo-的-Deployment-manifest"><a href="#1⃣️-创建-nginx-demo-的-Deployment-manifest" class="headerlink" title="1⃣️ 创建 nginx-demo 的 Deployment  manifest"></a>1⃣️ 创建 nginx-demo 的 Deployment  manifest</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/kubernetes/yaml/nginx-demo.yaml &lt;&lt;EOF<br>apiVersion: v1<br>kind: Deployment<br>metadata:<br>  name: nginx-demo<br>spec:<br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: nginx-demo<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx-demo<br>    spec:<br>      containers:<br>      - name: nginx-demo<br>        image: nginx:stable<br>        ports:<br>        - containerPort: 80<br>EOF<br></code></pre></td></tr></table></figure><h6 id="2⃣️-创建资源"><a href="#2⃣️-创建资源" class="headerlink" title="2⃣️ 创建资源"></a>2⃣️ 创建资源</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f ~/kubernetes/yaml/nginx-demo.yaml<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">deployment.apps/nginx-demo created<br></code></pre></td></tr></table></figure><p>查看 pod 状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pod <br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                          READY   STATUS    RESTARTS   AGE<br>nginx-demo-7fc57f6f87-8sgxm   1/1     Running   0          78s<br>nginx-demo-7fc57f6f87-tzfzh   1/1     Running   0          78s<br></code></pre></td></tr></table></figure><h6 id="3⃣️-暴露-nginx-demo"><a href="#3⃣️-暴露-nginx-demo" class="headerlink" title="3⃣️ 暴露 nginx-demo"></a>3⃣️ 暴露 nginx-demo</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl expose deployment nginx-demo<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service/nginx-demo exposed<br></code></pre></td></tr></table></figure><p>查看 service 状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get svc<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE<br>kubernetes   ClusterIP   10.0.0.1      &lt;none&gt;        443/TCP   2d18h<br>nginx-demo   ClusterIP   10.0.53.182   &lt;none&gt;        80/TCP    3s#<br></code></pre></td></tr></table></figure><h6 id="4⃣️-验证内部解析功能"><a href="#4⃣️-验证内部解析功能" class="headerlink" title="4⃣️ 验证内部解析功能"></a>4⃣️ 验证内部解析功能</h6><blockquote><p>🚩 我们知道 k8s 内部通讯是通过 service 向下找对应 pod 的，每个 service 的解析原理实际上也是遵循 dns 解析原理的，因为如果我们能从另一个 pod 中正确解析 nginx-demo 的 service，则能证明 coredns 内部解析功能是正常的。</p></blockquote><p>再创建另一个 daemonset  <code>dnsutils-demo</code> 用于解析测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; ~/kubernetes/yaml/dnsutils-demo.yml &lt;&lt;EOF<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: dnsutils-demo<br>  labels:<br>    app: dnsutils-demo<br>spec:<br>  type: NodePort<br>  selector:<br>    app: dnsutils-demo<br>  ports:<br>  - name: http<br>    port: 80<br>    targetPort: 80<br>---<br>apiVersion: apps/v1<br>kind: DaemonSet<br>metadata:<br>  name: dnsutils-demo<br>  labels:<br>    addonmanager.kubernetes.io/mode: Reconcile<br>spec:<br>selector:<br>matchLabels:<br>      app: dnsutils-demo<br>  template:<br>    metadata:<br>      labels:<br>        app: dnsutils-demo<br>    spec:<br>      containers:<br>      - name: dnsutils-demo<br>        image: tutum/dnsutils:latest<br>        command:<br>          - sleep<br>          - &quot;3600&quot;<br>        ports:<br>        - containerPort: 80<br>EOF<br></code></pre></td></tr></table></figure><p>创建资源:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f ~/kubernetes/yaml/dnsutils-demo.yml<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">service/dnsutils-demo unchanged<br>daemonset.apps/dnsutils-demo created<br></code></pre></td></tr></table></figure><p>查看 pod 信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pod -o wide<br></code></pre></td></tr></table></figure><p>返回如下, 在每个节点都生成了 dnsutils-demo 的 pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                          READY   STATUS    RESTARTS   AGE    IP               NODE           NOMINATED NODE   READINESS GATES<br>dnsutils-demo-9nbzt           1/1     Running   0          3m8s   10.244.32.129    k8s-master01   &lt;none&gt;           &lt;none&gt;<br>dnsutils-demo-fqcnf           1/1     Running   0          3m8s   10.244.195.1     k8s-master03   &lt;none&gt;           &lt;none&gt;<br>dnsutils-demo-jgkll           1/1     Running   0          3m8s   10.244.85.193    k8s-node01     &lt;none&gt;           &lt;none&gt;<br>dnsutils-demo-n7j9r           1/1     Running   0          3m8s   10.244.122.130   k8s-master02   &lt;none&gt;           &lt;none&gt;<br>nginx-demo-7fc57f6f87-8sgxm   1/1     Running   0          145m   10.244.85.192    k8s-node01     &lt;none&gt;           &lt;none&gt;<br>nginx-demo-7fc57f6f87-tzfzh   1/1     Running   0          145m   10.244.195.0     k8s-master03   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>查看 service 信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get sv<br></code></pre></td></tr></table></figure><p>返回如下，多了 dnsutils-demo 的 svc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE<br>dnsutils-demo   NodePort    10.0.243.227   &lt;none&gt;        80:36461/TCP   4m21s<br>kubernetes      ClusterIP   10.0.0.1       &lt;none&gt;        443/TCP        2d20h<br>nginx-demo      ClusterIP   10.0.53.182    &lt;none&gt;        80/TCP         139m<br></code></pre></td></tr></table></figure><p>依次通过 dnsutils-demo 的 pod 中解析 nginx-demo 的 svc，验证是否可以解析得到对应的 clusterIP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in $(kubectl get pod|awk &#x27;/dnsutils/&#123;print $1&#125;&#x27;|xargs);do kubectl exec $i nslookup nginx-demo;done<br></code></pre></td></tr></table></figure><p>正常返回结果如下，证明可以通过 CoreDNS 解析 service 获取到正确的 ClusterIP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">Server:10.0.0.2<br>Address:10.0.0.2#53<br><br>Name:nginx-demo.default.svc.cluster.local<br>Address: 10.0.53.182<br><br>Server:10.0.0.2<br>Address:10.0.0.2#53<br><br>Name:nginx-demo.default.svc.cluster.local<br>Address: 10.0.53.182<br><br>Server:10.0.0.2<br>Address:10.0.0.2#53<br><br>Name:nginx-demo.default.svc.cluster.local<br>Address: 10.0.53.182<br><br>Server:10.0.0.2<br>Address:10.0.0.2#53<br><br>Name:nginx-demo.default.svc.cluster.local<br>Address: 10.0.53.182<br><br></code></pre></td></tr></table></figure><h6 id="5⃣️-验证外部解析功能"><a href="#5⃣️-验证外部解析功能" class="headerlink" title="5⃣️ 验证外部解析功能"></a>5⃣️ 验证外部解析功能</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl exec -it  nginx-demo-7fc57f6f87-8sgxm /bin/bash<br></code></pre></td></tr></table></figure><p>进入pod后查看 <code>/etc/resolv.conf</code>。确保 pod 容器中<code>/etc/resolv.conf</code> 里的 nameserver 地址为 kubelet 配置文件中配置的 clusterDNS 以及 clusterDomain。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@nginx-demo-7fc57f6f87-8sgxm:/# cat /etc/resolv.conf <br>nameserver 10.0.0.2<br>search default.svc.cluster.local svc.cluster.local cluster.local<br>options ndots:5<br></code></pre></td></tr></table></figure><blockquote><p>🚩 官方提供的 CoreDNS manifest 中 DNS 相关 configmap 中 <code>forward . /etc/resolv.conf</code> 的配置表示 CoreDNS 会继承宿主机本地 <code>/etc/resolv.conf</code> 中的 nameserver，因此如果 CoreDNS 如果功能正常的话，我们在 pod 内即可进行正常的 dns 解析公网域名，如 <code>www.baidu.com</code> 等。</p></blockquote><p>在 pod 内安装 ping，nginx 默认提供的镜像 OS 为 Debian，使用 apt 进行包管理，自行安装 ping 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br>apt-get install inetutils-ping<br></code></pre></td></tr></table></figure><p>安装完成后，ping baidu，验证解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping -c4 www.baidu.com<br></code></pre></td></tr></table></figure><p>正常返回如下，说明外部 dns 解析功能正常:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">PING www.a.shifen.com (180.101.49.12): 56 data bytes<br>64 bytes from 180.101.49.12: icmp_seq=0 ttl=47 time=8.186 ms<br>64 bytes from 180.101.49.12: icmp_seq=1 ttl=47 time=8.048 ms<br>64 bytes from 180.101.49.12: icmp_seq=2 ttl=47 time=7.854 ms<br>64 bytes from 180.101.49.12: icmp_seq=3 ttl=47 time=7.688 ms<br>--- www.a.shifen.com ping statistics ---<br>4 packets transmitted, 4 packets received, 0% packet loss<br>round-trip min/avg/max/stddev = 7.688/7.944/8.186/0.189 ms<br></code></pre></td></tr></table></figure><p>也可以通过 dnsutils 进行解析查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl exec dnsutils-demo-9nbzt nslookup www.baidu.com<br></code></pre></td></tr></table></figure><p>正常返回如下，可以通过 CoreDNS 解析到外部域名:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">Server:10.0.0.2<br>Address:10.0.0.2#53<br><br>Non-authoritative answer:<br>www.baidu.comcanonical name = www.a.shifen.com.<br>Name:www.a.shifen.com<br>Address: 180.101.49.12<br>Name:www.a.shifen.com<br>Address: 180.101.49.11<br></code></pre></td></tr></table></figure><h4 id="2）部署-dashboard"><a href="#2）部署-dashboard" class="headerlink" title="2）部署 dashboard"></a>2）部署 dashboard</h4><p><strong>插件介绍 —— Dashboard:</strong> <a href="https://tareya.github.io/2021/10/21/Kubernetes-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D-%E2%80%94%E2%80%94-Dashboard/">传送们</a></p><h5 id="1-获取-Dashboard-manifest"><a href="#1-获取-Dashboard-manifest" class="headerlink" title="1. 获取 Dashboard manifest"></a>1. 获取 Dashboard manifest</h5><blockquote><p>🚩 我们之前在部署 coredns 的时候，已经解压了 <code>kubernetes-src.tar.gz</code>，dashboard 的目录是 <code>cluster/addons/dashboard</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/kubernetes/addons/dashboard &amp;&amp; \<br>wget -c https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml -O  ~/kubernetes/addons/dashboard/recommended.yaml<br></code></pre></td></tr></table></figure><h5 id="2-修改-Dashboard-manifest"><a href="#2-修改-Dashboard-manifest" class="headerlink" title="2. 修改 Dashboard manifest"></a>2. 修改 Dashboard manifest</h5><p>文件路径 <code>~/kubernetes/addons/dashboard/recommended.yaml </code>，修改文件，将 service 类型改为 NodePort，这样就外部可以直接通过访问 NodeIP:NodePort 访问 Dashboard。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">...</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><span class="hljs-comment"># 新增</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30443</span><span class="hljs-comment"># 新增</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h5 id="3-创建-Dashboard"><a href="#3-创建-Dashboard" class="headerlink" title="3. 创建 Dashboard"></a>3. 创建 Dashboard</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/kubernetes/addons/dashboard/ &amp;&amp; \<br>kubectl apply -f .<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">namespace/kubernetes-dashboard created<br>serviceaccount/kubernetes-dashboard created<br>service/kubernetes-dashboard created<br>secret/kubernetes-dashboard-certs created<br>secret/kubernetes-dashboard-csrf created<br>secret/kubernetes-dashboard-key-holder created<br>configmap/kubernetes-dashboard-settings created<br>role.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created<br>rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>deployment.apps/kubernetes-dashboard created<br>service/dashboard-metrics-scraper created<br>deployment.apps/dashboard-metrics-scraper created<br></code></pre></td></tr></table></figure><h5 id="4-验证-Dashboard-状态"><a href="#4-验证-Dashboard-状态" class="headerlink" title="4. 验证 Dashboard 状态"></a>4. 验证 Dashboard 状态</h5><p>获取 dashboard pod 信息 (执行下面命令后，稍微等一会儿，确保 READY 状态都是可用的)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pod -A -o wide|grep dashboard<br></code></pre></td></tr></table></figure><p>返回结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubernetes-dashboard   dashboard-metrics-scraper-6b4884c9d5-kzrdw   1/1     Running   0          81s     10.244.195.4     k8s-master03   &lt;none&gt;           &lt;none&gt;<br>kubernetes-dashboard   kubernetes-dashboard-7b544877d5-ngbts        1/1     Running   0          81s     10.244.85.197    k8s-node01     &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>查看创建的 dashboard 的 pod 状态，确保没有报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl describe pod -n kubernetes-dashboard kubernetes-dashboard-7b544877d5-ngbts<br></code></pre></td></tr></table></figure><p>正确返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">......<br>......<br>Events:<br>  Type    Reason     Age   From               Message<br>  ----    ------     ----  ----               -------<br>  Normal  Scheduled  118s  default-scheduler  Successfully assigned kubernetes-dashboard/kubernetes-dashboard-7b544877d5-ngbts to k8s-node01<br>  Normal  Pulling    118s  kubelet            Pulling image &quot;kubernetesui/dashboard:v2.0.0&quot;<br>  Normal  Pulled     102s  kubelet            Successfully pulled image &quot;kubernetesui/dashboard:v2.0.0&quot;<br>  Normal  Created    102s  kubelet            Created container kubernetes-dashboard<br>  Normal  Started    102s  kubelet            Started container kubernetes-dashboard<br></code></pre></td></tr></table></figure><p>查看分配的 NodePort </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get svc -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><p>正常返回如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME                        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE<br>dashboard-metrics-scraper   ClusterIP   10.0.251.223   &lt;none&gt;        8000/TCP        2m38s<br>kubernetes-dashboard        NodePort    10.0.73.122    &lt;none&gt;        443:30443/TCP   2m38s<br></code></pre></td></tr></table></figure><h5 id="5-通过-kube-apiserver-外部访问-dashboard"><a href="#5-通过-kube-apiserver-外部访问-dashboard" class="headerlink" title="5. 通过 kube-apiserver 外部访问 dashboard"></a>5. 通过 kube-apiserver 外部访问 dashboard</h5><h6 id="1⃣️-导入客户端证书"><a href="#1⃣️-导入客户端证书" class="headerlink" title="1⃣️ 导入客户端证书"></a>1⃣️ 导入客户端证书</h6><blockquote><p>⚠️  <strong>注意</strong></p><p>需要注意，外部访问必须通过 kube-apiserver 的安全端口(https)访问 dashbaord，访问时浏览器需要进行认证，否则会被 kube-apiserver 拒绝访问。报错如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">services &quot;https:kubernetes-dashboard:&quot; is forbidden: User &quot;system:anonymous&quot; cannot get resource &quot;services/proxy&quot; in API group &quot;&quot; in the namespace &quot;kube-system&quot;<br></code></pre></td></tr></table></figure><p><strong>Mac OS系统客户机上导入证书的方法:</strong></p><p>1）创建客户端证书</p><p>需要使用我们一开始生成的生成的 admin 证书对，创建的客户端证书为 Chrome 或 Firefox 识别的 p12 格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl pkcs12 -export  -out kube-admin.pfx -name &quot;kubernetes-client&quot; -inkey /data/applications/kubernetes/ssl/admin-key.pem -in /data/applications/kubernetes/ssl/admin.pem -certfile /data/applications/kubernetes/ssl/ca.pem<br></code></pre></td></tr></table></figure><p>返回交互命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Enter Export Password:                      # 这里输入自己设定的任意密码，比如&quot;123456&quot;<br>Verifying - Enter Export Password:          # 确认密码: 123456<br></code></pre></td></tr></table></figure><p>2）本地导入证书</p><p>将生成的客户端证书拷贝到本地，在 “钥匙串访问” =&gt; “系统” =&gt; “添加钥匙串”，导入客户端证书（导入时会提示输入证书密码，即 “123456”），如下图</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211012171934292.png" alt="image-20211012171934292"></p><p>3）设置 kubernetes （即 apiserver的）tls 证书永久信任</p><p>点击Mac本上的”<strong>钥匙串访问</strong>“ -&gt; “<strong>系统</strong>“ -&gt; “<strong>证书</strong>“ -&gt; “<strong>kebernetes</strong>“(双击里面的”<strong>信任</strong>“，改成”<strong>始终信任</strong>“),如下图：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211012171426530.png" alt="image-20211012171426530"></p><p>清除浏览器历史记录，一定要重启浏览器，接着访问 apiserver地址，接着会提示选择一个浏览器证书，会提示证书认证, 然后再次访问 apiserver，发现相应的 metrics 数据就成功显示出来了！！(注意，如果失败了。则可以删除证书，然后重新生成，重新导入再跟着操作步骤来一遍，清除浏览器缓存，重启浏览器，选择导入的证书，再次访问即可！）</p><p>访问 <a href="https://192.168.3.231:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login%EF%BC%8C%E4%BC%9A%E6%9C%89%E5%A6%82%E4%B8%8B%E8%AE%A4%E8%AF%81%E6%8F%90%E7%A4%BA">https://192.168.3.231:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login，会有如下认证提示</a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211012172918878.png" alt="image-20211012172918878"></p><p>选择证书后，即跳转到 dashboard 的认证页面</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211012182139093.png" alt="image-20211012182139093"></p></blockquote><h6 id="2⃣️-创建登录-Dashboard-的-token"><a href="#2⃣️-创建登录-Dashboard-的-token" class="headerlink" title="2⃣️ 创建登录 Dashboard 的 token"></a>2⃣️ 创建登录 Dashboard 的 token</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建 service account</span><br>kubectl create sa dashboard-admin -n kube-system<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建 clusterrolebinding</span> <br>kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 获取 token</span><br>ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk &#x27;&#123;print $1&#125;&#x27;)<br>DASHBOARD_LOGIN_TOKEN=$(kubectl describe secret -n kube-system $ADMIN_SECRET| grep -E &#x27;^token&#x27; | awk &#x27;&#123;print $2&#125;&#x27;)<br>echo $DASHBOARD_LOGIN_TOKEN<br></code></pre></td></tr></table></figure><h6 id="3⃣️-创建登录-Dashboard-的-kubeconfig-配置文件（推荐）"><a href="#3⃣️-创建登录-Dashboard-的-kubeconfig-配置文件（推荐）" class="headerlink" title="3⃣️ 创建登录 Dashboard 的 kubeconfig 配置文件（推荐）"></a>3⃣️ 创建登录 Dashboard 的 kubeconfig 配置文件（推荐）</h6><p>dashboard 默认只支持 token 认证（不支持 client 证书认证），所以如果使用 Kubeconfig 文件，需要将 token 写入到该文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/data/applications/kubernetes/ssl/ca.pem \<br>  --embed-certs=true \<br>  --server=https://192.168.3.231:6443 \<br>  --kubeconfig=dashboard.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置客户端认证参数，使用上面创建的 Token</span><br>kubectl config set-credentials dashboard_user \<br>  --token=$&#123;DASHBOARD_LOGIN_TOKEN&#125; \<br>  --kubeconfig=dashboard.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=dashboard_user \<br>  --kubeconfig=dashboard.kubeconfig<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=dashboard.kubeconfig<br></code></pre></td></tr></table></figure><p>将上面生成的 dashboard.kubeconfig 文件拷贝到本地，然后使用这个文件登录 Dashboard 即可，访问结果如下图:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20211012182619869.png" alt="image-20211012182619869"></p><blockquote><p>🚩 <strong>这里由于缺少Heapster或metrics-server插件，当前dashboard还不能展示 Pod、Nodes 的 CPU、内存等统计数据和图表。</strong></p></blockquote><h4 id="3）部署-metrics-server"><a href="#3）部署-metrics-server" class="headerlink" title="3）部署 metrics-server"></a>3）部署 metrics-server</h4><h4 id="4）部署-kube-state-metrics"><a href="#4）部署-kube-state-metrics" class="headerlink" title="4）部署 kube-state-metrics"></a>4）部署 kube-state-metrics</h4><h4 id="5）部署-prometheus"><a href="#5）部署-prometheus" class="headerlink" title="5）部署 prometheus"></a>5）部署 prometheus</h4>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第12章、项目管理高级知识</title>
    <link href="/2021/09/21/%E7%AC%AC12%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/09/21/%E7%AC%AC12%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第12章、项目管理高级知识"><a href="#第12章、项目管理高级知识" class="headerlink" title="第12章、项目管理高级知识"></a>第12章、项目管理高级知识</h1><span id="more"></span><h2 id="一、知识管理"><a href="#一、知识管理" class="headerlink" title="一、知识管理"></a>一、知识管理</h2><h3 id="1、知识的概念"><a href="#1、知识的概念" class="headerlink" title="1、知识的概念"></a>1、知识的概念</h3><h4 id="1）知识的分类"><a href="#1）知识的分类" class="headerlink" title="1）知识的分类"></a>1）知识的分类</h4><h5 id="1-显性知识"><a href="#1-显性知识" class="headerlink" title="1. 显性知识"></a>1. 显性知识</h5><h5 id="2-隐性知识"><a href="#2-隐性知识" class="headerlink" title="2. 隐性知识"></a>2. 隐性知识</h5><h4 id="2）知识的特征"><a href="#2）知识的特征" class="headerlink" title="2）知识的特征"></a>2）知识的特征</h4><h4 id="3）知识的管理工具"><a href="#3）知识的管理工具" class="headerlink" title="3）知识的管理工具"></a>3）知识的管理工具</h4><h4 id="4）隐性知识的共享"><a href="#4）隐性知识的共享" class="headerlink" title="4）隐性知识的共享"></a>4）隐性知识的共享</h4><h5 id="1-共享的方法"><a href="#1-共享的方法" class="headerlink" title="1. 共享的方法"></a>1. 共享的方法</h5><ul><li>编码化</li><li>面对面交流</li><li>人员轮换和网络</li></ul><h5 id="2-共享的途径"><a href="#2-共享的途径" class="headerlink" title="2. 共享的途径"></a>2. 共享的途径</h5><ul><li>创建学习型组织</li><li>构建内部的信任机制</li><li>编码化</li><li></li></ul><h2 id="二、战略管理"><a href="#二、战略管理" class="headerlink" title="二、战略管理"></a>二、战略管理</h2><h3 id="1、组织战略"><a href="#1、组织战略" class="headerlink" title="1、组织战略"></a>1、组织战略</h3><h4 id="1）战略目标"><a href="#1）战略目标" class="headerlink" title="1）战略目标"></a>1）战略目标</h4><h4 id="2）战略方针"><a href="#2）战略方针" class="headerlink" title="2）战略方针"></a>2）战略方针</h4><h4 id="3）战略实施能力"><a href="#3）战略实施能力" class="headerlink" title="3）战略实施能力"></a>3）战略实施能力</h4><h4 id="4）战略措施"><a href="#4）战略措施" class="headerlink" title="4）战略措施"></a>4）战略措施</h4><h3 id="2、战略实施过程分解"><a href="#2、战略实施过程分解" class="headerlink" title="2、战略实施过程分解"></a>2、战略实施过程分解</h3><h3 id="3、组织事业战略类型"><a href="#3、组织事业战略类型" class="headerlink" title="3、组织事业战略类型"></a>3、组织事业战略类型</h3><h4 id="1）防御者战略（Defender）"><a href="#1）防御者战略（Defender）" class="headerlink" title="1）防御者战略（Defender）"></a>1）防御者战略（Defender）</h4><h4 id="2）探索者战略（Prospector）"><a href="#2）探索者战略（Prospector）" class="headerlink" title="2）探索者战略（Prospector）"></a>2）探索者战略（Prospector）</h4><h4 id="3）分析者战略（Anaiyser）"><a href="#3）分析者战略（Anaiyser）" class="headerlink" title="3）分析者战略（Anaiyser）"></a>3）分析者战略（Anaiyser）</h4><h4 id="4）反应者战略（Reactor）"><a href="#4）反应者战略（Reactor）" class="headerlink" title="4）反应者战略（Reactor）"></a>4）反应者战略（Reactor）</h4><h3 id="4、战略组织类型"><a href="#4、战略组织类型" class="headerlink" title="4、战略组织类型"></a>4、战略组织类型</h3><h4 id="1）指挥型"><a href="#1）指挥型" class="headerlink" title="1）指挥型"></a>1）指挥型</h4><h4 id="2）变革型"><a href="#2）变革型" class="headerlink" title="2）变革型"></a>2）变革型</h4><h4 id="3）合作型"><a href="#3）合作型" class="headerlink" title="3）合作型"></a>3）合作型</h4><h4 id="4）文化型"><a href="#4）文化型" class="headerlink" title="4）文化型"></a>4）文化型</h4><h4 id="5）增长型"><a href="#5）增长型" class="headerlink" title="5）增长型"></a>5）增长型</h4><h3 id="5、组织战略层次"><a href="#5、组织战略层次" class="headerlink" title="5、组织战略层次"></a>5、组织战略层次</h3><h4 id="1）目标层"><a href="#1）目标层" class="headerlink" title="1）目标层"></a>1）目标层</h4><h4 id="2）方针层"><a href="#2）方针层" class="headerlink" title="2）方针层"></a>2）方针层</h4><h4 id="3）行为层"><a href="#3）行为层" class="headerlink" title="3）行为层"></a>3）行为层</h4><h2 id="三、组织级项目管理"><a href="#三、组织级项目管理" class="headerlink" title="三、组织级项目管理"></a>三、组织级项目管理</h2><h3 id="1、组织级项目管理成熟度模型（OPM3）"><a href="#1、组织级项目管理成熟度模型（OPM3）" class="headerlink" title="1、组织级项目管理成熟度模型（OPM3）"></a>1、组织级项目管理成熟度模型（OPM3）</h3><h2 id="四、流程管理"><a href="#四、流程管理" class="headerlink" title="四、流程管理"></a>四、流程管理</h2><h3 id="1、企业流程分类"><a href="#1、企业流程分类" class="headerlink" title="1、企业流程分类"></a>1、企业流程分类</h3><h4 id="1）生产流程层"><a href="#1）生产流程层" class="headerlink" title="1）生产流程层"></a>1）生产流程层</h4><h4 id="2）运作层"><a href="#2）运作层" class="headerlink" title="2）运作层"></a>2）运作层</h4><h4 id="3）计划层"><a href="#3）计划层" class="headerlink" title="3）计划层"></a>3）计划层</h4><h4 id="4）战略层"><a href="#4）战略层" class="headerlink" title="4）战略层"></a>4）战略层</h4><h3 id="2、流程分析工具"><a href="#2、流程分析工具" class="headerlink" title="2、流程分析工具"></a>2、流程分析工具</h3><h4 id="1）业务流程图"><a href="#1）业务流程图" class="headerlink" title="1）业务流程图"></a>1）业务流程图</h4><h4 id="2）业务活动图示"><a href="#2）业务活动图示" class="headerlink" title="2）业务活动图示"></a>2）业务活动图示</h4><h4 id="3）UML的活动图"><a href="#3）UML的活动图" class="headerlink" title="3）UML的活动图"></a>3）UML的活动图</h4><h4 id="4）标杆瞄准"><a href="#4）标杆瞄准" class="headerlink" title="4）标杆瞄准"></a>4）标杆瞄准</h4><h4 id="5）IDEF"><a href="#5）IDEF" class="headerlink" title="5）IDEF"></a>5）IDEF</h4><h4 id="6）DEMO"><a href="#6）DEMO" class="headerlink" title="6）DEMO"></a>6）DEMO</h4><h4 id="7）Petri-网"><a href="#7）Petri-网" class="headerlink" title="7）Petri 网"></a>7）Petri 网</h4><h4 id="8）业务流程建模语言"><a href="#8）业务流程建模语言" class="headerlink" title="8）业务流程建模语言"></a>8）业务流程建模语言</h4><h3 id="3、业务流程评估"><a href="#3、业务流程评估" class="headerlink" title="3、业务流程评估"></a>3、业务流程评估</h3><h4 id="1）增值性分析"><a href="#1）增值性分析" class="headerlink" title="1）增值性分析"></a>1）增值性分析</h4><p>1.定义</p><p>2.评价活动的三个参数</p><h4 id="2）流程设计的正确性检验"><a href="#2）流程设计的正确性检验" class="headerlink" title="2）流程设计的正确性检验"></a>2）流程设计的正确性检验</h4><h4 id="3）业务流程方案的评价"><a href="#3）业务流程方案的评价" class="headerlink" title="3）业务流程方案的评价"></a>3）业务流程方案的评价</h4><h3 id="4、敏捷项目管理模式的结构"><a href="#4、敏捷项目管理模式的结构" class="headerlink" title="4、敏捷项目管理模式的结构"></a>4、敏捷项目管理模式的结构</h3><h4 id="1）构想"><a href="#1）构想" class="headerlink" title="1）构想"></a>1）构想</h4><h4 id="2）推测"><a href="#2）推测" class="headerlink" title="2）推测"></a>2）推测</h4><h4 id="3）探索"><a href="#3）探索" class="headerlink" title="3）探索"></a>3）探索</h4><h4 id="4）适应"><a href="#4）适应" class="headerlink" title="4）适应"></a>4）适应</h4><h4 id="5）结束"><a href="#5）结束" class="headerlink" title="5）结束"></a>5）结束</h4><h2 id="五、项目、项目集、项目组合管理"><a href="#五、项目、项目集、项目组合管理" class="headerlink" title="五、项目、项目集、项目组合管理"></a>五、项目、项目集、项目组合管理</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><h4 id="1）项目"><a href="#1）项目" class="headerlink" title="1）项目"></a>1）项目</h4><h4 id="2）项目集"><a href="#2）项目集" class="headerlink" title="2）项目集"></a>2）项目集</h4><h4 id="3）项目组合"><a href="#3）项目组合" class="headerlink" title="3）项目组合"></a>3）项目组合</h4><h2 id="六、成熟度模型、量化管理"><a href="#六、成熟度模型、量化管理" class="headerlink" title="六、成熟度模型、量化管理"></a>六、成熟度模型、量化管理</h2><h3 id="1、组织项目管理成熟度模型（OPM3）"><a href="#1、组织项目管理成熟度模型（OPM3）" class="headerlink" title="1、组织项目管理成熟度模型（OPM3）"></a>1、组织项目管理成熟度模型（OPM3）</h3><h3 id="2、能力成熟度模型集成（CMMI）"><a href="#2、能力成熟度模型集成（CMMI）" class="headerlink" title="2、能力成熟度模型集成（CMMI）"></a>2、能力成熟度模型集成（CMMI）</h3><p>作业：</p><p>1、区分显性知识与隐性知识</p><p>2、知识管理工具</p><p>3、组织事业战略类型</p><p>4、战略组织类型</p><p>5、组织战略层次</p><p>6、组织级项目管理成熟度模型（OPM3）四个梯级</p><p>7、敏捷项目管理模式的结构</p>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes calico 网络组件升级</title>
    <link href="/2021/09/18/Kubernetes-calico-%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6%E5%8D%87%E7%BA%A7/"/>
    <url>/2021/09/18/Kubernetes-calico-%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-calico-网络组件升级"><a href="#Kubernetes-calico-网络组件升级" class="headerlink" title="Kubernetes calico 网络组件升级"></a>Kubernetes calico 网络组件升级</h1><span id="more"></span><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>由于原本业务架构设计的不合理性，只是非常片面的将服务在代码层面进行了拆分，这就导致了服务数量的急剧扩张，而从根本上来说大多数拆分出的服务实际上却是起不到微服务的作用的，出于业绩需求将上游服务人为的再拆分上下游，而这类上下游服务却又都依赖于中台应用，并且服务聚合、治理、API网关、服务发现等方面都尚不完善，原子服务之间直接通过 http 进行互相通信，带来的除了调用链混乱外，还有更多的无谓的网络消耗（毕竟原本2个服务之间的沟通渠道为2，n个服务之间就会变成 n*(n-1)/2，交互成本就是网络消耗的不断累加）。</p><p>因此，由于 K8S 整体迁移工作进展较快，加以服务数量不断的增多（副本数近千）、服务间通信的复杂，不必要的网络通信过多、迭代的频率过高、本身出于公有云资源的成本考虑，所使用的服务器资源也只是最大化平衡后的最低门槛资源，这诸多的因素，都直接对基础的 flannel 网络组件造成了巨大的压力，如果考虑以目前的趋势而毫无改制和节制的话，在副本数超过千数后，整体网络的性能就会急剧下降，到1500左右时，网络组件就会出现较为频繁的崩溃。</p><p>原本采用 flannel 的主要因素在于维护相对简单，对于维护人员的人数以及技术条件不会太高，比较适合单人维护多集群的情况，但是以目前的情况来说，flannel 已经不足以支撑之后1年半载内可能的发展需要了，那么，是时候进行升级换代了。</p><h2 id="二、知识讲解"><a href="#二、知识讲解" class="headerlink" title="二、知识讲解"></a>二、知识讲解</h2><h3 id="1、Kubernetes-内的网络通信"><a href="#1、Kubernetes-内的网络通信" class="headerlink" title="1、Kubernetes 内的网络通信"></a>1、Kubernetes 内的网络通信</h3><h4 id="1）Container-间的通信"><a href="#1）Container-间的通信" class="headerlink" title="1）Container 间的通信"></a>1）Container 间的通信</h4><p>我们知道，一个 K8S 的 Pod 中是可以存在多个容器（Container）的，也就是我们常说的 docker、Podman 之类的。在同一个 Pod 内，容器之间共享网络命名空间，故其之间通过 loopback 口即可实现通信（127.0.0.1:Port），其整体的网络模式仍是继承自 docker 网桥通信的思路，Pod 即相当于一个独立的宿主对象，一个虚拟化沙盒，其通信原理如下图：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/K8S%20Container%E9%97%B4%E9%80%9A%E4%BF%A1.jpg" alt="K8S Container间通信"></p><h4 id="2）同节点-Pod-间的通信"><a href="#2）同节点-Pod-间的通信" class="headerlink" title="2）同节点 Pod 间的通信"></a>2）同节点 Pod 间的通信</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/K8S%20%E5%90%8C%E8%8A%82%E7%82%B9Pod%E9%97%B4%E9%80%9A%E4%BF%A1.jpg" alt="K8S 同节点Pod间通信"></p><h4 id="3）Pod-和-Service-间的通信"><a href="#3）Pod-和-Service-间的通信" class="headerlink" title="3）Pod 和 Service 间的通信"></a>3）Pod 和 Service 间的通信</h4><h4 id="4）Service-和集群外部的通信"><a href="#4）Service-和集群外部的通信" class="headerlink" title="4）Service 和集群外部的通信"></a>4）Service 和集群外部的通信</h4><h4 id="5）不同节点-Pod-间通信"><a href="#5）不同节点-Pod-间通信" class="headerlink" title="5）不同节点 Pod 间通信"></a>5）不同节点 Pod 间通信</h4><h5 id="1-关于-CNI"><a href="#1-关于-CNI" class="headerlink" title="1. 关于 CNI"></a>1. 关于 CNI</h5><p>CNI，即 Container Network Interface（容器网络接口）。顾名思义，它是一种为容器平台的网络所建立的标准协议规范，使用这种标准可以让不同的容器平台（如，Kubernetes、Swarm、Mesos 等），可以通过相同的接口调用不同的网络插件。集群内的跨节点通信涉及到了不同子网内的通信，仅靠 docker0 是无法实现的，这时候就需要借助 CNI 网络插件来实现。</p><p>目前 K8S 所能够支持的 CNI 组件种类很多，如 host-local、bridge、dhcp、flannel、calico、ipvlan、tuning vlan 等等，其虽然现在 K8S 在尝试推动使用 Podman 来取代 Docker，但是目前市面上 Docker 仍然是 K8S 集群最主要的 Container 方案，因此从某种程度上来说，在说 K8S 网络方案的同时其实就是在说 Docker 的网络方案。</p><h5 id="2-关于-Docker-的跨节点通信模式"><a href="#2-关于-Docker-的跨节点通信模式" class="headerlink" title="2. 关于 Docker 的跨节点通信模式"></a>2. 关于 Docker 的跨节点通信模式</h5><p>在 Docker 中，主流的跨节点通信方案主要有以下几种：</p><h6 id="1⃣️-基于隧道的-overlay-网络"><a href="#1⃣️-基于隧道的-overlay-网络" class="headerlink" title="1⃣️ 基于隧道的 overlay 网络"></a>1⃣️ 基于隧道的 overlay 网络</h6><p>Docker 原生的 overlay 网络是基于 vxlan 隧道的方式实现的，新版本的 flannel 版本也是以这种方式实现 overlay 网络的。</p><h6 id="2⃣️-基于包封装的-overlay-网络"><a href="#2⃣️-基于包封装的-overlay-网络" class="headerlink" title="2⃣️ 基于包封装的 overlay 网络"></a>2⃣️ 基于包封装的 overlay 网络</h6><p>基于 UDP 封装等数据包包装方式，实现跨主机网络，比如 weave和早期的 flannel。</p><h6 id="3⃣️-基于三层实现的-SDN-网络"><a href="#3⃣️-基于三层实现的-SDN-网络" class="headerlink" title="3⃣️ 基于三层实现的 SDN 网络"></a>3⃣️ 基于三层实现的 SDN 网络</h6><p>基于三层协议和路由，直接在三层实现跨主机网络，并且通过 iptables 实现网络的安全隔离，最典型的就是 Project Calico。</p><h5 id="3-通信方式"><a href="#3-通信方式" class="headerlink" title="3. 通信方式"></a>3. 通信方式</h5><h3 id="2、Kubernetes-网络组件简介"><a href="#2、Kubernetes-网络组件简介" class="headerlink" title="2、Kubernetes 网络组件简介"></a>2、Kubernetes 网络组件简介</h3><h4 id="1）关于-Flannel"><a href="#1）关于-Flannel" class="headerlink" title="1）关于 Flannel"></a>1）关于 Flannel</h4><h4 id="2）关于-Calico"><a href="#2）关于-Calico" class="headerlink" title="2）关于 Calico"></a>2）关于 Calico</h4><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章、Ansible API</title>
    <link href="/2021/09/16/%E7%AC%AC5%E7%AB%A0%E3%80%81Ansible-API/"/>
    <url>/2021/09/16/%E7%AC%AC5%E7%AB%A0%E3%80%81Ansible-API/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章、Ansible-API"><a href="#第5章、Ansible-API" class="headerlink" title="第5章、Ansible API"></a>第5章、Ansible API</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、Ansible Roles</title>
    <link href="/2021/09/16/%E7%AC%AC4%E7%AB%A0%E3%80%81Ansible-Roles/"/>
    <url>/2021/09/16/%E7%AC%AC4%E7%AB%A0%E3%80%81Ansible-Roles/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Ansible-Roles"><a href="#第4章、Ansible-Roles" class="headerlink" title="第4章、Ansible Roles"></a>第4章、Ansible Roles</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、Ansible PlayBooks</title>
    <link href="/2021/09/16/%E7%AC%AC3%E7%AB%A0%E3%80%81Ansible-PlayBooks/"/>
    <url>/2021/09/16/%E7%AC%AC3%E7%AB%A0%E3%80%81Ansible-PlayBooks/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、Ansible-PlayBooks"><a href="#第3章、Ansible-PlayBooks" class="headerlink" title="第3章、Ansible PlayBooks"></a>第3章、Ansible PlayBooks</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Ansible Modules</title>
    <link href="/2021/09/16/%E7%AC%AC2%E7%AB%A0%E3%80%81Ansible-Modules/"/>
    <url>/2021/09/16/%E7%AC%AC2%E7%AB%A0%E3%80%81Ansible-Modules/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Ansible-Modules"><a href="#第2章、Ansible-Modules" class="headerlink" title="第2章、Ansible Modules"></a>第2章、Ansible Modules</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、Ansible 简介</title>
    <link href="/2021/09/16/%E7%AC%AC1%E7%AB%A0%E3%80%81Ansible-%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/09/16/%E7%AC%AC1%E7%AB%A0%E3%80%81Ansible-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、Ansible-简介"><a href="#第1章、Ansible-简介" class="headerlink" title="第1章、Ansible 简介"></a>第1章、Ansible 简介</h1><span id="more"></span><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/ansible.jpeg" alt="ansible"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、通过 client-go 调用 k8s api</title>
    <link href="/2021/09/16/%E7%AC%AC2%E7%AB%A0%E3%80%81%E9%80%9A%E8%BF%87-client-go-%E8%B0%83%E7%94%A8-k8s-api/"/>
    <url>/2021/09/16/%E7%AC%AC2%E7%AB%A0%E3%80%81%E9%80%9A%E8%BF%87-client-go-%E8%B0%83%E7%94%A8-k8s-api/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、通过-go-client-调用-k8s-api"><a href="#第2章、通过-go-client-调用-k8s-api" class="headerlink" title="第2章、通过 go-client 调用 k8s api"></a>第2章、通过 go-client 调用 k8s api</h1><span id="more"></span><h2 id="一、client-go-简介"><a href="#一、client-go-简介" class="headerlink" title="一、client-go 简介"></a>一、client-go 简介</h2><h3 id="1、client-go-是什么？"><a href="#1、client-go-是什么？" class="headerlink" title="1、client-go 是什么？"></a>1、client-go 是什么？</h3><blockquote><p>🚩 <strong>官方解释:</strong></p><p>Go clients for talking to a kubernetes cluster.</p><p><a href="https://github.com/kubernetes/client-go">官方 github</a></p></blockquote><p>简单的说，client-go 就是 kubernetes 官方提供的 Go语言 SDK，类似的还有 java、python 等语言的client SDK，不过 client-go 是其中最古老的一个，毕竟 K8S 本身基于 Go开发的。并且，client-go 没有使用 Swagger 生成器，而是使用了 K8S 源代码的生成工具，这使得使用 client-go 生成的会是 K8S 风格的对象和序列化程序。</p><p>事实上，client-go 是一组包的集合，提供了四种访问 APIserver 的方式（从 REST 风格原语到复杂 client），并提供了丰富的 API 以此满足不同程度的编程需求。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/client-go%E7%BB%93%E6%9E%84.jpg" alt="client-go结构"></p><h3 id="2、client-go-可以做什么？"><a href="#2、client-go-可以做什么？" class="headerlink" title="2、client-go 可以做什么？"></a>2、client-go 可以做什么？</h3><p>首先，通过 client-go 的 client ，Go 应用就可以访问 Kubernetes 的 APIserver，然后我们就可以通过编程的方式对 kubernetes 的资源进行 crud 操作了。</p><p>其次，client-go 还为 controller 和 operator 提供了重要的支持，使得自定义客户端（也是类 kubectl 工具）成为可能。如下图，使用 client-go 的 informer 机制就可以将 controller 关注的资源变化及时反馈回来，使得 controller 能够及时得去响应变化。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/client-go%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpeg" alt="client-go 工作原理"></p><h3 id="3、环境说明"><a href="#3、环境说明" class="headerlink" title="3、环境说明"></a>3、环境说明</h3><h4 id="1）学习-client-go-重要前提条件"><a href="#1）学习-client-go-重要前提条件" class="headerlink" title="1）学习 client-go 重要前提条件"></a>1）学习 client-go 重要前提条件</h4><ul><li>了解并掌握 K8S 的基本原理和操作</li><li>了解并掌握 K8S 的 Group、Version、Resource 等概念</li></ul><h4 id="2）环境信息"><a href="#2）环境信息" class="headerlink" title="2）环境信息"></a>2）环境信息</h4><ul><li>K8S 集群（minikube），版本为 1.18.18</li><li>本地编码环境为 macOS Catalina(10.15.7) </li><li>Go 版本为 1.16.7</li><li>IDE 为 VSCode</li></ul><h3 id="4、安装-client-go"><a href="#4、安装-client-go" class="headerlink" title="4、安装 client-go"></a>4、安装 client-go</h3><h4 id="1）client-go-和-k8s-版本对应关系表"><a href="#1）client-go-和-k8s-版本对应关系表" class="headerlink" title="1）client-go 和 k8s 版本对应关系表"></a>1）client-go 和 k8s 版本对应关系表</h4><table><thead><tr><th>Kubernetes 1.15</th><th>Kubernetes 1.16</th><th>Kubernetes 1.17</th><th>Kubernetes 1.18</th><th>Kubernetes 1.19</th><th>Kubernetes 1.20</th><th></th></tr></thead><tbody><tr><td><code>kubernetes-1.15.0</code></td><td>✓</td><td>+-</td><td>+-</td><td>+-</td><td>+-</td><td>+-</td></tr><tr><td><code>kubernetes-1.16.0</code></td><td>+-</td><td>✓</td><td>+-</td><td>+-</td><td>+-</td><td>+-</td></tr><tr><td><code>kubernetes-1.17.0</code>/<code>v0.17.0</code></td><td>+-</td><td>+-</td><td>✓</td><td>+-</td><td>+-</td><td>+-</td></tr><tr><td><code>kubernetes-1.18.0</code>/<code>v0.18.0</code></td><td>+-</td><td>+-</td><td>+-</td><td>✓</td><td>+-</td><td>+-</td></tr><tr><td><code>kubernetes-1.19.0</code>/<code>v0.19.0</code></td><td>+-</td><td>+-</td><td>+-</td><td>+-</td><td>✓</td><td>+-</td></tr><tr><td><code>kubernetes-1.20.0</code>/<code>v0.20.0</code></td><td>+-</td><td>+-</td><td>+-</td><td>+-</td><td>+-</td><td>✓</td></tr><tr><td><code>HEAD</code></td><td>+-</td><td>+-</td><td>+-</td><td>+-</td><td>+-</td><td>+-</td></tr></tbody></table><h4 id="2）如何选择版本"><a href="#2）如何选择版本" class="headerlink" title="2）如何选择版本"></a>2）如何选择版本</h4><h5 id="1-k8s-版本-gt-v1-17-0"><a href="#1-k8s-版本-gt-v1-17-0" class="headerlink" title="1. k8s 版本 &gt;= v1.17.0"></a>1. k8s 版本 &gt;= v1.17.0</h5><p>针对 1.17.0 版本或以上的 k8s 集群，client-go 的配置项版本号形式为 <code>v0.x.y</code>，比如 <code>k8s.io/client-go@v0.20.4</code>，对应的 k8s 版本为 <code>v1.20.4</code>。</p><h5 id="2-k8s-版本-lt-v1-17-0"><a href="#2-k8s-版本-lt-v1-17-0" class="headerlink" title="2. k8s 版本 &lt; v1.17.0"></a>2. k8s 版本 &lt; v1.17.0</h5><p>针对 1.17.0 以下版本的 k8s 集群，client-go 的配置项版本号形式为 <code>kubernetes-1.x.y</code>，比如 <code>k8s.io/client-go@kubernetes-1.16.3</code>，对应的 k8s 版本为 <code>v1.16.3</code>。</p><h4 id="3）获取-client-go"><a href="#3）获取-client-go" class="headerlink" title="3）获取 client-go"></a>3）获取 client-go</h4><blockquote><p>🚩 本文所用环境的 k8s 版本为 v1.18.18</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get k8s.io/apimachinery@v0.18.18<br>go get k8s.io/client-go@v0.18.18<br></code></pre></td></tr></table></figure><h2 id="二、kubeconfig-管理"><a href="#二、kubeconfig-管理" class="headerlink" title="二、kubeconfig 管理"></a>二、kubeconfig 管理</h2><h3 id="1、RBAC-授权"><a href="#1、RBAC-授权" class="headerlink" title="1、RBAC 授权"></a>1、RBAC 授权</h3><h4 id="1）基于-ServiceAccount-ClusterRole-授权"><a href="#1）基于-ServiceAccount-ClusterRole-授权" class="headerlink" title="1）基于 ServiceAccount - ClusterRole 授权"></a>1）基于 ServiceAccount - ClusterRole 授权</h4><p>新建文件 <code>apiadmin-rbac.yaml</code>，授权常用资源的 crud 权限（根据实际情况增改），具体文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-clusterrole</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>, <span class="hljs-string">&quot;secrets&quot;</span>, <span class="hljs-string">&quot;nodes&quot;</span>, <span class="hljs-string">&quot;pods&quot;</span>, <span class="hljs-string">&quot;services&quot;</span>, <span class="hljs-string">&quot;resourcequotas&quot;</span>, <span class="hljs-string">&quot;replicationcontrollers&quot;</span>, <span class="hljs-string">&quot;limitranges&quot;</span>, <span class="hljs-string">&quot;persistentvolumeclaims&quot;</span>, <span class="hljs-string">&quot;persistentvolumes&quot;</span>, <span class="hljs-string">&quot;namespaces&quot;</span>, <span class="hljs-string">&quot;endpoints&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;daemonsets&quot;</span>, <span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;replicasets&quot;</span>, <span class="hljs-string">&quot;ingresses&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;statefulsets&quot;</span>, <span class="hljs-string">&quot;daemonsets&quot;</span>, <span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;replicasets&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;cronjobs&quot;</span>, <span class="hljs-string">&quot;jobs&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-clusterrole-binding</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-clusterrole</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h4 id="2）生效文件，创建rbac规则"><a href="#2）生效文件，创建rbac规则" class="headerlink" title="2）生效文件，创建rbac规则"></a>2）生效文件，创建rbac规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f apiadmin-rbac.yaml<br></code></pre></td></tr></table></figure><h5 id="权限审计"><a href="#权限审计" class="headerlink" title="权限审计:"></a>权限审计:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i create configmap --as=system:serviceaccount:default:apiadmin -n $&#123;NAMESPACE&#125;<br></code></pre></td></tr></table></figure><h3 id="2、编写-kubeconfig"><a href="#2、编写-kubeconfig" class="headerlink" title="2、编写 kubeconfig"></a>2、编写 kubeconfig</h3><h4 id="1）kubeconfig-中的基础概念"><a href="#1）kubeconfig-中的基础概念" class="headerlink" title="1）kubeconfig 中的基础概念"></a>1）kubeconfig 中的基础概念</h4><blockquote><p>🌈 <strong>kubeconfig 是什么？</strong></p><p>我们知道，在开启了 TLS 的 K8S 集群中，每一次与集群的交互都需要进行身份认证，而 kubeconfig 实际上就是 K8S 集群中一个包含了集群、用户、namespace、认证机制信息的配置文件。它默认生成在 <code>$HOME/.kube</code> 目录下，并且 <code>kubectl</code> 默认情况下，会优先查找该目录下名为 <code>config</code> 的文件，加载其中的集群访问认证配置，也可以通过设置环境变量 <code>KUBECONFIG</code> 指定其他 kubeconfig 。</p><p>K8S 的组件可以使用 kubeconfig 连接 APIserver（比如 bootstrap.kubeconfig），client-go、operator、helm 等也可以使用 kubeconfig 访问 APIserver。</p></blockquote><h5 id="1-一个-kubeconfig-的基本结构（以-minikube-为例）"><a href="#1-一个-kubeconfig-的基本结构（以-minikube-为例）" class="headerlink" title="1. 一个 kubeconfig 的基本结构（以 minikube 为例）"></a>1. 一个 kubeconfig 的基本结构（以 minikube 为例）</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority:</span> <span class="hljs-string">/Users/Tareya/.minikube/ca.crt</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://127.0.0.1:32769</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">minikube</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">minikube</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">minikube</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">minikube</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">minikube</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">minikube</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate:</span> <span class="hljs-string">/Users/Tareya/.minikube/profiles/minikube/client.crt</span><br>    <span class="hljs-attr">client-key:</span> <span class="hljs-string">/Users/Tareya/.minikube/profiles/minikube/client.key</span><br></code></pre></td></tr></table></figure><h5 id="2-集群模块-——-clusters"><a href="#2-集群模块-——-clusters" class="headerlink" title="2. 集群模块 —— clusters"></a>2. 集群模块 —— clusters</h5><blockquote><p>如上例所示，clusters 模块根据 yaml 语法来说，就是一个可包含多个 cluster 信息的列表。每一个 cluster 都需要包含 K8S 集群的端点信息。</p><ul><li>server: K8S 的 apiserver 的完整 url（<a href="https://xxx:6443）">https://xxx:6443）</a></li><li>certificate-authority: K8S 集群的证书颁发机构（CA 证书或证书解码数据）<ul><li>证书形式: certificate-authority: xxx/ca.crt</li><li>解码数据形式: certificate-authority-data: xxx</li></ul></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加或修改 cluster 条目</span><br>kubectl config set-cluster<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除 cluster 条目</span><br>kubectl config unset cluster.&lt;cluster_name&gt;<br></code></pre></td></tr></table></figure><h5 id="3-用户模块-——-users"><a href="#3-用户模块-——-users" class="headerlink" title="3. 用户模块 —— users"></a>3. 用户模块 —— users</h5><blockquote><p>users 模块，定义的是用于向 K8S 集群进行身份验证的客户端凭证</p><p>可用凭证类型有：</p><ul><li>username/password</li><li>client-certificate/client-key</li><li>client-certificate-data/client-key-data</li><li>token</li></ul><p>其中，用户名/密码的基础认证 和 token 认证两者只能取其一；而 client-certificate 和 client-key 则可以分别与其一组合。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加或修改 user 条目</span><br>kubectl config set-credentials <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除 user 条目</span><br>kubectl config unset user.&lt;user_name&gt;<br></code></pre></td></tr></table></figure><h5 id="4-上下文模块-——-contexts"><a href="#4-上下文模块-——-contexts" class="headerlink" title="4. 上下文模块 —— contexts"></a>4. 上下文模块 —— contexts</h5><blockquote><p>contexts 模块，即上下文信息，提供了一个包含了 cluster、namesapce 和 user 关系的元组。通过 context，使用指定的认证信息和命名空间将请求发送到集群。cluster、namespace、user 三个元素中任意一个即可指定上下文，未指定的值则会被替换成默认值。</p><p><strong>current-context</strong></p><p>current-context 是 kubectl 在加载配置时默认使用的上下文信息，默认为 cluster1-context（排序第一的集群）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加或修改 context 条目</span><br>kubectl config set-context<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除 context 条目</span><br>kubectl config unset context.&lt;context_name&gt;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用 context</span><br>kubectl config use-context <br></code></pre></td></tr></table></figure><h4 id="2）自定义一个-kubeconfig"><a href="#2）自定义一个-kubeconfig" class="headerlink" title="2）自定义一个 kubeconfig"></a>2）自定义一个 kubeconfig</h4><h5 id="1-获取-ServiceAccount-相关信息"><a href="#1-获取-ServiceAccount-相关信息" class="headerlink" title="1. 获取 ServiceAccount 相关信息"></a>1. 获取 ServiceAccount 相关信息</h5><p>使用以下方式获取上文 rbac 授权的 ServiceAccount 的 token 以及集群相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">SECRET=$(kubectl get serviceaccount apiadmin -ojsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)<br>TOKEN=$(kubectl get secret $&#123;SECRET&#125; -ojsonpath=&#x27;&#123;.data.token&#125;&#x27;|base64 -d)<br>CA=$(kubectl get secret $&#123;SECRET&#125; -o jsonpath=&quot;&#123;.data[&#x27;ca\.crt&#x27;]&#125;&quot;)<br>APISERVER=https://$(kubectl -n default get endpoints kubernetes --no-headers | awk -F &quot;[, ]+&quot; &#x27;&#123;print $2&#125;&#x27;)<br></code></pre></td></tr></table></figure><h5 id="2-创建集群信息"><a href="#2-创建集群信息" class="headerlink" title="2. 创建集群信息"></a>2. 创建集群信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-cluster kubernetes --certificate-authority=./kubernetes/ssl/ca.pem --embed-certs=true --server=https://$&#123;APISERVER&#125;:6443<br></code></pre></td></tr></table></figure><p>生成文件路径: <code>~/.kube/config</code>，文件内容类似下面的形式，具体内容以变量方式隐去了: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">$&#123;CA&#125;</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://$&#123;APISERVER&#125;:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> []<br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span> []<br></code></pre></td></tr></table></figure><blockquote><p>这一步，主要需要 ca 证书 base64 转化后的 <code>certificate-authority-data</code>，这样我们就不需要再通过 ca 证书文件进行认证了。其主要思路就是从 ServiceAccount 相应的 secret 的 json 中获取对应的信息。</p></blockquote><h5 id="3-创建用户认证信息"><a href="#3-创建用户认证信息" class="headerlink" title="3. 创建用户认证信息"></a>3. 创建用户认证信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-credentials apiadmin --token=$&#123;TOKEN&#125;<br></code></pre></td></tr></table></figure><p>更新的文件内容类似下面的形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">$&#123;CA&#125;</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://$&#123;APISERVER&#125;:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> []<br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;TOKEN&#125;</span><br></code></pre></td></tr></table></figure><h5 id="4-创建上下文信息"><a href="#4-创建上下文信息" class="headerlink" title="4. 创建上下文信息"></a>4. 创建上下文信息</h5><blockquote><p>由于我们创建的 ServiceAccount 绑定的是集群资源级别的 ClusterRole，所以不需要设置 namespace，如需添加则使用 <code>--namespace</code> 参数。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-context apiadmin-context --cluster=kubernetes --user=apiadmin <br></code></pre></td></tr></table></figure><p>更新的文件内容类似下面的形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">$&#123;CA&#125;</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://$&#123;APISERVER&#125;:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-context</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;TOKEN&#125;</span><br></code></pre></td></tr></table></figure><h5 id="5-使用context"><a href="#5-使用context" class="headerlink" title="5. 使用context"></a>5. 使用context</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config use-context apiadmin-context<br></code></pre></td></tr></table></figure><h5 id="6-查看-current-context"><a href="#6-查看-current-context" class="headerlink" title="6. 查看 current-context"></a>6. 查看 <code>current-context</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config view<br></code></pre></td></tr></table></figure><p>返回内容类似下面的形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">$&#123;CA&#125;</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://$&#123;APISERVER&#125;:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-context</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">apiadmin-context</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;TOKEN&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3）证书转化证书数据"><a href="#3）证书转化证书数据" class="headerlink" title="3）证书转化证书数据"></a>3）证书转化证书数据</h4><blockquote><p>🚩 Kubeconfig 中使用的证书数据实际就是将证书内容进行 base64 转码</p></blockquote><h5 id="1-获取-ca-证书数据"><a href="#1-获取-ca-证书数据" class="headerlink" title="1. 获取 ca 证书数据"></a>1. 获取 ca 证书数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">SECRET=$(kubectl get serviceaccount default -ojsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)<br>CA=$(kubectl get secret $&#123;SECRET&#125; -o jsonpath=&quot;&#123;.data[&#x27;ca\.crt&#x27;]&#125;&quot;)<br></code></pre></td></tr></table></figure><h5 id="2-获取-client-crt-证书数据"><a href="#2-获取-client-crt-证书数据" class="headerlink" title="2. 获取 client.crt 证书数据"></a>2. 获取 client.crt 证书数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat client.crt | base64 <br></code></pre></td></tr></table></figure><h5 id="3-获取-client-key-证书数据"><a href="#3-获取-client-key-证书数据" class="headerlink" title="3. 获取 client.key 证书数据"></a>3. 获取 client.key 证书数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat client.key | base64 <br></code></pre></td></tr></table></figure><h2 id="三、连接-API-Sever"><a href="#三、连接-API-Sever" class="headerlink" title="三、连接 API Sever"></a>三、连接 API Sever</h2><h3 id="1、集群外读取配置文件"><a href="#1、集群外读取配置文件" class="headerlink" title="1、集群外读取配置文件"></a>1、集群外读取配置文件</h3><blockquote><p>🚩 如果代码运行在 K8S 集群之外，可以比较简单的通过 <code>clientcmd.BuildConfigFromFlags(&quot;&quot;, ConfigFile)</code>  方法来读取集群外的 <code>kubeconfig</code>，从未实现连接 API Server。 </p></blockquote><h4 id="1）使用本地的-kubeconfig-示例"><a href="#1）使用本地的-kubeconfig-示例" class="headerlink" title="1）使用本地的 kubeconfig 示例"></a>1）使用本地的 kubeconfig 示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go">...<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><br>  <span class="hljs-string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>kubeconfig := filepath.Join(<br>os.Getenv(<span class="hljs-string">&quot;HOME&quot;</span>), <span class="hljs-string">&quot;.kube&quot;</span>, <span class="hljs-string">&quot;config&quot;</span>,<br>)<br><br>config, err := clientcmd.BuildConfigFromFlags(<span class="hljs-string">&quot;&quot;</span>, kubeconfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>  <br>  fmt.Println(config) <span class="hljs-comment">// 打印配置</span><br>  <br>  <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）使用自定义配置文件示例"><a href="#2）使用自定义配置文件示例" class="headerlink" title="2）使用自定义配置文件示例"></a>2）使用自定义配置文件示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// init client</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>restconf *rest.Config<br>err      error<br>)<br><br>restconf, err = GetRestConf()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>fmt.Println(restconf) <span class="hljs-comment">// 打印 restconf 配置</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// use config file</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetRestConf</span><span class="hljs-params">()</span> <span class="hljs-params">(config *rest.Config, err error)</span></span> &#123;<br>config, err = clientcmd.BuildConfigFromFlags(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;./admin.conf&quot;</span>) <span class="hljs-comment">// 读取项目根目录的 admin.conf 文件</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>  <br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210906140753390.png" alt="image-20210906140753390"></p><blockquote><p>输出的结果实际上就是将 kubeconfig 的 context 转换成了 rest.Config 的类型</p></blockquote><h3 id="2-从集群内获取配置"><a href="#2-从集群内获取配置" class="headerlink" title="2. 从集群内获取配置"></a>2. 从集群内获取配置</h3><h4 id="1）自动获取集群内信息"><a href="#1）自动获取集群内信息" class="headerlink" title="1）自动获取集群内信息"></a>1）自动获取集群内信息</h4><blockquote><p>🚩 当代码运行在集群中是，使用 <code>clientcmd.BuildConfigFromFlags(&quot;&quot;, &quot;&quot;)</code> 函数可以直接通过集群信息连接到 api server。（但是默认的 default 用户不会有那么多的权限。）</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br><br>...<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  ...<br>  config, err = clientcmd.BuildConfigFromFlags(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>...<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）使用-ServiceAccount-授权信息"><a href="#2）使用-ServiceAccount-授权信息" class="headerlink" title="2）使用 ServiceAccount 授权信息"></a>2）使用 ServiceAccount 授权信息</h4><blockquote><p>🚩 k8s 的所有 Pod 都会以 Volume 的方式挂载 k8s 中默认的 ServiceAccount，可以是用 <code>rest.InClusterConfig()</code> 函数，它会使用默认的 ServiceAccount 的授权信息去连接 apiserver</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;k8s.io/client-go/rest&quot;</span><br><br>...<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  ...<br>  rest.InClusterConfig()<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、创建客户端"><a href="#四、创建客户端" class="headerlink" title="四、创建客户端"></a>四、创建客户端</h2><h3 id="1、客户端类型说明"><a href="#1、客户端类型说明" class="headerlink" title="1、客户端类型说明"></a>1、客户端类型说明</h3><p>上文我们说过 client-go 提供了四种访问 APIserver的方式，对应的便是四种客户端对象，其具体的定位如下图所示:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/client-go%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%B1%BB%E5%9E%8B.png" alt="client-go 客户端类型"></p><h5 id="1-RESTClient"><a href="#1-RESTClient" class="headerlink" title="1. RESTClient"></a>1. RESTClient</h5><p>RESTClient 是最基础的客户端对象，只是对 Httprequest 的基本封装，通过将 api-machinery 库中的类型作为一组 REST 原语来访问 APIserver，具体形式如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Get takes name of the pod, and returns the corresponding pod object, and an error if there is any.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *pods)</span> <span class="hljs-title">Get</span><span class="hljs-params">(ctx context.Context, name <span class="hljs-keyword">string</span>, options metav1.GetOptions)</span> <span class="hljs-params">(result *v1.Pod, err error)</span></span> &#123;<br>result = &amp;v1.Pod&#123;&#125;<br>err = c.client.Get().<br>Namespace(c.ns).<br>Resource(<span class="hljs-string">&quot;pods&quot;</span>).<br>Name(name).<br>VersionedParams(&amp;options, scheme.ParameterCodec).<br>Do(ctx).<br>Into(result)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，许多参数都需要使用者来设置，使用起来很不方便，于是 client-go 在其基础上又实现了另外三种客户端对象。</p><h5 id="2-ClientSet"><a href="#2-ClientSet" class="headerlink" title="2. ClientSet"></a>2. ClientSet</h5><p>Clientset 可以说是使用 client-go 最常用的客户端对象，它在 RESTClient 的基础上将 K8S 的 Resource 和 Version 也进行了封装，以此实现了一个资源对应一个客户端实例，于是乎，多个客户端（资源对象）的集合就是 Client Set。</p><p>总体来说，Clientset 暴露了K8S公开化的API资源并且实现了其对应的序列化，这使得对于资源的操作变得简单了起来，事实上，clientset 才是我们创建 K8S client 的起点。</p><p>但是需要注意的是，Clientset 只能访问 K8S 内置的资源，并不能访问用户自定义资源（CRD）。</p><h5 id="3-DynamicClient"><a href="#3-DynamicClient" class="headerlink" title="3. DynamicClient"></a>3. DynamicClient</h5><p>Clientset 只能访问内置资源，而往往在基于 K8S 的深入使用和二次开发中都会涉及大量的自定义资源，该怎么办呢？client-go 已经为我们提供了应对的答案 —— DynamicClient。是一种更为高级的上层抽象，获取的内容直接就是 object 类型，需要自行做转换，可能会转换失败。在这里我们只先做简单了解，后面的文章中，我们在具体介绍。</p><h5 id="4-DiscoveryClient"><a href="#4-DiscoveryClient" class="headerlink" title="4. DiscoveryClient"></a>4. DiscoveryClient</h5><p>DiscoveryClient 用于发现 K8S 的 APIServer支持的Group、Version、Resources等信息，先做了解，后面我们再具体介绍。</p><blockquote><p>🌟 <strong>本文本次主要介绍 ClientSet 的使用，对于其他三类客户端对象，在后续的文章中一一介绍</strong>。</p></blockquote><h3 id="2、ClientSet-的使用"><a href="#2、ClientSet-的使用" class="headerlink" title="2、ClientSet 的使用"></a>2、ClientSet 的使用</h3><h4 id="1）创建-ClientSet-客户端"><a href="#1）创建-ClientSet-客户端" class="headerlink" title="1）创建 ClientSet 客户端"></a>1）创建 ClientSet 客户端</h4><p>代码示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">init</span> <span class="hljs-string">the</span> <span class="hljs-string">clientset</span><br><span class="hljs-string">func</span> <span class="hljs-string">InitClient()</span> <span class="hljs-string">*kubernetes.Clientset</span> &#123;<br><span class="hljs-string">//</span> <span class="hljs-string">create</span> <span class="hljs-string">a</span> <span class="hljs-string">kubeconfig</span> <span class="hljs-string">instance</span><br><span class="hljs-string">c</span> <span class="hljs-string">:=</span> <span class="hljs-string">LoadConfig()</span><br><br><span class="hljs-string">//</span> <span class="hljs-string">init</span> <span class="hljs-string">the</span> <span class="hljs-string">rest</span> <span class="hljs-string">client</span><br><span class="hljs-string">clientset</span>, <span class="hljs-string">err</span> <span class="hljs-string">:=</span> <span class="hljs-string">kubernetes.NewForConfig(c)</span><br><span class="hljs-string">if</span> <span class="hljs-string">err</span> <span class="hljs-type">!=</span> <span class="hljs-string">nil</span> &#123;<br><span class="hljs-string">log.Fatal(err)</span><br>&#125;<br><br><span class="hljs-string">return</span> <span class="hljs-string">clientset</span><br>&#125;<br><br><span class="hljs-string">//</span> <span class="hljs-string">load</span> <span class="hljs-string">the</span> <span class="hljs-string">kubeconfig</span> <span class="hljs-string">file</span><br><span class="hljs-string">func</span> <span class="hljs-string">LoadConfig()</span> <span class="hljs-string">*rest.Config</span> &#123;<br><br><span class="hljs-string">config</span>, <span class="hljs-string">err</span> <span class="hljs-string">:=</span> <span class="hljs-string">clientcmd.BuildConfigFromFlags(&quot;&quot;</span>, <span class="hljs-string">&quot;./config&quot;</span><span class="hljs-string">)</span><br><span class="hljs-string">if</span> <span class="hljs-string">err</span> <span class="hljs-type">!=</span> <span class="hljs-string">nil</span> &#123;<br><span class="hljs-string">log.Fatal(err)</span><br>&#125;<br>  <span class="hljs-string">return</span> <span class="hljs-string">config</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）使用-Clientset-进行-K8S-资源的-CRUD-操作"><a href="#2）使用-Clientset-进行-K8S-资源的-CRUD-操作" class="headerlink" title="2）使用 Clientset 进行 K8S 资源的 CRUD 操作"></a>2）使用 Clientset 进行 K8S 资源的 CRUD 操作</h4><h5 id="1-Get-操作-代码示例："><a href="#1-Get-操作-代码示例：" class="headerlink" title="1. Get 操作 代码示例："></a>1. <code>Get 操作</code> 代码示例：</h5><p><strong>示例作用：</strong>获取指定 namespace 下指定 pod 资源的信息并打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PodGet</span><span class="hljs-params">()</span> *<span class="hljs-title">corev1</span>.<span class="hljs-title">Pod</span></span> &#123;<br><br><span class="hljs-comment">// init the clientset instance</span><br>client := InitClient()<br><br><span class="hljs-comment">// define the api iinterface</span><br>api := client.CoreV1()<br>opts := metav1.GetOptions&#123;&#125;<br><br>namespace := os.Getenv(<span class="hljs-string">&quot;POD_NAMESPACE&quot;</span>)<br>name := os.Getenv(<span class="hljs-string">&quot;POD_NAME&quot;</span>)<br><br>podGet, err := api.Pods(namespace).Get(context.TODO(), name, opts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>  <br>PrintPod(podGet)<br><span class="hljs-keyword">return</span> podGet<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PrintPod</span><span class="hljs-params">(pod *corev1.Pod)</span></span> &#123;<br>template := <span class="hljs-string">&quot;%-16s%-16s%-8s\n&quot;</span><br>fmt.Printf(template, <span class="hljs-string">&quot;NAME&quot;</span>, <span class="hljs-string">&quot;STATUS&quot;</span>, <span class="hljs-string">&quot;IMAGE&quot;</span>)<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> pod.Spec.Containers &#123;<br>fmt.Printf(template, v.Name, pod.Status.Phase, v.Image)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-List-操作-代码示例："><a href="#2-List-操作-代码示例：" class="headerlink" title="2. List 操作 代码示例："></a>2. <code>List 操作</code> 代码示例：</h5><p><strong>示例作用：</strong>获取指定 namespace 下 pod 信息列表并打印（限 500 个）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PodList</span><span class="hljs-params">()</span> *<span class="hljs-title">corev1</span>.<span class="hljs-title">PodList</span></span> &#123;<br><br><span class="hljs-comment">// init the clientset instance</span><br>client := InitClient()<br><br><span class="hljs-comment">// define the api iinterface</span><br>api := client.CoreV1()<br>opts := metav1.ListOptions&#123;<br>Limit: <span class="hljs-number">500</span>,<br>&#125;<br><br>namespace := os.Getenv(<span class="hljs-string">&quot;POD_NAMESPACE&quot;</span>)<br><br>podList, err := api.Pods(namespace).List(context.TODO(), opts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>PrintPodList(podList)<br><br><span class="hljs-keyword">return</span> podList<br>&#125;<br><br><span class="hljs-comment">// pod list print template</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PrintPodList</span><span class="hljs-params">(podList *corev1.PodList)</span></span> &#123;<br>template := <span class="hljs-string">&quot;%-16s%-36s%-8s\n&quot;</span><br>fmt.Printf(template, <span class="hljs-string">&quot;NAMESPACE&quot;</span>, <span class="hljs-string">&quot;NAME&quot;</span>, <span class="hljs-string">&quot;STATUS&quot;</span>)<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> podList.Items &#123;<br>fmt.Printf(template, v.Namespace, v.Name, v.Status.Phase)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-增删操作代码示例："><a href="#3-增删操作代码示例：" class="headerlink" title="3. 增删操作代码示例："></a>3. 增删操作代码示例：</h5><p><strong>示例作用：</strong></p><ul><li>新建一个名为 <code>clientset-demo</code> 的 namespace</li><li>在 clientset-demo 下新建一个名为 <code>deployment-demo</code> 的 deployment，镜像使用 tomcat，副本数为 2</li><li>在 clientset-demo 下新建一个名为 <code>service-demo</code> 的 serivce，类型为 NodePort</li><li>一键清空本次创建资源功能</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br><br>appsv1 <span class="hljs-string">&quot;k8s.io/api/apps/v1&quot;</span><br>corev1 <span class="hljs-string">&quot;k8s.io/api/core/v1&quot;</span><br>metav1 <span class="hljs-string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span><br><span class="hljs-string">&quot;k8s.io/utils/pointer&quot;</span><br><br><span class="hljs-string">&quot;k8s.io/client-go/kubernetes&quot;</span><br><span class="hljs-string">&quot;k8s.io/client-go/rest&quot;</span><br><span class="hljs-string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>NAMESPACE  = <span class="hljs-string">&quot;clientset-demo&quot;</span><br>DEPLOYMENT = <span class="hljs-string">&quot;deployment-demo&quot;</span><br>SERVICE    = <span class="hljs-string">&quot;service-demo&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// define the operation types</span><br>operation := flag.String(<span class="hljs-string">&quot;operate&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;operate type: create or clean&quot;</span>)<br><br>flag.Parse()<br><br><span class="hljs-comment">// init the clientset instance</span><br>clientset := InitClient()<br><br>fmt.Printf(<span class="hljs-string">&quot;operation is %s\n&quot;</span>, *operation)<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;clean&quot;</span> == *operation &#123;<br>CleanResource(clientset)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;create&quot;</span> == *operation &#123;<br>NamespaceCreate(clientset)<br><br>DeploymentCreate(clientset)<br><br>ServiceCreate(clientset)<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// init the clientset</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitClient</span><span class="hljs-params">()</span> *<span class="hljs-title">kubernetes</span>.<span class="hljs-title">Clientset</span></span> &#123;<br><span class="hljs-comment">// create a kubeconfig instance</span><br>c := LoadConfig()<br><br><span class="hljs-comment">// init the rest client</span><br>clientset, err := kubernetes.NewForConfig(c)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error is returned</span><br>&#125;<br><br><span class="hljs-keyword">return</span> clientset<br>&#125;<br><br><span class="hljs-comment">// load the kubeconfig file</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadConfig</span><span class="hljs-params">()</span> *<span class="hljs-title">rest</span>.<span class="hljs-title">Config</span></span> &#123;<br><br>config, err := clientcmd.BuildConfigFromFlags(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;./kubeconfig&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error is returned</span><br>&#125;<br><span class="hljs-keyword">return</span> config<br>&#125;<br><br><span class="hljs-comment">// create the namespace</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NamespaceCreate</span><span class="hljs-params">(clientset *kubernetes.Clientset)</span> *<span class="hljs-title">corev1</span>.<span class="hljs-title">Namespace</span></span> &#123;<br><br><span class="hljs-comment">// define the api resource</span><br>api := clientset.CoreV1().Namespaces()<br><br>opts := metav1.CreateOptions&#123;&#125;<br><br><span class="hljs-comment">// serialize the namespace struct</span><br>namespace := &amp;corev1.Namespace&#123;<br>ObjectMeta: metav1.ObjectMeta&#123;<br>Name: NAMESPACE,<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// Convert the create operation</span><br>resource, err := api.Create(context.TODO(), namespace, opts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error</span><br>&#125;<br><br><span class="hljs-comment">// print the result</span><br>fmt.Printf(<span class="hljs-string">&quot;Create the namespace %s \n&quot;</span>, resource.GetName())<br><br><span class="hljs-keyword">return</span> resource<br>&#125;<br><br><span class="hljs-comment">// create the service</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServiceCreate</span><span class="hljs-params">(clientset *kubernetes.Clientset)</span> *<span class="hljs-title">corev1</span>.<span class="hljs-title">Service</span></span> &#123;<br><br><span class="hljs-comment">// define the api resource</span><br>api := clientset.CoreV1().Services(NAMESPACE)<br><br>opts := metav1.CreateOptions&#123;&#125;<br><br><span class="hljs-comment">// serialize the service struct</span><br>service := &amp;corev1.Service&#123;<br>ObjectMeta: metav1.ObjectMeta&#123;<br>Name:      SERVICE,<br>Namespace: NAMESPACE,<br>&#125;,<br>Spec: corev1.ServiceSpec&#123;<br>Ports: []corev1.ServicePort&#123;&#123; <span class="hljs-comment">// [] means it needs a slice, the elements can be some json.</span><br>Name:     <span class="hljs-string">&quot;http&quot;</span>,<br>Port:     <span class="hljs-number">8080</span>,<br>NodePort: <span class="hljs-number">30080</span>,<br>&#125;,<br>&#125;,<br>Selector: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;<br><span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;tomcat&quot;</span>,<br>&#125;,<br>Type: corev1.ServiceTypeNodePort,<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// Convert the create operation</span><br>resource, err := api.Create(context.TODO(), service, opts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error</span><br>&#125;<br><br><span class="hljs-comment">// print the result</span><br>fmt.Printf(<span class="hljs-string">&quot;Create the service %s \n&quot;</span>, resource.GetName())<br><br><span class="hljs-keyword">return</span> resource<br>&#125;<br><br><span class="hljs-comment">// create the deployment</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DeploymentCreate</span><span class="hljs-params">(clientset *kubernetes.Clientset)</span> *<span class="hljs-title">appsv1</span>.<span class="hljs-title">Deployment</span></span> &#123;<br><br><span class="hljs-comment">// define the api resource</span><br>api := clientset.AppsV1().Deployments(NAMESPACE)<br><br>opts := metav1.CreateOptions&#123;&#125;<br><br><span class="hljs-comment">// serialize the deployment struct</span><br>deployment := &amp;appsv1.Deployment&#123;<br>ObjectMeta: metav1.ObjectMeta&#123;<br>Name: DEPLOYMENT,<br>&#125;,<br>Spec: appsv1.DeploymentSpec&#123;<br>Replicas: pointer.Int32Ptr(<span class="hljs-number">2</span>), <span class="hljs-comment">// Replicas need *int32, so it should be a pointer</span><br>Selector: &amp;metav1.LabelSelector&#123;<br>MatchLabels: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;<br><span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;tomcat&quot;</span>,<br>&#125;,<br>&#125;,<br>Template: corev1.PodTemplateSpec&#123;<br>ObjectMeta: metav1.ObjectMeta&#123;<br>Labels: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;<br><span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;tomcat&quot;</span>,<br>&#125;,<br>&#125;,<br>Spec: corev1.PodSpec&#123;<br>Containers: []corev1.Container&#123;&#123; <span class="hljs-comment">// [] means it needs a slice, the elements can be some json.</span><br>Name:            <span class="hljs-string">&quot;tomcat&quot;</span>,<br>Image:           <span class="hljs-string">&quot;tomcat:8.0.18-jre8&quot;</span>,<br>ImagePullPolicy: <span class="hljs-string">&quot;IfNotPresent&quot;</span>,<br>Ports: []corev1.ContainerPort&#123;&#123;<br>Name:          <span class="hljs-string">&quot;http&quot;</span>,<br>Protocol:      corev1.ProtocolTCP,<br>ContainerPort: <span class="hljs-number">8080</span>,<br>&#125;,<br>&#125;,<br>&#125;,<br>&#125;,<br>&#125;,<br>&#125;,<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// Convert the create operation</span><br>resource, err := api.Create(context.TODO(), deployment, opts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error</span><br>&#125;<br><br><span class="hljs-comment">// print the result</span><br>fmt.Printf(<span class="hljs-string">&quot;Create the deployment %s \n&quot;</span>, resource.GetName())<br><br><span class="hljs-keyword">return</span> resource<br>&#125;<br><br><span class="hljs-comment">// clean all the created resource</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CleanResource</span><span class="hljs-params">(clientset *kubernetes.Clientset)</span></span> &#123;<br><br>opts := metav1.DeleteOptions&#123;&#125;<br><br><span class="hljs-comment">// delete the service</span><br><span class="hljs-keyword">if</span> err := clientset.CoreV1().Services(NAMESPACE).Delete(context.TODO(), SERVICE, opts); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Delete the service %s \n&quot;</span>, SERVICE)<br><br><span class="hljs-comment">// delete the deployment</span><br><span class="hljs-keyword">if</span> err := clientset.AppsV1().Deployments(NAMESPACE).Delete(context.TODO(), DEPLOYMENT, opts); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Delete the deployment %s\n&quot;</span>, DEPLOYMENT)<br><br><span class="hljs-comment">// delete the namespace</span><br><span class="hljs-keyword">if</span> err := clientset.CoreV1().Namespaces().Delete(context.TODO(), NAMESPACE, opts); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error()) <span class="hljs-comment">// exit when error</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Delete the namespace %s \n&quot;</span>, NAMESPACE)<br><br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1⃣️-功能验证-—-创建资源："><a href="#1⃣️-功能验证-—-创建资源：" class="headerlink" title="1⃣️ 功能验证 — 创建资源："></a>1⃣️ 功能验证 — 创建资源：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run main.go -operate create<br></code></pre></td></tr></table></figure><p>返回结果:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916103730186.png" alt="image-20210916103730186"></p><h6 id="2⃣️-kubernetes-dashboard-查看："><a href="#2⃣️-kubernetes-dashboard-查看：" class="headerlink" title="2⃣️ kubernetes dashboard 查看："></a>2⃣️ kubernetes dashboard 查看：</h6><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916104140456.png" alt="image-20210916104140456"></p><h6 id="3⃣️-minikube-service-访问-endpoint："><a href="#3⃣️-minikube-service-访问-endpoint：" class="headerlink" title="3⃣️ minikube service 访问 endpoint："></a>3⃣️ minikube service 访问 endpoint：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">minikube service service-demo -n clientset-demo<br></code></pre></td></tr></table></figure><p>返回结果:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916104252394.png" alt="image-20210916104252394"></p><p>通过浏览器访问:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916104318784.png" alt="image-20210916104318784"></p><h6 id="4⃣️-功能验证-——-清理资源："><a href="#4⃣️-功能验证-——-清理资源：" class="headerlink" title="4⃣️ 功能验证 —— 清理资源："></a>4⃣️ 功能验证 —— 清理资源：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run main.go -operate clean<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916104839958.png" alt="image-20210916104839958"></p><h2 id="五、经验总结"><a href="#五、经验总结" class="headerlink" title="五、经验总结"></a>五、经验总结</h2><h3 id="1、ClientSet-操作-K8S-常用-API"><a href="#1、ClientSet-操作-K8S-常用-API" class="headerlink" title="1、ClientSet 操作 K8S 常用 API"></a>1、ClientSet 操作 K8S 常用 API</h3><h4 id="1）deployment"><a href="#1）deployment" class="headerlink" title="1）deployment"></a>1）deployment</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 列出 deploymentList</span><br>deploymentList, err := clientset.AppsV1().Deployments(<span class="hljs-string">&quot;default&quot;</span>).List(metav1.ListOptions&#123;&#125;)<br><br><span class="hljs-comment">// 查询 deploymentGet</span><br>deploymentGet, err := clientset.AppsV1().Deployments(<span class="hljs-string">&quot;default&quot;</span>).Get(<span class="hljs-string">&quot;nginx-web-v2&quot;</span>, metav1.GetOptions&#123;&#125;)<br><br><span class="hljs-comment">// 创建 deploymentCreate</span><br>deploymentCreate, err := clientset.AppsV1().Deployments(<span class="hljs-string">&quot;default&quot;</span>).Create(deploymentName)<br><br><span class="hljs-comment">// 更新 deploymentUpdate</span><br>deploymentUpdate, err := clientset.AppsV1().Deployments(<span class="hljs-string">&quot;default&quot;</span>).Update(deploymentName)<br><br><span class="hljs-comment">// 删除deployment</span><br>err = clientset.AppsV1().Deployments(<span class="hljs-string">&quot;default&quot;</span>).Delete(<span class="hljs-string">&quot;deploymentName&quot;</span>, &amp;metav1.DeleteOptions&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="2）pod"><a href="#2）pod" class="headerlink" title="2）pod"></a>2）pod</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//列出pod（不写命令空间  即列出所有pod）</span><br>podList, err := clientset.CoreV1().Pods(<span class="hljs-string">&quot;default&quot;</span>).List(&amp;meta_v1.ListOptions&#123;&#125;)<br><br><span class="hljs-comment">//查询pod</span><br>pod, err := clientset.CoreV1().Pods(<span class="hljs-string">&quot;default&quot;</span>).Get(&lt;podName&gt;, meta_v1.GetOptions&#123;&#125;)<br><br><span class="hljs-comment">//创建pod</span><br>pod, err := clientset.CoreV1().Pods(<span class="hljs-string">&quot;default&quot;</span>).Create(web)<br><br><span class="hljs-comment">//更新pod</span><br>pod, err := clientset.CoreV1().Pods(<span class="hljs-string">&quot;default&quot;</span>).Update(web)<br><br><span class="hljs-comment">//删除pod</span><br>err := clientset.CoreV1().Pods(<span class="hljs-string">&quot;default&quot;</span>).Delete(&lt;podName&gt;, &amp;meta_v1.DeleteOptions&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="3）statefulset"><a href="#3）statefulset" class="headerlink" title="3）statefulset"></a>3）statefulset</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 列出 statefulList</span><br>statefulList, err := clientset.AppsV1().StatefulSets(<span class="hljs-string">&quot;default&quot;</span>).List(metav1.ListOptions&#123;&#125;)<br><br><span class="hljs-comment">// 查询 statefulGet</span><br>statefulGet, err := clientset.AppsV1().StatefulSets(<span class="hljs-string">&quot;default&quot;</span>).Get(<span class="hljs-string">&quot;web&quot;</span>, metav1.GetOptions&#123;&#125;)<br><span class="hljs-comment">// 创建 statefulCreate</span><br>statefulCreate, err := clientset.AppsV1().StatefulSets(<span class="hljs-string">&quot;default&quot;</span>).Create(statefulName)<br><br><span class="hljs-comment">// 更新 statefulUpdate</span><br>statefulUpdate, err := clientset.AppsV1().StatefulSets(<span class="hljs-string">&quot;default&quot;</span>).Update(statefulName)<br><br><span class="hljs-comment">// 删除 stateful</span><br>err = clientset.AppsV1().StatefulSets(<span class="hljs-string">&quot;default&quot;</span>).Delete(<span class="hljs-string">&quot;statefulName&quot;</span>, &amp;metav1.DeleteOptions&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="4）service"><a href="#4）service" class="headerlink" title="4）service"></a>4）service</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 列出 serviceList</span><br>serviceList, err := clientset.CoreV1().Services(<span class="hljs-string">&quot;default&quot;</span>).List(metav1.ListOptions&#123;&#125;)<br><br><span class="hljs-comment">// 查询 serviceGet</span><br>serviceGet, err := clientset.CoreV1().Services(<span class="hljs-string">&quot;default&quot;</span>).Get(<span class="hljs-string">&quot;web&quot;</span>, metav1.GetOptions&#123;&#125;)<br><br><span class="hljs-comment">// 创建 serviceCreate</span><br>serviceCreate, err := clientset.CoreV1().Services(<span class="hljs-string">&quot;default&quot;</span>).Create(web)<br><br><span class="hljs-comment">// 更新 serviceUpdate</span><br>serviceUpdate, err := clientset.CoreV1().Services(<span class="hljs-string">&quot;default&quot;</span>).Update(web)<br><br><span class="hljs-comment">// 删除 service</span><br>err = clientset.CoreV1().Services.(<span class="hljs-string">&quot;default&quot;</span>).Delete(<span class="hljs-string">&quot;serviceName&quot;</span>, &amp;metav1.DeleteOptions&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="5）ingress"><a href="#5）ingress" class="headerlink" title="5）ingress"></a>5）ingress</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-comment">// 列出 ingressList</span><br>ingressList, err := clientset.ExtensionsV1beta1().Ingresses(<span class="hljs-string">&quot;default&quot;</span>).List(metav1.ListOptions&#123;&#125;)<br><br><span class="hljs-comment">// 查询 ingressGet</span><br>ingressGet, err := clientset.ExtensionsV1beta1().Ingresses(<span class="hljs-string">&quot;default&quot;</span>).Get(<span class="hljs-string">&quot;web&quot;</span>, metav1.GetOptions&#123;&#125;)<br><br><span class="hljs-comment">// 创建 ingressCreate</span><br>ingressCreate, err := clientset.ExtensionsV1beta1().Ingresses(<span class="hljs-string">&quot;default&quot;</span>).Create(web)<br><br><span class="hljs-comment">// 更新 ingressUpdate</span><br>ingressUpdate, err := clientset.ExtensionsV1beta1().Ingresses(<span class="hljs-string">&quot;default&quot;</span>).Update(web)<br><br><span class="hljs-comment">// 删除 ingress</span><br>err = clientset.ExtensionsV1beta1().Ingresses(<span class="hljs-string">&quot;default&quot;</span>).Delete(<span class="hljs-string">&quot;web&quot;</span>, &amp;metav1.DeleteOptions&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="6）configmap"><a href="#6）configmap" class="headerlink" title="6）configmap"></a>6）configmap</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 列出 configmapList</span><br>configmapList, err := clientset.CoreV1().ConfigMaps(<span class="hljs-string">&quot;default&quot;</span>).List(context.TODO(), meta_v1.ListOptions)<br><br><span class="hljs-comment">// 查询 configmapGet</span><br>configmapGet, err := clientset.CoreV1().ConfigMaps(<span class="hljs-string">&quot;default&quot;</span>).Get(context.TODO(), <span class="hljs-string">&quot;name&quot;</span>, meta_v1.GetOptions&#123;&#125;)<br><br><span class="hljs-comment">// 创建 configmapCreate</span><br>configmapCreate, err<br></code></pre></td></tr></table></figure><h3 id="2、如何查找-ClientSet-的资源对象结构"><a href="#2、如何查找-ClientSet-的资源对象结构" class="headerlink" title="2、如何查找 ClientSet 的资源对象结构"></a>2、如何查找 ClientSet 的资源对象结构</h3><blockquote><p>从上文的示例中，其实我们可以比较清楚的了解几个关键点，其实通过 clientset 进行查询和删除操作，是比较简单的，它的本质还是在执行封装下层的 REST 原语调用 K8S APIServer 进行对应的处理。</p><p>但是在创建资源时是不同的，创建时，除了常用的入 namespace 、context 等参数外，我们是要导入符合 clientset 序列化结构的对象的，这是一个难点，当然通过 IDE 我们是可以简化查找的过程，那么我们就在这里简单的说一下。</p></blockquote><h4 id="1）使用-IDE-的双屏模式"><a href="#1）使用-IDE-的双屏模式" class="headerlink" title="1）使用 IDE 的双屏模式"></a>1）使用 IDE 的双屏模式</h4><p>笔者个人比较推荐的方式是通过 IDE 的双屏功能同时打开2个窗口，方便对应源码的查询，是的，其实我们可以看出其实需要的数据机构都可以从引用的包中查到对应的源码，然后我们根据对应的需求去转化就可以了。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916110720621.png" alt="image-20210916110720621"></p><h4 id="2）如何找到需要操作的API"><a href="#2）如何找到需要操作的API" class="headerlink" title="2）如何找到需要操作的API"></a>2）如何找到需要操作的API</h4><p>ClientSet 常用的操作我们再上面已经列出，这块主要是对 K8S 原生资源的转化，所以不再累述，如果对于这边方面上尚不太了解，可以参考官方的 API 文档: <a href="https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/">v1.18 官方API文档</a>。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916111600757.png" alt="image-20210916111600757"></p><p>我们在上文说过，ClientSet 封装了 Resource 和 Version，再结合我们的代码示例，是否就比较好理解了呢？</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916111808287.png" alt="image-20210916111808287"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916111912629.png" alt="image-20210916111912629"></p><h4 id="3）查找对应-API-所封装的函数"><a href="#3）查找对应-API-所封装的函数" class="headerlink" title="3）查找对应 API 所封装的函数"></a>3）查找对应 API 所封装的函数</h4><p>对于 ClientSet API 的使用有了一定了解后，我们就可以通过 IDE 去找源码对应的内容了。鼠标指向对应的资源，通过按住 cmd（Windows一般为 ctrl），我们可以看出 IDE 已经为我们找到了所继承的类。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916112308208.png" alt="image-20210916112308208"></p><p>按住 cmd 点击对象后，就会跳转到对应的代码段，如下所示：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916112712437.png" alt="image-20210916112712437"></p><p>可以看出，client-go 已经将可能的操作都进行了封装，并且入参需要什么，出参是什么类型都有明确的显示了，比如 service 的 create 操作需要的的入参有：</p><ul><li>上下文 context</li><li>service 对象</li><li>opts 即调用 apimachinery 的参数</li></ul><p>返回值为 service 对象和 error，那么转换成代码即如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">serviceCreate, err := clientset.CoreV1().Create(context.TODO(), service, metav1.CreateOptions&#123;&#125;)<br></code></pre></td></tr></table></figure><p>返回值有2个，那么就需要2个变量来接收，因此使用 <code>serviceCreate, err</code>；对于 context 来说，使用 <code>context.TODO()</code> 即可，就是使用实例化的 client 所使用的 context；opts，我们要进行什么操作，就用它所需要的参数类型即可，当然要将其转为对象，即 <code>metav1.CreateOptions&#123;&#125;</code>；</p><p>而对于 service 对象，通过阅读源码，我们看出它的类型就是 K8S 定义的 Service 类型，既然有类型，就会有对应的结构体。</p><h4 id="4）查找资源对象对应的-struct"><a href="#4）查找资源对象对应的-struct" class="headerlink" title="4）查找资源对象对应的 struct"></a>4）查找资源对象对应的 struct</h4><p>同样，还是使用 IDE 方便的检索功能，按住 cmd 指向对应的类型，如 <code>*v1.Service</code>，它就会将该类型对应的结构体返回。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916114336129.png" alt="image-20210916114336129"></p><p>同样的，按住 cmd 点击，又会跳转到一个新的标签，这个标签定义了类型结构</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916114559010.png" alt="image-20210916114559010"></p><p>可以看出，Service 这个类型所包含的内容有以上几个元素对象，它们也是有自己对应的类型的，在这里，我们需要判断哪些是元素是必要的，这就需要结合到 K8S 的知识，因为无论如何封装，都必须要遵循 K8S 资源本身的特性，一个常用的 service yaml 声明一般如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.service.annotations</span> &#125;&#125;<br>  <span class="hljs-attr">annotations:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> &#123;&#123; <span class="hljs-string">.Values.service.type</span> &#125;&#125;<br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>      <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>      <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p>这是一段 helm 的 service 模板，我们只需要理解其中 key 的主体结构即可，无需理会 value 是什么。</p><p>我们先来看一下这个示例，其中 <code>apiVersion</code> 和 <code>kind</code> ，我们在 ClientSet 已经定义好了（我们在定义 api 的过程其实就是在定义这个），那么剩下的 <code>metadata</code> 和 <code>spec</code> 就是必要元素了。</p><p>同样，其实我们也可以从 官方的 API文档中找到对应的信息 <a href="https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#service-v1-core">传送门</a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916120436835.png" alt="image-20210916120436835"></p><h4 id="5）查找内容元素对应的-struct"><a href="#5）查找内容元素对应的-struct" class="headerlink" title="5）查找内容元素对应的 struct"></a>5）查找内容元素对应的 struct</h4><p>我们上面说到，service 必要的两个元素为 metadata 和 spec，其在 client-go 的 Service 类型的机构体中即表现为 ``metav1.ObjectMeta<code>和</code>Spec<code>两个对象，其对应的类型为</code>metav1.ObjectMeta<code>和</code>ServiceSpec` ，这也是两种独立的类型，有自己的结构体。通过一样的方法，查找到对应的源码段。</p><h5 id="1-ObjectMeta"><a href="#1-ObjectMeta" class="headerlink" title="1. ObjectMeta"></a>1. ObjectMeta</h5><p>ObjectMeta 的结构体如下，它是一个相对通用型的结构体，对于 metadata 来说，最必要的元素为 <code>Name</code> 和 <code>Namespace</code>，他们即相当于SQL 中的联合唯一键。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916131519088.png" alt="image-20210916131519088"></p><p>而作为对象是实例化，也就必须要包含这两个元素，因此其序列化后是这样的，其中包含了必要的 Name、Namespace，至于其他的元素则都是可选项，具体的原理还是一样的。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916131934518.png" alt="image-20210916131934518"></p><h5 id="2-Spec"><a href="#2-Spec" class="headerlink" title="2. Spec"></a>2. Spec</h5><p>Spec 的结构体为 corev1.ServiceSpec，通过 cmd 查看其结构体，如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916132623163.png" alt="image-20210916132623163"></p><p>结合 K8S 的知识，对于 Service 的 Spec 来说，必要的元素有三个，即  <code>type</code>、<code>ports</code> 、<code>selector</code>，那么对于一个 Spec 对象来说，也必须包含其三者，其在 ServiceSpec 表现为 <code>Type</code>、<code>Ports</code>、<code>Selector</code> 三个对象。</p><h6 id="1⃣️-Ports："><a href="#1⃣️-Ports：" class="headerlink" title="1⃣️ Ports："></a>1⃣️ Ports：</h6><p>Ports 对象对应的类型为 <code>[]ServicePort </code>，有 <code>[]</code> 表示它是一个 slice，其中会包含多个元素。ServicePort 又是一个独立的类型，还是老方法，查看一下其结构体，如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916133359159.png" alt="image-20210916133359159"></p><p>在 K8S 中，ports 是一个列表，如果存在多个元素的话，则需要执行 Name 来隔离，而 port 则表示起唯一性，如果使用 NodePort 的形式的话，则需要指定 NodePort 的端口，而其对应的类型为 <code>Name string</code>、<code>Port int32</code> 、<code>NodePort32</code> ，字符串或整型。</p><p>综上所述，起序列化后应该是这样的，由于是一个 slice，所以以一个 json 来囊括。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916133935262.png" alt="image-20210916133935262"></p><h6 id="2⃣️-Selector："><a href="#2⃣️-Selector：" class="headerlink" title="2⃣️ Selector："></a>2⃣️ Selector：</h6><p>Selector 对象对应的类型为 map[string]string，直接以一个 json 来实例化即可</p><h6 id="3⃣️-Type："><a href="#3⃣️-Type：" class="headerlink" title="3⃣️ Type："></a>3⃣️ Type：</h6><p>Type 对象对应的类型是 ServiceType，有以下几种，其实对应的就是 K8S service 的类型，只是 client-go 对其进行了进一步的封装，并且其最终定义都是 string，因此直接引用即可。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916134412052.png" alt="image-20210916134412052"></p><h4 id="6）最终聚合成资源对象"><a href="#6）最终聚合成资源对象" class="headerlink" title="6）最终聚合成资源对象"></a>6）最终聚合成资源对象</h4><p>结合上面所说的内容，将各个元素对象最终拼凑起来就是资源对象了，这其中还有一点，一般来说，资源对象的类型都是以 *corev1.xxx 的指针类型，所以在实例化它们的时候都要通过 &amp; 来进行对象取址。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210916135203688.png" alt="image-20210916135203688"></p><p>有了资源对象，我们就可以通过 ClientSet 的 API 进行创建资源的操作了。你可以发现这个过程，其实就是将 K8S 的资源对象转化成 client-go 封装的类对象的过程，掌握了以上方法，就基本可以掌握 ClientSet 对于K8S 内置资源的 crud 操作了。</p><h2 id="六、参考文档"><a href="#六、参考文档" class="headerlink" title="六、参考文档"></a>六、参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/76706821">https://zhuanlan.zhihu.com/p/76706821</a></p><p><a href="https://xinchen.blog.csdn.net/article/details/113753087">https://xinchen.blog.csdn.net/article/details/113753087</a></p><p><a href="https://blog.csdn.net/weixin_34192816/article/details/92382936">https://blog.csdn.net/weixin_34192816/article/details/92382936</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang K8S API 快速入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>alpine 实现 selenium 网页文件转化图片环境</title>
    <link href="/2021/09/14/alpine-%E5%AE%9E%E7%8E%B0-selenium-%E7%BD%91%E9%A1%B5%E6%96%87%E4%BB%B6%E8%BD%AC%E5%8C%96%E5%9B%BE%E7%89%87%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/09/14/alpine-%E5%AE%9E%E7%8E%B0-selenium-%E7%BD%91%E9%A1%B5%E6%96%87%E4%BB%B6%E8%BD%AC%E5%8C%96%E5%9B%BE%E7%89%87%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="alpine-实现网页文件转化图片环境"><a href="#alpine-实现网页文件转化图片环境" class="headerlink" title="alpine 实现网页文件转化图片环境"></a>alpine 实现网页文件转化图片环境</h1><span id="more"></span><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>近期公司又一个需求，是截取前端页面并生成图片，用于保存一些签名凭证等。可以说是 selenium 比较常见的使用方式了，但是对于没有接触过 selenium 的技术人员来说，就是能通过搜索引擎查询到一些方案，也不知道到底是怎么一回事，实际上，个人认为这的确更加偏向前端工程师或测试、爬虫工程师的工作，有些超出 crud boys 的工作范畴了，于是在基础环境的配置上磨蹭了几天也没有解决问题。那么借着解决并记录这次问题的机会，就大概简单的介绍下相关的知识。</p><h2 id="二、知识讲解"><a href="#二、知识讲解" class="headerlink" title="二、知识讲解"></a>二、知识讲解</h2><h3 id="1、chrome、chrome-driver、selenium-简介"><a href="#1、chrome、chrome-driver、selenium-简介" class="headerlink" title="1、chrome、chrome driver、selenium 简介"></a>1、chrome、chrome driver、selenium 简介</h3><h4 id="1）Chrome-是什么？"><a href="#1）Chrome-是什么？" class="headerlink" title="1）Chrome 是什么？"></a>1）Chrome 是什么？</h4><p>相信一般的技术人员或者PC用户对于 Chrome 都不会陌生，它是Google 推出的一款网页浏览器，是目前市面上使用最广泛的浏览器之一。它基于开源的 WebKit 、Blink 引擎开发（其中也包含的Google 的Gears），采用更强大的 JavaScript <a href="https://baike.baidu.com/item/V8/6178125">V8</a> 虚拟机进行多线程的 Javascrip t执行加速，这是当前其他Web浏览器所无法实现的，所以可以说 Chrome 是母亲啊最快的 Web 浏览器。</p><p>最早的beta测试版本于 2008年9月2日发布，提供了50中语言的版本，以及对 Windows、macOS、Linux、Android、IOS的跨平台支持。</p><h4 id="2）ChromeDriver-是什么？"><a href="#2）ChromeDriver-是什么？" class="headerlink" title="2）ChromeDriver 是什么？"></a>2）ChromeDriver 是什么？</h4><blockquote><p>🌈 ChromeDriver is the WebDriver for Chrome.</p></blockquote><p>WebDriver是一个开源工具，用于在许多浏览器上自动测试webapps。它提供了导航到网页，用户输入，JavaScript执行等功能。</p><p>ChromeDriver 则是由 Google开发提供的自动化测试接口，是 Chrome 专用的 WebDriver。它是 selenium2 与 chrome 通信的桥梁，为 Chromium 实现了 WebDriver 的 JsonWireProtocol。</p><p>适用于 Android版和桌面版的 Chrome （Mac、Linux、Windows、ChromeOS）</p><h4 id="3）Selenium-是什么？"><a href="#3）Selenium-是什么？" class="headerlink" title="3）Selenium 是什么？"></a>3）Selenium 是什么？</h4><p>Selenium 是 ThoughWorks 提供的一款基于浏览器的开源自动化测试工具，用于模仿用户的在浏览器的手动操作。支持的浏览器包括 IE、Chrome 和 Firefox 等。常用于测试浏览器兼容性、模仿用户行为做回归和爬虫等方面，支持自动录制动作、自动生成 .Net、Perl、Python、Ruby 和 Java 等不同语言的测试脚本。</p><p>而 Selenium 的进阶版 Selenium2 则是对浏览器提供的原生API进行封装，使其成为一套面向对象的 Selenium WebDriver API。使用这套 API 可以操控浏览器的开启、关闭，打开网页，操作界面元素，控制 Cookie，还可以操作浏览器截屏、安装插件、设置代理、配置证书等。</p><p>对于其操作需要基于浏览器厂商提供的驱动，也就是我们说的 driver。由于不同的浏览器厂商会提供的自己的驱动，比如，ChromeDriver、FirefoxDriver(xpi插件)、InternetExplorerDriver(exe) 等，都各有不同，API也并没有形成统一标准（目前都支持 JSON Wire Protocol，正逐步向 W3C 标准靠拢），所以为了方便管理，Selenium 对各个厂商的驱动都进行了封装，如 selenium-chrome-driver、selenium-firefox-driver、selenium-edge-driver等。还包括了对移动应用进行测试的AndroidDriver和iOS WebDriver，以及一个基于HtmlUnit的无界面实现HtmlUnitDriver。</p><p>通过 Python、Ruby、Java、C# 等语言可以访问 Selenium WebDriverAPI。</p><h3 id="2、chrome-driver-和-chrome-对照表"><a href="#2、chrome-driver-和-chrome-对照表" class="headerlink" title="2、chrome driver 和 chrome 对照表"></a>2、chrome driver 和 chrome 对照表</h3><blockquote><p>⚠️ <strong>注意:</strong></p><p>chrome driver 的版本需要严格按照版本对应关系，否则会出现无法调用的情况。</p></blockquote><table><thead><tr><th>ChromeDriver Version</th><th>Chrome Version</th></tr></thead><tbody><tr><td>v2.34</td><td>v61-63</td></tr><tr><td>v2.33</td><td>v60-62</td></tr><tr><td>v2.32</td><td>v59-61</td></tr><tr><td>v2.31</td><td>v58-60</td></tr><tr><td>v2.30</td><td>v58-60</td></tr><tr><td>v2.29</td><td>v56-58</td></tr><tr><td>v2.28</td><td>v55-57</td></tr><tr><td>v2.27</td><td>v54-56</td></tr><tr><td>v2.26</td><td>v53-55</td></tr><tr><td>v2.25</td><td>v53-55</td></tr><tr><td>v2.24</td><td>v52-54</td></tr><tr><td>v2.23</td><td>v51-53</td></tr><tr><td>v2.22</td><td>v49-52</td></tr><tr><td>v2.21</td><td>v46-50</td></tr><tr><td>v2.20</td><td>v43-48</td></tr><tr><td>v2.19</td><td>v43-47</td></tr><tr><td>v2.18</td><td>v43-46</td></tr><tr><td>v2.17</td><td>v42-43</td></tr><tr><td>v2.13</td><td>v42-45</td></tr><tr><td>v2.15</td><td>v40-43</td></tr><tr><td>v2.14</td><td>v39-42</td></tr><tr><td>v2.13</td><td>v38-41</td></tr><tr><td>v2.12</td><td>v36-40</td></tr><tr><td>v2.11</td><td>v36-40</td></tr><tr><td>v2.10</td><td>v33-36</td></tr><tr><td>v2.9</td><td>v31-34</td></tr><tr><td>v2.8</td><td>v30-33</td></tr><tr><td>v2.7</td><td>v30-33</td></tr><tr><td>v2.6</td><td>v29-32</td></tr><tr><td>v2.5</td><td>v29-32</td></tr><tr><td>v2.4</td><td>v29-32</td></tr></tbody></table><h3 id="3、chrome、chrome-driver-下载地址"><a href="#3、chrome、chrome-driver-下载地址" class="headerlink" title="3、chrome、chrome driver 下载地址"></a>3、chrome、chrome driver 下载地址</h3><blockquote><p>🚩 由于国内不能直接访问 Chrome 官网，可以通过以下地址来下载</p></blockquote><p><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm">64位 Linux 用 Chrome (rpm)</a></p><p><a href="http://www.google.cn/chrome/browser/desktop/index.html?standalone=1&platform=win64">64位 Windows 用 Chrome</a></p><p><a href="http://www.google.cn/chrome/browser/desktop/index.html?standalone=1&platform=win">32位 Windows 用 Chrome</a></p><p><a href="http://chromedriver.storage.googleapis.com/">chrome driver Google 官方镜像源</a></p><p><a href="https://npm.taobao.org/mirrors/chromedriver/">chrome driver 淘宝网国内镜像源</a></p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="1、构建基础镜像"><a href="#1、构建基础镜像" class="headerlink" title="1、构建基础镜像"></a>1、构建基础镜像</h3><h4 id="Dockerfile："><a href="#Dockerfile：" class="headerlink" title="Dockerfile："></a>Dockerfile：</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine AS final<br><br><span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;Tareya&quot;</span> \</span><br><span class="bash">      version=<span class="hljs-string">&quot;1.0&quot;</span> \</span><br><span class="bash">      description=<span class="hljs-string">&quot;alpine with chrome and chrome drivers&quot;</span></span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> apk add  --no-cache tzdata libc6-compat ca-certificates &amp;&amp; \</span><br><span class="bash">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span><br><span class="bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span><br><span class="bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hosts: files dns&quot;</span> &gt; /etc/nsswitch.conf</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk upgrade &amp;&amp; \</span><br><span class="bash">    apk add --no-cache chromium \</span><br><span class="bash">          chromium-chromedriver \</span><br><span class="bash">          nss \</span><br><span class="bash">          freetype \</span><br><span class="bash">          harfbuzz \</span><br><span class="bash">          ttf-freefont \</span><br><span class="bash">          ttf-dejavu \</span><br><span class="bash">          fontconfig \</span><br><span class="bash">          dumb-init </span><br>                    <br></code></pre></td></tr></table></figure><h3 id="2、解决中文字体问题"><a href="#2、解决中文字体问题" class="headerlink" title="2、解决中文字体问题"></a>2、解决中文字体问题</h3><h4 id="1）CentOS-7-安装字体库以及中文字体"><a href="#1）CentOS-7-安装字体库以及中文字体" class="headerlink" title="1）CentOS 7 安装字体库以及中文字体"></a>1）CentOS 7 安装字体库以及中文字体</h4><h5 id="1-安装字体库"><a href="#1-安装字体库" class="headerlink" title="1. 安装字体库"></a>1. 安装字体库</h5><p>从 CentOS 4.x 起，系统使用 fontconfig 来安装字体库，通过以下命令下载即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install fontconfig<br></code></pre></td></tr></table></figure><p>安装完成后，会生成 <code>/usr/share/fonts</code> 这个默认的系统字体集目录</p><h5 id="2-安装微软字体"><a href="#2-安装微软字体" class="headerlink" title="2. 安装微软字体"></a>2. 安装微软字体</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install cabextract<br>yum install http://sourceforge.net/projects/mscorefonts2/files/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm<br></code></pre></td></tr></table></figure><h5 id="3-安装微软中文字体集"><a href="#3-安装微软中文字体集" class="headerlink" title="3. 安装微软中文字体集"></a>3. 安装微软中文字体集</h5><blockquote><p>⚠️ <strong>注意：</strong></p><p>确切的说，微软的字体使用版权的，在非微软的系统中使用其字体集是违反最终用户协议的，属于违法行为。</p><p><a href="https://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%BD%AF%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E9%9B%86.zip">微软中文字体集下载地址</a></p><p><a href="https://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/Simsun.ttf">宋体 Simsun.ttf 下载地址</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载解压</span><br>wget https://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%BD%AF%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E9%9B%86.zip<br>unzip 微软中文字体集.zip <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 复制到字体集目录</span><br>mkdir -p /usr/share/fonts/truetype/WindowsFonts/<br>cp -a 微软中文字体集/*.ttf /usr/share/fonts/truetype/WindowsFonts/<br>cp -a 微软中文字体集/*.TTF /usr/share/fonts/truetype/WindowsFonts/<br></code></pre></td></tr></table></figure><h5 id="5-安装开源中文字体"><a href="#5-安装开源中文字体" class="headerlink" title="5. 安装开源中文字体"></a>5. 安装开源中文字体</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install wqy-microhei-fonts wqy-zenhei-fonts<br></code></pre></td></tr></table></figure><h4 id="2）k8s-deployment-中进行挂载"><a href="#2）k8s-deployment-中进行挂载" class="headerlink" title="2）k8s deployment 中进行挂载"></a>2）k8s deployment 中进行挂载</h4><h5 id="helm-deployment-template-示例："><a href="#helm-deployment-template-示例：" class="headerlink" title="helm deployment template 示例："></a>helm deployment template 示例：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> &#123;&#123; <span class="hljs-string">.Values.replicaCount</span> &#125;&#125;<br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">namespaces:</span> &#123;&#123; <span class="hljs-string">.Values.image.namespace</span> &#125;&#125;<br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span> <br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> &#123;&#123; <span class="hljs-string">.Values.image.pullPolicy</span> &#125;&#125;<br>          <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bin/startup.sh&quot;</span>]<br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">port:</span>  &#123;&#123; <span class="hljs-string">.Values.service.port</span> &#125;&#125; <br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/actuator/health</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">100</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">180</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">10</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">tcpSocket:</span><br>              <span class="hljs-attr">port:</span>  &#123;&#123; <span class="hljs-string">.Values.service.port</span> &#125;&#125;<br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">100</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/fonts/truetype</span> <span class="hljs-string">//</span> <span class="hljs-string">pod</span> <span class="hljs-string">内挂载路径</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">ttf-fonts</span>   <span class="hljs-string">//</span> <span class="hljs-string">挂在卷的名字</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/fonts/msttcore</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">msttcore</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/fonts/wqy-microhei</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">wqy-microhei</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/fonts/wqy-zenhei</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">wqy-zenhei</span><br>          <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAMESPACE</span><br>            <span class="hljs-attr">valueFrom:</span><br>              <span class="hljs-attr">fieldRef:</span><br>                <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>                <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPRING_PROFILES_ACTIVE</span><br>            <span class="hljs-attr">value:</span> &#123;&#123; <span class="hljs-string">.Values.SPRING_PROFILES_ACTIVE</span>  &#125;&#125; <br>          <span class="hljs-attr">resources:</span><br>            &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.resources</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">12</span> &#125;&#125;<br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ttf-fonts</span> <span class="hljs-string">//</span> <span class="hljs-string">挂载卷的名称，和上面要对应</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/fonts/truetype</span>  <span class="hljs-string">//</span> <span class="hljs-string">本地需要挂载的路径</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">msttcore</span><br>      <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/fonts/msttcore</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wqy-microhei</span><br>      <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/fonts/wqy-microhei</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wqy-zenhei</span><br>      <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/fonts/wqy-zenhei</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.affinity</span> &#125;&#125;<br>      <span class="hljs-attr">affinity:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.tolerations</span> &#125;&#125;<br>      <span class="hljs-attr">tolerations:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="3、引入-selenium-依赖"><a href="#3、引入-selenium-依赖" class="headerlink" title="3、引入 selenium 依赖"></a>3、引入 selenium 依赖</h3><h4 id="1）Springboot-项目"><a href="#1）Springboot-项目" class="headerlink" title="1）Springboot 项目"></a>1）Springboot 项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>selenium-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.141.59<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）Python-项目"><a href="#2）Python-项目" class="headerlink" title="2）Python 项目"></a>2）Python 项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install selenium<br></code></pre></td></tr></table></figure><h3 id="4、网页整页转化成图片代码示例"><a href="#4、网页整页转化成图片代码示例" class="headerlink" title="4、网页整页转化成图片代码示例"></a>4、网页整页转化成图片代码示例</h3><h4 id="1）Springboot-项目-1"><a href="#1）Springboot-项目-1" class="headerlink" title="1）Springboot 项目"></a>1）Springboot 项目</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">convertHtml2Image</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;　　　　　<br>        System.setProperty(<span class="hljs-string">&quot;webdriver.chrome.driver&quot;</span>, <span class="hljs-string">&quot;/usr/bin/chromedriver&quot;</span>);　　　　<span class="hljs-comment">// 设置 chromedriver 地址</span><br>        System.setProperty(<span class="hljs-string">&quot;webdriver.chrome.silentOutput&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<span class="hljs-comment">// 关闭日志</span><br>        <span class="hljs-comment">//实例化一个Chrome浏览器的实例</span><br>        ChromeOptions options = <span class="hljs-keyword">new</span> ChromeOptions();<br>        <span class="hljs-comment">// 字符编码 utf-8 支持中文字符</span><br>        options.addArguments(<span class="hljs-string">&quot;lang=zh_CN.UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 开启最大化</span><br>        options.addArguments(<span class="hljs-string">&quot;–start-maximized&quot;</span>);<br>        options.addArguments(<span class="hljs-string">&quot;–no-sandbox&quot;</span>);<br>        <span class="hljs-comment">// 开启无头模式</span><br>        options.addArguments(<span class="hljs-string">&quot;--headless&quot;</span>);<br>        options.addArguments(<span class="hljs-string">&quot;--disable-gpu&quot;</span>);        <br>  options.addArguments(<span class="hljs-string">&quot;--window-size=1920,1080&quot;</span>);        <br>  options.addArguments(<span class="hljs-string">&quot;--silent&quot;</span>);             <br>  options.addArguments(<span class="hljs-string">&quot;--disable-logging&quot;</span>);<span class="hljs-comment">// 关闭日志   </span><br>        WebDriver driver = <span class="hljs-keyword">new</span> ChromeDriver(options);<br>        driver.get(url);<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        <span class="hljs-keyword">int</span> height = Integer.parseInt((String) ((JavascriptExecutor) driver).executeScript(<span class="hljs-string">&quot;return document.body.scrollHeight.toString()&quot;</span>));<br>        <span class="hljs-keyword">int</span> width = Integer.parseInt((String) ((JavascriptExecutor) driver).executeScript(<span class="hljs-string">&quot;return document.body.scrollWidth.toString()&quot;</span>));<br><br>        driver.manage().window().setSize(<span class="hljs-keyword">new</span> Dimension(width, height));<br>        driver.manage().window().maximize();<br>        <span class="hljs-comment">//截屏操作</span><br>        <span class="hljs-comment">//截图到output</span><br>        File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);<br>        <span class="hljs-keyword">try</span> &#123;<br>            String desImage = UUID.randomUUID().toString() + <span class="hljs-string">&quot;.png&quot;</span>;<br>            <span class="hljs-comment">//复制内容到指定文件中</span><br>            FileUtil.copyFile(scrFile, <span class="hljs-keyword">new</span> File(desImage));<br>            System.out.println(desImage);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        driver.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2）Python-项目-1"><a href="#2）Python-项目-1" class="headerlink" title="2）Python 项目"></a>2）Python 项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> time, os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Html2Image</span>(<span class="hljs-params">url,fname</span>):</span><br>    v_url = url<br>    chrome_driver = <span class="hljs-string">&quot;&quot;&quot;/usr/bin/chromedriver&quot;&quot;&quot;</span> <span class="hljs-comment"># 设置 chromedriver 地址</span><br>    save_fn = fname + <span class="hljs-string">&#x27;.png&#x27;</span><br>    option = webdriver.ChromeOptions()<br>    option.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<span class="hljs-comment"># 开启无头模式</span><br>    option.add_argument(<span class="hljs-string">&#x27;--disable-gpu&#x27;</span>)<br>    option.add_argument(<span class="hljs-string">&quot;--window-size=900,1200&quot;</span>)<span class="hljs-comment">#image size</span><br>    option.add_argument(<span class="hljs-string">&quot;--hide-scrollbars&quot;</span>)<br>    driver = webdriver.Chrome(options=option,executable_path=chrome_driver)<br>    driver.get(v_url)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    scroll_width = driver.execute_script(<span class="hljs-string">&#x27;return document.body.parentNode.scrollWidth&#x27;</span>)<br>    scroll_height = driver.execute_script(<span class="hljs-string">&#x27;return document.body.parentNode.scrollHeight&#x27;</span>)<br>    driver.set_window_size(scroll_width, scroll_height)<br>    <span class="hljs-comment">#打开html文件截图为图片</span><br>    driver.save_screenshot(save_fn)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    driver.quit()<br>    <span class="hljs-comment">#生成html文件，嵌入上面生成的图片</span><br>    im = Image.<span class="hljs-built_in">open</span>(save_fn)<br>    w, h = im.size<br>    imgCount = h // <span class="hljs-number">2000</span> + <span class="hljs-number">1</span><br>    size = h / imgCount<br>    left = <span class="hljs-number">0</span><br>    shang = <span class="hljs-number">0</span><br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(imgCount):<br>        i = i + <span class="hljs-number">1</span><br>        shang += <span class="hljs-number">1</span><br>        a = size * left<br>        b = size * (i - <span class="hljs-number">1</span>)<br>        c = w<br>        d = size * i<br>        region = im.crop((a, b, c, d))<br>        region.save(<span class="hljs-string">&quot;report%s.png&quot;</span> % i)<br><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;report.html&quot;</span>, <span class="hljs-string">&quot;w+b&quot;</span>)  <span class="hljs-comment"># 打开一个文本文件</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, imgCount + <span class="hljs-number">1</span>):<br>        fp.write(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;&lt;img src=&quot;report&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.png&quot;&gt;&lt;/img&gt;&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 写入数据</span><br>    fp.close()  <span class="hljs-comment"># 关闭文件</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Html2Image(url=<span class="hljs-string">&quot;file:///tools/scripts/oradbinfo/storage_report_HtmlResult.html&quot;</span>,fname=<span class="hljs-string">&#x27;storage_report_HtmlResult&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go template 详解</title>
    <link href="/2021/09/01/Go-template-%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/09/01/Go-template-%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-template-详解"><a href="#Go-template-详解" class="headerlink" title="Go template 详解"></a>Go template 详解</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>Go 标准库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 部署 APISIX</title>
    <link href="/2021/08/31/Kubernetes-%E9%83%A8%E7%BD%B2-APISIX/"/>
    <url>/2021/08/31/Kubernetes-%E9%83%A8%E7%BD%B2-APISIX/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-部署-APISIX"><a href="#Kubernetes-部署-APISIX" class="headerlink" title="Kubernetes 部署 APISIX"></a>Kubernetes 部署 APISIX</h1><span id="more"></span><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1、环境说明"><a href="#1、环境说明" class="headerlink" title="1、环境说明"></a>1、环境说明</h3><table><thead><tr><th>所需组件</th><th>版本说明</th></tr></thead><tbody><tr><td>K8S</td><td>Minikube（K8S v1.18.18）</td></tr><tr><td>helm</td><td>helm3（v3.5.4）</td></tr><tr><td>apisix-admin</td><td>v2.8.0</td></tr><tr><td>apisix-dashboard</td><td>v2.7.1</td></tr><tr><td>apisix-ingress-controller</td><td>v1.2.0</td></tr></tbody></table><h3 id="2、必要组件准备"><a href="#2、必要组件准备" class="headerlink" title="2、必要组件准备"></a>2、必要组件准备</h3><h4 id="1）minikube-k8s-环境搭建"><a href="#1）minikube-k8s-环境搭建" class="headerlink" title="1）minikube k8s 环境搭建"></a>1）minikube k8s 环境搭建</h4><p>参考之前的文档: <a href="https://tareya.github.io/2021/08/10/MiniKube-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/">MiniKube 快速入门手册</a></p><h4 id="2）helm-安装"><a href="#2）helm-安装" class="headerlink" title="2）helm 安装"></a>2）helm 安装</h4><p>参考之前的博客: <a href="https://tareya.github.io/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/">Helm3 安装部署</a> </p><h3 id="3、添加-APISIX-镜像仓库"><a href="#3、添加-APISIX-镜像仓库" class="headerlink" title="3、添加 APISIX 镜像仓库"></a>3、添加 APISIX 镜像仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add apisix https://charts.apiseven.com<br>helm repo update<br></code></pre></td></tr></table></figure><h3 id="4、APISIX-版本选择"><a href="#4、APISIX-版本选择" class="headerlink" title="4、APISIX 版本选择"></a>4、APISIX 版本选择</h3><h4 id="1）场景介绍"><a href="#1）场景介绍" class="headerlink" title="1）场景介绍"></a>1）场景介绍</h4><p>使用 Nacos 作为服务注册中心，并通过 APISIX 的 nacos discovery 实现服务注册节点的动态获取。原本安装版本为 2.6.0，对于 nacos 值支持尚处于开发阶段。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903103018772.png" alt="image-20210903103018772"></p><h4 id="2）版本选择"><a href="#2）版本选择" class="headerlink" title="2）版本选择"></a>2）版本选择</h4><p>根据官方发布的服务 changelog，2.7.0 之后的版本对于 nacos discovery 有了一定的升级，故选择的版本需时 2.7.0 之后的版本。</p><p><a href="https://github.com/apache/apisix/blob/release/2.9/CHANGELOG.md#270"><strong>CHANGELOG</strong></a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903103359426.png" alt="image-20210903103359426"></p><p>目前官方 dockerhub 提供的最新稳定版本镜像为 2.8.0 ，故本次版本，选择使用 2.8.0 的版本，当然也可以使用官方提供的方式编译最新版本的镜像，看个人需求。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903104639074.png" alt="image-20210903104639074"></p><p><a href="https://hub.docker.com/r/apache/apisix">apisix 官方镜像</a></p><p><a href="https://hub.docker.com/r/apache/apisix-dashboard">apisix-dashboard 官方镜像</a></p><p><a href="https://hub.docker.com/r/apache/apisix-ingress-controller">apisix-ingress-controller 官方镜像</a></p><h4 id="3）查看官方提供的-chart"><a href="#3）查看官方提供的-chart" class="headerlink" title="3）查看官方提供的 chart"></a>3）查看官方提供的 chart</h4><blockquote><p>🚩 官方提供的 chart 使用的版本与我们期望的版本不完全相符，但是整体的资源结构不会有太大的区别，也就是说我们可以基于官方提供的 chart 去制作我们自己需要的 chart，然后再通过 helm 进行纳管。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm search repo apisix<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903105314277.png" alt="image-20210903105314277"></p><h2 id="二、部署-APISIX"><a href="#二、部署-APISIX" class="headerlink" title="二、部署 APISIX"></a>二、部署 APISIX</h2><h3 id="1、准备-chart"><a href="#1、准备-chart" class="headerlink" title="1、准备 chart"></a>1、准备 chart</h3><h4 id="1）拉取官方-chart"><a href="#1）拉取官方-chart" class="headerlink" title="1）拉取官方 chart"></a>1）拉取官方 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm pull apisix/apisix <br></code></pre></td></tr></table></figure><h4 id="2）解压-chart-包"><a href="#2）解压-chart-包" class="headerlink" title="2）解压 chart 包"></a>2）解压 chart 包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf apisix-0.4.0.tgz<br></code></pre></td></tr></table></figure><h4 id="3）chart-的目录结构"><a href="#3）chart-的目录结构" class="headerlink" title="3）chart 的目录结构"></a>3）chart 的目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree -L 3 apisix<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903110331471.png" alt="image-20210903110331471"></p><h4 id="4）识别依赖组件"><a href="#4）识别依赖组件" class="headerlink" title="4）识别依赖组件"></a>4）识别依赖组件</h4><p>从官方 chart 的的目录结构可以看出，部署 apisix 同时还会有 <code>etcd</code>、<code>dashboard</code>、<code>ingress-controller</code> 三个依赖组件，基本和非容器化部署是一样的。etcd 作为数据存储，dashboard 提供 UI 界面，而 ingress-controller 则相当于 openresty。</p><h5 id="1-etcd集群"><a href="#1-etcd集群" class="headerlink" title="1. etcd集群"></a>1. etcd集群</h5><p>etcd 只是作为数据存储来说，它的版本其实并不需要过多考虑，我们不需要对其进行更改。当然，也可以使用 K8S 本身的 etcd 集群，但是不推荐这么做。</p><h5 id="2-apisix-dashboard"><a href="#2-apisix-dashboard" class="headerlink" title="2. apisix-dashboard"></a>2. apisix-dashboard</h5><p>dashboard 根据上文可知，最新的镜像版本为 2.7.1 ，这是我们需要更改的。</p><h5 id="3-apisix-ingress-controller"><a href="#3-apisix-ingress-controller" class="headerlink" title="3. apisix-ingress-controller"></a>3. apisix-ingress-controller</h5><p>ingress-controller 实际上就是 ingress，其使用的 api group 是随 K8S 版本的，因此需要根据实际的 k8S 版本修改ingress 的版本。官方给出的参数解释如下:</p><blockquote><h3 id="ingress-version"><a href="#ingress-version" class="headerlink" title="ingress version"></a><a href="https://apisix.apache.org/docs/helm-chart/apisix-ingress-controller#ingress-version">ingress version</a></h3><p>By default apisix-ingress-controller watches the <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Ingress</a> resources in api group <code>networking/v1</code>, however, if your Kubernetes cluster is prior to <code>v1.19</code>, you need to change the ingress watching version.</p><p>If your Kubernetes version is older than <code>v1.14</code>, then:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install apisix-ingress-controller apisix/apisix-ingress-controller --namespace ingress-apisix --set config.kubernetes.ingressVersion=extensions/v1beta1<br></code></pre></td></tr></table></figure><p>Or if your Kubernetes version is between <code>v1.14</code> and <code>v1.19</code>, try below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">helm install apisix-ingress-controller apisix/apisix-ingress-controller --namespace ingress-apisix --set config.kubernetes.ingressVersion=networking/v1beta1<br></code></pre></td></tr></table></figure></blockquote><p>本文使用的 K8S 环境为 v1.18.18 版本，其网络 api 组为 beta 版本，故 ingress 版本需选用 <code>networking/v1beta1</code>，我们需要在 chart 中定义，或则在发布时进行参数定义。</p><h3 id="2、修改-chart-配置"><a href="#2、修改-chart-配置" class="headerlink" title="2、修改 chart 配置"></a>2、修改 chart 配置</h3><h4 id="1）apisix-dashboard"><a href="#1）apisix-dashboard" class="headerlink" title="1）apisix-dashboard"></a>1）apisix-dashboard</h4><h5 id="1-Chart-yaml"><a href="#1-Chart-yaml" class="headerlink" title="1. Chart.yaml"></a>1. Chart.yaml</h5><p>文件路径: <code>apisix/charts/apisix-dashboard/Chart.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-number">2.7</span><span class="hljs-number">.1</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Helm</span> <span class="hljs-string">chart</span> <span class="hljs-string">for</span> <span class="hljs-string">Apache</span> <span class="hljs-string">APISIX</span> <span class="hljs-string">Dashboard</span><br><span class="hljs-attr">icon:</span> <span class="hljs-string">https://apache.org/logos/res/apisix/apisix.png</span><br><span class="hljs-attr">maintainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Tareya</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">apisix-dashboard</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">application</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.6</span><br></code></pre></td></tr></table></figure><h5 id="3-templates-service-yaml"><a href="#3-templates-service-yaml" class="headerlink" title="3. templates/service.yaml"></a>3. templates/service.yaml</h5><p>文件路径: <code>apisix/charts/apisix-dashboard/templates/service.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;apisix-dashboard.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Release.Namespace</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">include</span> <span class="hljs-string">&quot;apisix-dashboard.labels&quot;</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> &#123;&#123; <span class="hljs-string">.Values.service.type</span> &#125;&#125;<br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">nodePort:</span> &#123;&#123; <span class="hljs-string">.Values.service.nodePort</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">include</span> <span class="hljs-string">&quot;apisix-dashboard.selectorLabels&quot;</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br><br></code></pre></td></tr></table></figure><h5 id="2-values-yaml"><a href="#2-values-yaml" class="headerlink" title="2. values.yaml"></a>2. values.yaml</h5><p>文件路径: <code>apisix/charts/apisix-dashboard/values.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Default values for apisix-dashboard.</span><br><span class="hljs-comment"># This is a YAML-formatted file.</span><br><span class="hljs-comment"># Declare variables to be passed into your templates.</span><br><br><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">apache/apisix-dashboard</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-comment"># Overrides the image tag whose default is the chart appVersion.</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;2.7.1&quot;</span><br><br><span class="hljs-attr">imagePullSecrets:</span> []<br><span class="hljs-attr">nameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">fullnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">serviceAccount:</span><br>  <span class="hljs-comment"># Specifies whether a service account should be created</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Annotations to add to the service account</span><br>  <span class="hljs-attr">annotations:</span> &#123;&#125;<br>  <span class="hljs-comment"># The name of the service account to use.</span><br>  <span class="hljs-comment"># If not set and create is true, a name is generated using the fullname template</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">podAnnotations:</span> &#123;&#125;<br><br><span class="hljs-attr">podSecurityContext:</span> &#123;&#125;<br>  <span class="hljs-comment"># fsGroup: 2000</span><br><br><span class="hljs-attr">securityContext:</span> &#123;&#125;<br>  <span class="hljs-comment"># capabilities:</span><br>  <span class="hljs-comment">#   drop:</span><br>  <span class="hljs-comment">#   - ALL</span><br>  <span class="hljs-comment"># readOnlyRootFilesystem: true</span><br>  <span class="hljs-comment"># runAsNonRoot: true</span><br>  <span class="hljs-comment"># runAsUser: 1000</span><br><br><span class="hljs-attr">config:</span><br>  <span class="hljs-attr">conf:</span><br>    <span class="hljs-attr">listen:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>    <span class="hljs-attr">etcd:</span><br>      <span class="hljs-comment"># Supports defining multiple etcd host addresses for an etcd cluster</span><br>      <span class="hljs-attr">endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">apisix-etcd:2379</span><br>      <span class="hljs-comment"># Etcd basic auth info</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">~</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">~</span><br>    <span class="hljs-attr">log:</span><br>      <span class="hljs-attr">errorLog:</span><br>        <span class="hljs-attr">level:</span> <span class="hljs-string">warn</span><br>        <span class="hljs-attr">filePath:</span> <span class="hljs-string">/dev/stderr</span><br>      <span class="hljs-attr">accessLog:</span><br>        <span class="hljs-attr">filePath:</span> <span class="hljs-string">/dev/stdout</span><br><br>  <span class="hljs-attr">authentication:</span><br>    <span class="hljs-attr">secert:</span> <span class="hljs-string">secert</span><br>    <span class="hljs-attr">expireTime:</span> <span class="hljs-number">3600</span><br>    <span class="hljs-attr">users:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">nodePort:</span> <span class="hljs-number">9980</span><br><br><span class="hljs-attr">ingress:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">annotations:</span> &#123;&#125;<br>    <span class="hljs-comment"># kubernetes.io/ingress.class: nginx</span><br>    <span class="hljs-comment"># kubernetes.io/tls-acme: &quot;true&quot;</span><br>  <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">apisix-dashboard.local</span><br>      <span class="hljs-attr">paths:</span> []<br>  <span class="hljs-attr">tls:</span> []<br>  <span class="hljs-comment">#  - secretName: chart-example-tls</span><br>  <span class="hljs-comment">#    hosts:</span><br>  <span class="hljs-comment">#      - chart-example.local</span><br><br><span class="hljs-attr">resources:</span> &#123;&#125;<br>  <span class="hljs-comment"># We usually recommend not to specify default resources and to leave this as a conscious</span><br>  <span class="hljs-comment"># choice for the user. This also increases chances charts run on environments with little</span><br>  <span class="hljs-comment"># resources, such as Minikube. If you do want to specify resources, uncomment the following</span><br>  <span class="hljs-comment"># lines, adjust them as necessary, and remove the curly braces after &#x27;resources:&#x27;.</span><br>  <span class="hljs-comment"># limits:</span><br>  <span class="hljs-comment">#   cpu: 100m</span><br>  <span class="hljs-comment">#   memory: 128Mi</span><br>  <span class="hljs-comment"># requests:</span><br>  <span class="hljs-comment">#   cpu: 100m</span><br>  <span class="hljs-comment">#   memory: 128Mi</span><br><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br>  <span class="hljs-comment"># targetMemoryUtilizationPercentage: 80</span><br><br><span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br><br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-attr">affinity:</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2）apisix-ingress-controller"><a href="#2）apisix-ingress-controller" class="headerlink" title="2）apisix-ingress-controller"></a>2）apisix-ingress-controller</h4><h5 id="1-Chart-yaml-1"><a href="#1-Chart-yaml-1" class="headerlink" title="1. Chart.yaml"></a>1. Chart.yaml</h5><p>文件路径: <code>apisix/charts/apisix-ingress-controller/Chart.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.0</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">Apache</span> <span class="hljs-string">APISIX</span> <span class="hljs-string">Ingress</span> <span class="hljs-string">Controller</span> <span class="hljs-string">for</span> <span class="hljs-string">Kubernetes</span><br><span class="hljs-attr">icon:</span> <span class="hljs-string">https://apache.org/logos/res/apisix/apisix.png</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">ingress</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apisix</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">crd</span><br><span class="hljs-attr">maintainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Tareya</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">apisix-ingress-controller</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">application</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.7</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><h5 id="2-values-yaml-1"><a href="#2-values-yaml-1" class="headerlink" title="2. values.yaml"></a>2. values.yaml</h5><p>文件路径: <code>apisix/charts/apisix-ingress-controller/values.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># Default values for apisix-ingress-controller.</span><br><span class="hljs-comment"># This is a YAML-formatted file.</span><br><span class="hljs-comment"># Declare variables to be passed into your templates.</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">nameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">fullnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">rbac:</span><br>  <span class="hljs-comment"># Specifies whether RBAC resources should be created</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">serviceAccount:</span><br>  <span class="hljs-comment"># Specifies whether a ServiceAccount should be created</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># The name of the ServiceAccount to use.</span><br>  <span class="hljs-comment"># If not set and create is true, a name is generated using the fullname template</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-comment"># Whether automounting API credentials for a service account</span><br>  <span class="hljs-attr">automountServiceAccountToken:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">apache/apisix-ingress-controller</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;1.2.0&quot;</span><br><br><span class="hljs-attr">imagePullSecrets:</span> []<br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">config:</span><br>  <span class="hljs-comment"># the error log level, default is info, optional values are:</span><br>  <span class="hljs-comment"># debug</span><br>  <span class="hljs-comment"># info</span><br>  <span class="hljs-comment"># warn</span><br>  <span class="hljs-comment"># error</span><br>  <span class="hljs-comment"># panic</span><br>  <span class="hljs-comment"># fatal</span><br>  <span class="hljs-attr">logLevel:</span> <span class="hljs-string">&quot;info&quot;</span><br>  <span class="hljs-comment"># the output file path of error log, default is stderr, when</span><br>  <span class="hljs-comment"># the file path is &quot;stderr&quot; or &quot;stdout&quot;, logs are marshalled</span><br>  <span class="hljs-comment"># plainly, which is more readable for human; otherwise logs</span><br>  <span class="hljs-comment"># are marshalled in JSON format, which can be parsed by</span><br>  <span class="hljs-comment"># programs easily.</span><br>  <span class="hljs-attr">logOutput:</span> <span class="hljs-string">&quot;stderr&quot;</span><br>  <span class="hljs-comment"># the HTTP Server listen address, default is &quot;:8080&quot;</span><br>  <span class="hljs-attr">httpListen:</span> <span class="hljs-string">&quot;:8080&quot;</span><br>  <span class="hljs-comment"># enable profiling via web interfaces host:port/debug/pprof, default is true.</span><br>  <span class="hljs-attr">enableProfiling:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Kubernetes related configurations.</span><br>  <span class="hljs-attr">kubernetes:</span><br>    <span class="hljs-comment"># the Kubernetes configuration file path, default is &quot;&quot;, so the in-cluster</span><br>    <span class="hljs-comment"># configuration will be used.</span><br>    <span class="hljs-attr">kubeconfig:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># how long should apisix-ingress-controller re-synchronizes with Kubernetes,</span><br>    <span class="hljs-comment"># default is 6h,</span><br>    <span class="hljs-attr">resyncInterval:</span> <span class="hljs-string">&quot;6h&quot;</span><br>    <span class="hljs-comment"># namespace list that controller will watch for resources,</span><br>    <span class="hljs-comment"># by default all namespaces (represented by &quot;*&quot;) are watched.</span><br>    <span class="hljs-attr">appNamespaces:</span> [<span class="hljs-string">&quot;*&quot;</span>]<br>    <span class="hljs-comment"># the election id for the controller leader campaign,</span><br>    <span class="hljs-comment"># only the leader will watch and delivery resource changes,</span><br>    <span class="hljs-comment"># other instances (as candidates) stand by.</span><br>    <span class="hljs-attr">electionId:</span> <span class="hljs-string">&quot;ingress-apisix-leader&quot;</span><br>    <span class="hljs-comment"># The class of an Ingress object is set using the field IngressClassName in</span><br>    <span class="hljs-comment"># Kubernetes clusters version v1.18.0 or higher or the annotation</span><br>    <span class="hljs-comment"># &quot;kubernetes.io/ingress.class&quot; (deprecated).</span><br>    <span class="hljs-attr">ingressClass:</span> <span class="hljs-string">&quot;apisix&quot;</span><br>    <span class="hljs-comment"># the supported ingress api group version, can be &quot;networking/v1beta1&quot;,</span><br>    <span class="hljs-comment"># &quot;networking/v1&quot; (for Kubernetes version v1.19.0 or higher), and</span><br>    <span class="hljs-comment"># &quot;extensions/v1beta1&quot;, default is &quot;networking/v1&quot;.</span><br>    <span class="hljs-attr">ingressVersion:</span> <span class="hljs-string">&quot;networking/v1beta1&quot;</span><br>    <span class="hljs-comment"># the supported apisixroute api group version, can be &quot;apisix.apache.org/v1&quot;</span><br>    <span class="hljs-comment"># &quot;apisix.apache.org/v2alpha1&quot; or &quot;apisix.apache.org/v2beta1&quot;</span><br>    <span class="hljs-attr">apisixRouteVersion:</span> <span class="hljs-string">&quot;apisix.apache.org/v2beta1&quot;</span><br>  <span class="hljs-comment"># APISIX related configurations.</span><br>  <span class="hljs-attr">apisix:</span><br>    <span class="hljs-attr">baseURL:</span> <span class="hljs-string">&quot;http://apisix-admin:9180/apisix/admin&quot;</span><br>    <span class="hljs-attr">adminKey:</span> <span class="hljs-string">&quot;edd1c9f034335f136f87ad84b625c8f1&quot;</span><br><br><span class="hljs-attr">resources:</span> &#123;&#125;<br><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br>  <span class="hljs-comment"># targetMemoryUtilizationPercentage: 80</span><br><br><span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-comment"># namespace: &quot;ingress-apisix&quot;</span><br><br><span class="hljs-attr">serviceMonitor:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;monitoring&quot;</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-string">15s</span><br></code></pre></td></tr></table></figure><h4 id="3）Chart-yaml"><a href="#3）Chart-yaml" class="headerlink" title="3）Chart.yaml"></a>3）Chart.yaml</h4><p>文件路径: <code>apisix/Chart.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-number">2.8</span><span class="hljs-number">.0</span><br><span class="hljs-attr">dependencies:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">condition:</span> <span class="hljs-string">etcd.enabled</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">etcd</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://charts.bitnami.com/bitnami</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">6.2</span><span class="hljs-number">.6</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">dashboard</span><br>  <span class="hljs-attr">condition:</span> <span class="hljs-string">dashboard.enabled</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apisix-dashboard</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://charts.apiseven.com</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.6</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">ingress-controller</span><br>  <span class="hljs-attr">condition:</span> <span class="hljs-string">ingress-controller.enabled</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apisix-ingress-controller</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://charts.apiseven.com</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">0.7</span><span class="hljs-number">.1</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Helm</span> <span class="hljs-string">chart</span> <span class="hljs-string">for</span> <span class="hljs-string">Apache</span> <span class="hljs-string">APISIX</span><br><span class="hljs-attr">icon:</span> <span class="hljs-string">https://apache.org/logos/res/apisix/apisix.png</span><br><span class="hljs-attr">maintainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Tareya</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">apisix</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">application</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.4</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><h4 id="4）templates-configmap-yaml"><a href="#4）templates-configmap-yaml" class="headerlink" title="4）templates/configmap.yaml"></a>4）templates/configmap.yaml</h4><p>文件路径: <code>apisix/templates/configmap.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.apisix.enabled</span> &#125;&#125;<br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;apisix.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Release.Namespace</span> &#125;&#125;<br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">config.yaml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    #</span><br><span class="hljs-string">    # Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-string">    # contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-string">    # this work for additional information regarding copyright ownership.</span><br><span class="hljs-string">    # The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-string">    # (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-string">    # the License.  You may obtain a copy of the License at</span><br><span class="hljs-string">    #</span><br><span class="hljs-string">    #     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-string">    #</span><br><span class="hljs-string">    # Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-string">    # distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-string">    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-string">    # See the License for the specific language governing permissions and</span><br><span class="hljs-string">    # limitations under the License.</span><br><span class="hljs-string">    #</span><br><span class="hljs-string">    apisix:</span><br><span class="hljs-string">      node_listen: &#123;&#123; .Values.gateway.http.containerPort &#125;&#125;             # APISIX listening port</span><br><span class="hljs-string">      enable_heartbeat: true</span><br><span class="hljs-string">      enable_admin: &#123;&#123; .Values.admin.enabled &#125;&#125;</span><br><span class="hljs-string">      enable_admin_cors: &#123;&#123; .Values.admin.cors &#125;&#125;</span><br><span class="hljs-string">      enable_debug: false</span><br><span class="hljs-string">      enable_dev_mode: false          # Sets nginx worker_processes to 1 if set to true</span><br><span class="hljs-string">      enable_reuseport: true          # Enable nginx SO_REUSEPORT switch if set to true.</span><br><span class="hljs-string">      enable_ipv6: true</span><br><span class="hljs-string">      config_center: etcd             # etcd: use etcd to store the config value</span><br><span class="hljs-string">                                      # yaml: fetch the config value from local yaml file `/your_path/conf/apisix.yaml`</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment">#proxy_protocol:                 # Proxy Protocol configuration</span><br>      <span class="hljs-comment">#  listen_http_port: 9181        # The port with proxy protocol for http, it differs from node_listen and port_admin.</span><br>                                      <span class="hljs-comment"># This port can only receive http request with proxy protocol, but node_listen &amp; port_admin</span><br>                                      <span class="hljs-comment"># can only receive http request. If you enable proxy protocol, you must use this port to</span><br>                                      <span class="hljs-comment"># receive http request with proxy protocol</span><br>      <span class="hljs-comment">#  listen_https_port: 9182       # The port with proxy protocol for https</span><br>      <span class="hljs-comment">#  enable_tcp_pp: true           # Enable the proxy protocol for tcp proxy, it works for stream_proxy.tcp option</span><br>      <span class="hljs-comment">#  enable_tcp_pp_to_upstream: true # Enables the proxy protocol to the upstream server</span><br><br>      <span class="hljs-attr">proxy_cache:</span>                     <span class="hljs-comment"># Proxy Caching configuration</span><br>        <span class="hljs-attr">cache_ttl:</span> <span class="hljs-string">10s</span>                 <span class="hljs-comment"># The default caching time if the upstream does not specify the cache time</span><br>        <span class="hljs-attr">zones:</span>                         <span class="hljs-comment"># The parameters of a cache</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">disk_cache_one</span>         <span class="hljs-comment"># The name of the cache, administrator can be specify</span><br>                                      <span class="hljs-comment"># which cache to use by name in the admin api</span><br>          <span class="hljs-attr">memory_size:</span> <span class="hljs-string">50m</span>             <span class="hljs-comment"># The size of shared memory, it&#x27;s used to store the cache index</span><br>          <span class="hljs-attr">disk_size:</span> <span class="hljs-string">1G</span>                <span class="hljs-comment"># The size of disk, it&#x27;s used to store the cache data</span><br>          <span class="hljs-attr">disk_path:</span> <span class="hljs-string">&quot;/tmp/disk_cache_one&quot;</span> <span class="hljs-comment"># The path to store the cache data</span><br>          <span class="hljs-attr">cache_levels:</span> <span class="hljs-string">&quot;1:2&quot;</span>           <span class="hljs-comment"># The hierarchy levels of a cache</span><br>      <span class="hljs-comment">#  - name: disk_cache_two</span><br>      <span class="hljs-comment">#    memory_size: 50m</span><br>      <span class="hljs-comment">#    disk_size: 1G</span><br>      <span class="hljs-comment">#    disk_path: &quot;/tmp/disk_cache_two&quot;</span><br>      <span class="hljs-comment">#    cache_levels: &quot;1:2&quot;</span><br><br>      <span class="hljs-attr">allow_admin:</span>                  <span class="hljs-comment"># http://nginx.org/en/docs/http/ngx_http_access_module.html#allow</span><br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.admin.allow.ipList</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">$ips</span> <span class="hljs-string">:=</span> <span class="hljs-string">.Values.admin.allow.ipList</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">$ips</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">else</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/0</span><br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span>&#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">or</span> <span class="hljs-string">(index</span> <span class="hljs-string">.Values</span> <span class="hljs-string">&quot;ingress-controller&quot;</span> <span class="hljs-string">&quot;enabled&quot;</span><span class="hljs-string">)</span> <span class="hljs-string">.Values.dashboard.enabled</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/0</span><br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span>&#125;&#125;<br>      <span class="hljs-comment">#   - &quot;::/64&quot;</span><br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.admin.enabled</span> &#125;&#125;<br>      <span class="hljs-attr">port_admin:</span> &#123;&#123; <span class="hljs-string">.Values.admin.port</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>      <span class="hljs-comment"># Default token when use API to call for Admin API.</span><br>      <span class="hljs-comment"># *NOTE*: Highly recommended to modify this value to protect APISIX&#x27;s Admin API.</span><br>      <span class="hljs-comment"># Disabling this configuration item means that the Admin API does not</span><br>      <span class="hljs-comment"># require any authentication.</span><br>      <span class="hljs-attr">admin_key:</span><br>        <span class="hljs-comment"># admin: can everything for configuration data</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;admin&quot;</span><br>          <span class="hljs-attr">key:</span> &#123;&#123; <span class="hljs-string">.Values.admin.credentials.admin</span> &#125;&#125;<br>          <span class="hljs-attr">role:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-comment"># viewer: only can view configuration data</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;viewer&quot;</span><br>          <span class="hljs-attr">key:</span> &#123;&#123; <span class="hljs-string">.Values.admin.credentials.viewer</span> &#125;&#125;<br>          <span class="hljs-attr">role:</span> <span class="hljs-string">viewer</span><br>      <span class="hljs-attr">router:</span><br>        <span class="hljs-attr">http:</span> <span class="hljs-string">&#x27;radixtree_uri&#x27;</span>         <span class="hljs-comment"># radixtree_uri: match route by uri(base on radixtree)</span><br>                                      <span class="hljs-comment"># radixtree_host_uri: match route by host + uri(base on radixtree)</span><br>        <span class="hljs-attr">ssl:</span> <span class="hljs-string">&#x27;radixtree_sni&#x27;</span>          <span class="hljs-comment"># radixtree_sni: match route by SNI(base on radixtree)</span><br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">and</span> <span class="hljs-string">.Values.gateway.stream.enabled</span> <span class="hljs-string">(or</span> <span class="hljs-string">(gt</span> <span class="hljs-string">(len</span> <span class="hljs-string">.Values.gateway.stream.tcp)</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">(gt</span> <span class="hljs-string">(len</span> <span class="hljs-string">.Values.gateway.stream.udp)</span> <span class="hljs-number">0</span><span class="hljs-string">))</span> &#125;&#125;<br>      <span class="hljs-attr">stream_proxy:</span>                 <span class="hljs-comment"># TCP/UDP proxy</span><br>        <span class="hljs-attr">only:</span> &#123;&#123; <span class="hljs-string">.Values.gateway.stream.only</span> &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">gt</span> <span class="hljs-string">(len</span> <span class="hljs-string">.Values.gateway.stream.tcp)</span> <span class="hljs-number">0</span> &#125;&#125;<br>        <span class="hljs-attr">tcp:</span>                        <span class="hljs-comment"># TCP proxy port list</span><br>          &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">.Values.gateway.stream.tcp</span> &#125;&#125;<br>          <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">.</span> &#125;&#125;<br>          &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">gt</span> <span class="hljs-string">(len</span> <span class="hljs-string">.Values.gateway.stream.udp)</span> <span class="hljs-number">0</span> &#125;&#125;<br>        <span class="hljs-attr">udp:</span>                        <span class="hljs-comment"># UDP proxy port list</span><br>          &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">.Values.gateway.stream.udp</span> &#125;&#125;<br>          <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">.</span> &#125;&#125;<br>          &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      <span class="hljs-comment"># dns_resolver:</span><br>      <span class="hljs-comment">#   &#123;&#123;- range $resolver := .Values.dns.resolvers &#125;&#125;</span><br>      <span class="hljs-comment">#   - &#123;&#123; $resolver &#125;&#125;</span><br>      <span class="hljs-comment">#   &#123;&#123;- end &#125;&#125;</span><br>      <span class="hljs-attr">dns_resolver_valid:</span> &#123;&#123;<span class="hljs-string">.Values.dns.validity</span>&#125;&#125;<br>      <span class="hljs-attr">resolver_timeout:</span> &#123;&#123;<span class="hljs-string">.Values.dns.timeout</span>&#125;&#125;<br>      <span class="hljs-attr">ssl:</span><br>        <span class="hljs-attr">enable:</span> &#123;&#123; <span class="hljs-string">.Values.gateway.tls.enabled</span> &#125;&#125;<br>        <span class="hljs-attr">enable_http2:</span> &#123;&#123; <span class="hljs-string">.Values.gateway.tls.http2.enabled</span> &#125;&#125;<br>        <span class="hljs-attr">listen_port:</span> &#123;&#123; <span class="hljs-string">.Values.gateway.tls.containerPort</span> &#125;&#125;<br>        <span class="hljs-attr">ssl_protocols:</span> <span class="hljs-string">&quot;TLSv1 TLSv1.1 TLSv1.2 TLSv1.3&quot;</span><br>        <span class="hljs-attr">ssl_ciphers:</span> <span class="hljs-string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA&quot;</span><br><br>    <span class="hljs-attr">nginx_config:</span>                     <span class="hljs-comment"># config for render the template to genarate nginx.conf</span><br>      <span class="hljs-attr">error_log:</span> <span class="hljs-string">&quot;/dev/stderr&quot;</span><br>      <span class="hljs-attr">error_log_level:</span> <span class="hljs-string">&quot;warn&quot;</span>         <span class="hljs-comment"># warn,error</span><br>      <span class="hljs-attr">worker_rlimit_nofile:</span> <span class="hljs-number">20480</span>     <span class="hljs-comment"># the number of files a worker process can open, should be larger than worker_connections</span><br>      <span class="hljs-attr">event:</span><br>        <span class="hljs-attr">worker_connections:</span> <span class="hljs-number">10620</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">access_log:</span> <span class="hljs-string">&quot;/dev/stdout&quot;</span><br>        <span class="hljs-attr">keepalive_timeout:</span> <span class="hljs-string">60s</span>         <span class="hljs-comment"># timeout during which a keep-alive client connection will stay open on the server side.</span><br>        <span class="hljs-attr">client_header_timeout:</span> <span class="hljs-string">60s</span>     <span class="hljs-comment"># timeout for reading client request header, then 408 (Request Time-out) error is returned to the client</span><br>        <span class="hljs-attr">client_body_timeout:</span> <span class="hljs-string">60s</span>       <span class="hljs-comment"># timeout for reading client request body, then 408 (Request Time-out) error is returned to the client</span><br>        <span class="hljs-attr">send_timeout:</span> <span class="hljs-string">10s</span>              <span class="hljs-comment"># timeout for transmitting a response to the client.then the connection is closed</span><br>        <span class="hljs-attr">underscores_in_headers:</span> <span class="hljs-string">&quot;on&quot;</span>   <span class="hljs-comment"># default enables the use of underscores in client request header fields</span><br>        <span class="hljs-attr">real_ip_header:</span> <span class="hljs-string">&quot;X-Real-IP&quot;</span>    <span class="hljs-comment"># http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_header</span><br>        <span class="hljs-attr">real_ip_from:</span>                  <span class="hljs-comment"># http://nginx.org/en/docs/http/ngx_http_realip_module.html#set_real_ip_from</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;unix:&#x27;</span><br>        <span class="hljs-comment">#lua_shared_dicts:              # add custom shared cache to nginx.conf</span><br>        <span class="hljs-comment">#  ipc_shared_dict: 100m        # custom shared cache, format: `cache-key: cache-size`</span><br><br>    <span class="hljs-attr">etcd:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.etcd.enabled</span> &#125;&#125;<br>      <span class="hljs-attr">host:</span>                                 <span class="hljs-comment"># it&#x27;s possible to define multiple etcd hosts addresses of the same etcd cluster.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://<span class="hljs-template-variable">&#123;&#123; .Release.Name &#125;&#125;</span>-etcd.<span class="hljs-template-variable">&#123;&#123; .Release.Namespace &#125;&#125;</span>.svc.<span class="hljs-template-variable">&#123;&#123; .Values.etcd.clusterDomain &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.etcd.service.port &#125;&#125;</span>&quot;</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">else</span> &#125;&#125;<br>      <span class="hljs-attr">host:</span>                                 <span class="hljs-comment"># it&#x27;s possible to define multiple etcd hosts addresses of the same etcd cluster.</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">$value</span> <span class="hljs-string">:=</span> <span class="hljs-string">.Values.etcd.host</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>&quot;</span>             <span class="hljs-comment"># multiple etcd address</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span>&#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      <span class="hljs-attr">prefix:</span> &#123;&#123; <span class="hljs-string">.Values.etcd.prefix</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;     <span class="hljs-comment"># apisix configurations prefix</span><br>      <span class="hljs-attr">timeout:</span> &#123;&#123; <span class="hljs-string">.Values.etcd.timeout</span> &#125;&#125;   <span class="hljs-comment"># 30 seconds</span><br><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.discovery.enabled</span> &#125;&#125;<br>    <span class="hljs-attr">discovery:</span>                        <span class="hljs-comment"># Service discovery configuration</span><br>      &#123;&#123; <span class="hljs-string">.Values.discovery.method</span> &#125;&#125;<span class="hljs-string">:</span><br>        <span class="hljs-attr">host:</span> <br>          &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">$value</span> <span class="hljs-string">:=</span> <span class="hljs-string">.Values.discovery.host</span> &#125;&#125;<br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>&quot;</span>             <span class="hljs-comment"># multiple nacos address</span><br>          &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span>&#125;&#125;<br>        <span class="hljs-attr">prefix:</span> &#123;&#123; <span class="hljs-string">.Values.discovery.prefix</span> &#125;&#125;       <br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.plugins</span> &#125;&#125;<br>    <span class="hljs-attr">plugins:</span>                          <span class="hljs-comment"># plugin list</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">$plugin</span> <span class="hljs-string">:=</span> <span class="hljs-string">.Values.plugins</span> &#125;&#125;<br>      <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">$plugin</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    <span class="hljs-attr">stream_plugins:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">$plugin</span> <span class="hljs-string">:=</span> <span class="hljs-string">.Values.stream_plugins</span> &#125;&#125;<br>      <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">$plugin</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5）values-yaml"><a href="#5）values-yaml" class="headerlink" title="5）values.yaml"></a>5）values.yaml</h4><p>文件路径: <code>apisix/values.yaml</code>，修改后文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">imagePullSecrets:</span> []<br><br><br><span class="hljs-attr">apisix:</span><br>  <span class="hljs-comment"># Enable or disable Apache APISIX itself</span><br>  <span class="hljs-comment"># Set it to flase and ingress-controller.enabled=true will deploy only ingress-controller</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-attr">image:</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">apache/apisix</span><br>    <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-comment"># Overrides the image tag whose default is the chart appVersion.</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-number">2.8</span><span class="hljs-string">-alpine</span><br><br>  <span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br>  <span class="hljs-attr">podAnnotations:</span> &#123;&#125;<br>  <span class="hljs-attr">podSecurityContext:</span> &#123;&#125;<br>    <span class="hljs-comment"># fsGroup: 2000</span><br>  <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>    <span class="hljs-comment"># capabilities:</span><br>    <span class="hljs-comment">#   drop:</span><br>    <span class="hljs-comment">#   - ALL</span><br>    <span class="hljs-comment"># readOnlyRootFilesystem: true</span><br>    <span class="hljs-comment"># runAsNonRoot: true</span><br>    <span class="hljs-comment"># runAsUser: 1000</span><br><br>  <span class="hljs-attr">resources:</span> &#123;&#125;<br>    <span class="hljs-comment"># We usually recommend not to specify default resources and to leave this as a conscious</span><br>    <span class="hljs-comment"># choice for the user. This also increases chances charts run on environments with little</span><br>    <span class="hljs-comment"># resources, such as Minikube. If you do want to specify resources, uncomment the following</span><br>    <span class="hljs-comment"># lines, adjust them as necessary, and remove the curly braces after &#x27;resources:&#x27;.</span><br>    <span class="hljs-comment"># limits:</span><br>    <span class="hljs-comment">#   cpu: 100m</span><br>    <span class="hljs-comment">#   memory: 128Mi</span><br>    <span class="hljs-comment"># requests:</span><br>    <span class="hljs-comment">#   cpu: 100m</span><br>    <span class="hljs-comment">#   memory: 128Mi</span><br><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">affinity:</span> &#123;&#125;<br>  <span class="hljs-comment"># If true, it will sets the anti-affinity of the Pod.</span><br>  <span class="hljs-attr">podAntiAffinity:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><br><span class="hljs-attr">nameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">fullnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-attr">gateway:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-comment"># If you want to keep the client source IP, you can set this to Local.</span><br>  <span class="hljs-comment"># ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip</span><br>  <span class="hljs-attr">externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-comment"># type: LoadBalancer</span><br>  <span class="hljs-comment"># annotations:</span><br>  <span class="hljs-comment">#   service.beta.kubernetes.io/aws-load-balancer-type: nlb</span><br>  <span class="hljs-attr">http:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>  <span class="hljs-attr">tls:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">servicePort:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9443</span><br>    <span class="hljs-attr">http2:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">stream:</span>  <span class="hljs-comment"># L4 proxy (TCP/UDP)</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">only:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">tcp:</span> []<br>    <span class="hljs-attr">udp:</span> []<br>  <span class="hljs-attr">ingress:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">annotations:</span> &#123;&#125;<br>      <span class="hljs-comment"># kubernetes.io/ingress.class: nginx</span><br>      <span class="hljs-comment"># kubernetes.io/tls-acme: &quot;true&quot;</span><br>    <span class="hljs-attr">hosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">apisix.local</span><br>        <span class="hljs-attr">paths:</span> []<br>    <span class="hljs-attr">tls:</span> []<br>  <span class="hljs-comment">#  - secretName: apisix-tls</span><br>  <span class="hljs-comment">#    hosts:</span><br>  <span class="hljs-comment">#      - chart-example.local</span><br><br><br><span class="hljs-attr">admin:</span><br>  <span class="hljs-comment"># Enable Admin API</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># admin service type</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-comment"># loadBalancerIP: a.b.c.d</span><br>  <span class="hljs-comment"># loadBalancerSourceRanges:</span><br>  <span class="hljs-comment">#   - &quot;143.231.0.0/16&quot;</span><br>  <span class="hljs-attr">externalIPs:</span> []<br>  <span class="hljs-comment">#</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9180</span><br>  <span class="hljs-attr">servicePort:</span> <span class="hljs-number">9180</span><br>  <span class="hljs-comment"># Admin API support CORS response headers</span><br>  <span class="hljs-attr">cors:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Admin API credentials</span><br>  <span class="hljs-attr">credentials:</span><br>    <span class="hljs-attr">admin:</span> <span class="hljs-string">edd1c9f034335f136f87ad84b625c8f1</span><br>    <span class="hljs-attr">viewer:</span> <span class="hljs-string">4054f7cf07e344346cd3f287985e76a2</span><br><br>  <span class="hljs-attr">allow:</span><br>    <span class="hljs-comment"># The ip range for allowing access to Apache APISIX</span><br>    <span class="hljs-attr">ipList:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/0</span><br><br><br><span class="hljs-comment"># APISIX plugins to be enabled</span><br><span class="hljs-attr">plugins:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">api-breaker</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authz-keycloak</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">basic-auth</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">batch-requests</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">consumer-restriction</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cors</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fault-injection</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">grpc-transcode</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-auth</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">http-logger</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ip-restriction</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jwt-auth</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">kafka-logger</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">key-auth</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limit-conn</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limit-count</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limit-req</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">node-status</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">openid-connect</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">proxy-cache</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">proxy-mirror</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">proxy-rewrite</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">redirect</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">referer-restriction</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">request-id</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">request-validation</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">response-rewrite</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">serverless-post-function</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">serverless-pre-function</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sls-logger</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">syslog</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tcp-logger</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">udp-logger</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">uri-blocker</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">wolf-rbac</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">zipkin</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">traffic-split</span><br><span class="hljs-attr">stream_plugins:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mqtt-proxy</span><br><br><br><span class="hljs-attr">dns:</span><br>  <span class="hljs-attr">resolvers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.252</span><br>  <span class="hljs-attr">validity:</span> <span class="hljs-number">30</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">5</span><br><br><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">targetMemoryUtilizationPercentage:</span> <span class="hljs-number">80</span><br><br><br><span class="hljs-comment"># etcd configuration</span><br><span class="hljs-comment"># use the FQDN address or the IP of the etcd</span><br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-comment"># install etcd(v3) by default, set false if do not want to install etcd(v3) together</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">host:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">http://etcd.host:2379</span>  <span class="hljs-comment"># host or ip e.g. http://172.20.128.89:2379</span><br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/apisix&quot;</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">30</span><br><br>  <span class="hljs-comment"># if etcd.enabled is true, set more values of bitnami/etcd helm chart</span><br>  <span class="hljs-attr">auth:</span><br>    <span class="hljs-attr">rbac:</span><br>      <span class="hljs-comment"># No authentication by default</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">2379</span><br><br>  <span class="hljs-attr">replicaCount:</span> <span class="hljs-number">3</span><br><br><br><span class="hljs-attr">discovery:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">method:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">host:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://nacos:nacos@192.168.3.33:18848&quot;</span><br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/nacos/v1/&quot;</span><br><br>    <br><span class="hljs-attr">dashboard:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-attr">ingress-controller:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h3 id="3、发布-release"><a href="#3、发布-release" class="headerlink" title="3、发布 release"></a>3、发布 release</h3><h4 id="1）首次发布"><a href="#1）首次发布" class="headerlink" title="1）首次发布"></a>1）首次发布</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入 chart 目录</span><br>helm install -n apisix apisix .<br></code></pre></td></tr></table></figure><h4 id="2）后续更新"><a href="#2）后续更新" class="headerlink" title="2）后续更新"></a>2）后续更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入 chart 目录</span><br>helm upgrade --install -n apisix apisix .<br></code></pre></td></tr></table></figure><h3 id="4、调试-apisix-admin-api"><a href="#4、调试-apisix-admin-api" class="headerlink" title="4、调试 apisix admin api"></a>4、调试 apisix admin api</h3><blockquote><p>🚩 出于方便考虑，已将 admin api 以 nodeport 的方式映射</p></blockquote><h4 id="1）查看服务"><a href="#1）查看服务" class="headerlink" title="1）查看服务"></a>1）查看服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl &quot;http://192.168.3.151:8585/apisix/admin/services/&quot; -H &#x27;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#x27;<br></code></pre></td></tr></table></figure><h5 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;node&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;/apisix/services&quot;</span>,<br>        <span class="hljs-attr">&quot;dir&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">&quot;nodes&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">&quot;count&quot;</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）创建路由"><a href="#2）创建路由" class="headerlink" title="2）创建路由"></a>2）创建路由</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl  -X PUT -i http://192.168.3.151:8585/apisix/admin/routes/1 -H &#x27;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#x27;-d &#x27;&#123;&quot;uri&quot;:&quot;/nacos/*&quot;,&quot;name&quot;:&quot;nacos-testing&quot;,&quot;upstream&quot;:&#123;&quot;service_name&quot;:&quot;APISIX-NACOS&quot;,&quot;type&quot;:&quot;roundrobin&quot;,&quot;discovery_type&quot;:&quot;nacos&quot;,&quot;discovery_args&quot;:&#123;&quot;namespace_id&quot;:&quot;nacos&quot;,&quot;group_name&quot;:&quot;DEFAULT_GROUP&quot;&#125;&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值:"></a>返回值:</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;set&quot;</span>,<br>    <span class="hljs-attr">&quot;node&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;/apisix/routes/1&quot;</span>,<br>        <span class="hljs-attr">&quot;value&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;update_time&quot;</span>: <span class="hljs-number">1630663679</span>,<br>            <span class="hljs-attr">&quot;create_time&quot;</span>: <span class="hljs-number">1630663679</span>,<br>            <span class="hljs-attr">&quot;upstream&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;discovery_args&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;namespace_id&quot;</span>: <span class="hljs-string">&quot;nacos&quot;</span>,<br>                    <span class="hljs-attr">&quot;group_name&quot;</span>: <span class="hljs-string">&quot;DEFAULT_GROUP&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;pass_host&quot;</span>: <span class="hljs-string">&quot;pass&quot;</span>,<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;roundrobin&quot;</span>,<br>                <span class="hljs-attr">&quot;hash_on&quot;</span>: <span class="hljs-string">&quot;vars&quot;</span>,<br>                <span class="hljs-attr">&quot;service_name&quot;</span>: <span class="hljs-string">&quot;APISIX-NACOS&quot;</span>,<br>                <span class="hljs-attr">&quot;scheme&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>,<br>                <span class="hljs-attr">&quot;discovery_type&quot;</span>: <span class="hljs-string">&quot;nacos&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;nacos-testing&quot;</span>,<br>            <span class="hljs-attr">&quot;uri&quot;</span>: <span class="hljs-string">&quot;/nacos/*&quot;</span>,<br>            <span class="hljs-attr">&quot;priority&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903180828420.png" alt="image-20210903180828420"></p>]]></content>
    
    
    <categories>
      
      <category>API网关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APISIX 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第11章、项目的知识产权和标准规范</title>
    <link href="/2021/08/31/%E7%AC%AC11%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E5%92%8C%E6%A0%87%E5%87%86%E8%A7%84%E8%8C%83/"/>
    <url>/2021/08/31/%E7%AC%AC11%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E5%92%8C%E6%A0%87%E5%87%86%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="第11章、项目的知识产权和标准规范"><a href="#第11章、项目的知识产权和标准规范" class="headerlink" title="第11章、项目的知识产权和标准规范"></a>第11章、项目的知识产权和标准规范</h1><span id="more"></span><h2 id="一、知识产权"><a href="#一、知识产权" class="headerlink" title="一、知识产权"></a>一、知识产权</h2><h3 id="1、《合同法》对于合同内容约定不明确的规定"><a href="#1、《合同法》对于合同内容约定不明确的规定" class="headerlink" title="1、《合同法》对于合同内容约定不明确的规定"></a>1、《合同法》对于合同内容约定不明确的规定</h3><h4 id="1）质量要求不明确"><a href="#1）质量要求不明确" class="headerlink" title="1）质量要求不明确"></a>1）质量要求不明确</h4><ul><li>按照国家标准、行业标准履行</li><li>没有国家标准、行业标准的，按照通常辨准或符合合同目的的特定标准履行</li></ul><h4 id="2）价款或者报酬不明确"><a href="#2）价款或者报酬不明确" class="headerlink" title="2）价款或者报酬不明确"></a>2）价款或者报酬不明确</h4><h4 id="3）履行地点不明确"><a href="#3）履行地点不明确" class="headerlink" title="3）履行地点不明确"></a>3）履行地点不明确</h4><h4 id="4）履行期限不明确"><a href="#4）履行期限不明确" class="headerlink" title="4）履行期限不明确"></a>4）履行期限不明确</h4><h4 id="5）履行方式不明确"><a href="#5）履行方式不明确" class="headerlink" title="5）履行方式不明确"></a>5）履行方式不明确</h4><h4 id="6）履行费用的负担不明确"><a href="#6）履行费用的负担不明确" class="headerlink" title="6）履行费用的负担不明确"></a>6）履行费用的负担不明确</h4><h2 id="二、标准规范"><a href="#二、标准规范" class="headerlink" title="二、标准规范"></a>二、标准规范</h2><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><h3 id="1、著作权人对作品享有以下五种权利"><a href="#1、著作权人对作品享有以下五种权利" class="headerlink" title="1、著作权人对作品享有以下五种权利"></a>1、著作权人对作品享有以下五种权利</h3><blockquote><ul><li>发表权</li><li>署名权</li><li>修改权</li><li>保护作品完整权</li><li>使用权、使用许可权和获取报酬权、转让权</li></ul></blockquote><h3 id="2、分包禁止条件"><a href="#2、分包禁止条件" class="headerlink" title="2、分包禁止条件"></a>2、分包禁止条件</h3><blockquote><ul><li><p>不得向他人转让中标项目</p></li><li><p>不得将中标项目肢解后分别向他人转让</p></li><li><p>按合同约定或招标人同意，可以将中标项目的非主体、非关键工作分包，接受分包方需要具备相应资质，并且不得再次分包</p></li><li><p>中标人需要就分包项目向招标人负责，接受分包的人就分包项目承担连带责任</p></li></ul></blockquote><h3 id="3、哪些情形可以不进行招标"><a href="#3、哪些情形可以不进行招标" class="headerlink" title="3、哪些情形可以不进行招标"></a>3、哪些情形可以不进行招标</h3><blockquote><ul><li>需要采用不可替代的专利或专有技术</li><li>采购人依法能够自行建设、生产或提供</li><li>已通过招标方式选定的特许经营项目投资人依法能够自行建设、生产或提供</li><li>需要向原中标人采购工程、货物或服务，否则将影响施工或功能配套要求</li><li>国家规定的其他特殊情况</li></ul></blockquote><h3 id="4、区分等同采用、修改采用、等效采用和非等效采用概念"><a href="#4、区分等同采用、修改采用、等效采用和非等效采用概念" class="headerlink" title="4、区分等同采用、修改采用、等效采用和非等效采用概念"></a>4、区分等同采用、修改采用、等效采用和非等效采用概念</h3><blockquote><ul><li>等同采用：指技术内容相同</li><li>修改采用：指与国际标准之间存在技术性差异</li><li>等效采用：指主要技术内容相同，技术上只有很少差异，编写方法不完全相对应</li><li>非等效采用：指与相应国际标准在技术内容和文本结构上不同</li></ul></blockquote><h3 id="5、质量特性与质量子特性"><a href="#5、质量特性与质量子特性" class="headerlink" title="5、质量特性与质量子特性"></a>5、质量特性与质量子特性</h3><blockquote><p>口诀: 功能靠用效护移，适准用依安，错易成，学解作源时，试改定分，应装一题</p><table><thead><tr><th>功能性</th><th>可靠性</th><th>易用性</th><th>效率</th><th>维护性</th><th>可移植性</th></tr></thead><tbody><tr><td><strong>适</strong>合性</td><td>容<strong>错</strong>性</td><td>易<strong>学</strong>性</td><td>资<strong>源</strong>特性</td><td>可测<strong>试</strong>性</td><td>适<strong>应</strong>性</td></tr><tr><td><strong>准</strong>确性</td><td><strong>易</strong>恢复性</td><td>易理<strong>解</strong>性</td><td><strong>时</strong>间特性</td><td>可修<strong>改</strong>性</td><td>易安<strong>装</strong>性</td></tr><tr><td>互<strong>用</strong>性</td><td><strong>成</strong>熟性</td><td>易操<strong>作</strong>性</td><td></td><td>稳<strong>定</strong>性</td><td><strong>一</strong>致性</td></tr><tr><td><strong>依</strong>从性</td><td></td><td></td><td></td><td>易<strong>分</strong>析性</td><td>可<strong>替</strong>换性</td></tr><tr><td><strong>安</strong>全性</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></blockquote>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第10章、项目的变更管理和安全管理</title>
    <link href="/2021/08/31/%E7%AC%AC10%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8F%98%E6%9B%B4%E7%AE%A1%E7%90%86%E5%92%8C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC10%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8F%98%E6%9B%B4%E7%AE%A1%E7%90%86%E5%92%8C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第10章、项目的变更管理和安全管理"><a href="#第10章、项目的变更管理和安全管理" class="headerlink" title="第10章、项目的变更管理和安全管理"></a>第10章、项目的变更管理和安全管理</h1><span id="more"></span><h2 id="一、变更管理"><a href="#一、变更管理" class="headerlink" title="一、变更管理"></a>一、变更管理</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><h4 id="1）项目变更管理的定义"><a href="#1）项目变更管理的定义" class="headerlink" title="1）项目变更管理的定义"></a>1）项目变更管理的定义</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h5><p>指在信息系统工程建设项目的实施过程中，由于项目环境或其他的原因对项目的<strong>功能、性能、架构、技术指标、集成方法、项目进度</strong>等方面做出的更改</p><h5 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h5><ul><li><strong>变更的影响可能是积极的，也可能是消极的</strong></li><li>做好变更管理，可以使项目的质量、进度、成本管理更加有效</li></ul><h4 id="2）项目变更产生的原因"><a href="#2）项目变更产生的原因" class="headerlink" title="2）项目变更产生的原因"></a>2）项目变更产生的原因</h4><h5 id="1-产品范围（成果）定义的过失或疏忽"><a href="#1-产品范围（成果）定义的过失或疏忽" class="headerlink" title="1. 产品范围（成果）定义的过失或疏忽"></a>1. 产品范围（成果）定义的过失或疏忽</h5><h5 id="2-项目范围（工作）定义的过失或疏忽"><a href="#2-项目范围（工作）定义的过失或疏忽" class="headerlink" title="2. 项目范围（工作）定义的过失或疏忽"></a>2. 项目范围（工作）定义的过失或疏忽</h5><h5 id="3-增值变更"><a href="#3-增值变更" class="headerlink" title="3. 增值变更"></a>3. 增值变更</h5><h5 id="4-应对风险的紧急计划或回避计划"><a href="#4-应对风险的紧急计划或回避计划" class="headerlink" title="4. 应对风险的紧急计划或回避计划"></a>4. 应对风险的紧急计划或回避计划</h5><h5 id="5-项目执行过程与基准要求不一致导致的被动调整"><a href="#5-项目执行过程与基准要求不一致导致的被动调整" class="headerlink" title="5. 项目执行过程与基准要求不一致导致的被动调整"></a>5. 项目执行过程与基准要求不一致导致的被动调整</h5><h5 id="6-外部事件"><a href="#6-外部事件" class="headerlink" title="6. 外部事件"></a>6. 外部事件</h5><h4 id="3）项目变更的分类"><a href="#3）项目变更的分类" class="headerlink" title="3）项目变更的分类"></a>3）项目变更的分类</h4><h5 id="1-根据变更性质划分"><a href="#1-根据变更性质划分" class="headerlink" title="1. 根据变更性质划分"></a>1. 根据变更性质划分</h5><h6 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h6><ul><li>重大变更</li><li>重要变更</li><li>一般变更</li></ul><h6 id="控制方法："><a href="#控制方法：" class="headerlink" title="控制方法："></a>控制方法：</h6><ul><li>通过不同审批权限控制</li></ul><h5 id="2-根据变更的紧迫性划分"><a href="#2-根据变更的紧迫性划分" class="headerlink" title="2. 根据变更的紧迫性划分"></a>2. 根据变更的紧迫性划分</h5><h6 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h6><ul><li>紧急变更</li><li>非紧急变更</li></ul><h6 id="控制方法：-1"><a href="#控制方法：-1" class="headerlink" title="控制方法："></a>控制方法：</h6><ul><li>通过不同的变更处理流程进行 </li></ul><h3 id="2、原则和工作流程"><a href="#2、原则和工作流程" class="headerlink" title="2、原则和工作流程"></a>2、原则和工作流程</h3><h4 id="1）项目变更管理的原则"><a href="#1）项目变更管理的原则" class="headerlink" title="1）项目变更管理的原则"></a>1）项目变更管理的原则</h4><h4 id="2）变更管理的组织机构"><a href="#2）变更管理的组织机构" class="headerlink" title="2）变更管理的组织机构"></a>2）变更管理的组织机构</h4><h4 id="3）变更管理的工作程序"><a href="#3）变更管理的工作程序" class="headerlink" title="3）变更管理的工作程序"></a>3）变更管理的工作程序</h4><h3 id="3、工作内容"><a href="#3、工作内容" class="headerlink" title="3、工作内容"></a>3、工作内容</h3><h4 id="1）变更申请的提交"><a href="#1）变更申请的提交" class="headerlink" title="1）变更申请的提交"></a>1）变更申请的提交</h4><h4 id="2）变更控制"><a href="#2）变更控制" class="headerlink" title="2）变更控制"></a>2）变更控制</h4><h4 id="3）变更管理与其他项目管理要素的关系"><a href="#3）变更管理与其他项目管理要素的关系" class="headerlink" title="3）变更管理与其他项目管理要素的关系"></a>3）变更管理与其他项目管理要素的关系</h4><h4 id="4）软件版本发布与回退方案"><a href="#4）软件版本发布与回退方案" class="headerlink" title="4）软件版本发布与回退方案"></a>4）软件版本发布与回退方案</h4><p>变更管理的8个步骤</p><p>对成本变更的控制</p><h2 id="二、安全管理"><a href="#二、安全管理" class="headerlink" title="二、安全管理"></a>二、安全管理</h2><h3 id="1、信息安全策略"><a href="#1、信息安全策略" class="headerlink" title="1、信息安全策略"></a>1、信息安全策略</h3><h4 id="1）安全策略的概念与内容"><a href="#1）安全策略的概念与内容" class="headerlink" title="1）安全策略的概念与内容"></a>1）安全策略的概念与内容</h4><h4 id="2）信息系统安全等级保护的概念"><a href="#2）信息系统安全等级保护的概念" class="headerlink" title="2）信息系统安全等级保护的概念"></a>2）信息系统安全等级保护的概念</h4><h3 id="2、信息安全系统"><a href="#2、信息安全系统" class="headerlink" title="2、信息安全系统"></a>2、信息安全系统</h3><h4 id="1）信息安全系统的三种架构体系"><a href="#1）信息安全系统的三种架构体系" class="headerlink" title="1）信息安全系统的三种架构体系"></a>1）信息安全系统的三种架构体系</h4><h4 id="2）信息安全系统三维空间"><a href="#2）信息安全系统三维空间" class="headerlink" title="2）信息安全系统三维空间"></a>2）信息安全系统三维空间</h4><h3 id="3、PKI公开密钥基础设置"><a href="#3、PKI公开密钥基础设置" class="headerlink" title="3、PKI公开密钥基础设置"></a>3、PKI公开密钥基础设置</h3><h4 id="1）PKI总体架构"><a href="#1）PKI总体架构" class="headerlink" title="1）PKI总体架构"></a>1）PKI总体架构</h4><h4 id="2）X-509-标准"><a href="#2）X-509-标准" class="headerlink" title="2）X.509 标准"></a>2）X.509 标准</h4><h3 id="4、PMI-权限（授权）管理基础设施"><a href="#4、PMI-权限（授权）管理基础设施" class="headerlink" title="4、PMI 权限（授权）管理基础设施"></a>4、PMI 权限（授权）管理基础设施</h3><h4 id="1）PMI-的概念"><a href="#1）PMI-的概念" class="headerlink" title="1）PMI 的概念"></a>1）PMI 的概念</h4><h4 id="2）PMI-与-PKI-的区别"><a href="#2）PMI-与-PKI-的区别" class="headerlink" title="2）PMI 与 PKI 的区别"></a>2）PMI 与 PKI 的区别</h4><h4 id="3）访问控制"><a href="#3）访问控制" class="headerlink" title="3）访问控制"></a>3）访问控制</h4><h4 id="4）基于角色的访问控制"><a href="#4）基于角色的访问控制" class="headerlink" title="4）基于角色的访问控制"></a>4）基于角色的访问控制</h4><h3 id="5、信息安全审计"><a href="#5、信息安全审计" class="headerlink" title="5、信息安全审计"></a>5、信息安全审计</h3><h4 id="1）安全审计的概念与作用"><a href="#1）安全审计的概念与作用" class="headerlink" title="1）安全审计的概念与作用"></a>1）安全审计的概念与作用</h4><h4 id="2）建立安全审计系统"><a href="#2）建立安全审计系统" class="headerlink" title="2）建立安全审计系统"></a>2）建立安全审计系统</h4><h4 id="3）分布式审计系统"><a href="#3）分布式审计系统" class="headerlink" title="3）分布式审计系统"></a>3）分布式审计系统</h4><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><h3 id="1、变更的常见原因"><a href="#1、变更的常见原因" class="headerlink" title="1、变更的常见原因"></a>1、变更的常见原因</h3><ul><li>产品范围（成果）定义的过失或疏忽</li><li>项目范围（工作）定义的过失或疏忽</li><li>增值变更</li><li>应对风险的紧急计划或回避计划</li><li>项目执行过程与基准要求不一致带来的被动调整</li><li>外部事件</li></ul><h3 id="2、变更的分类"><a href="#2、变更的分类" class="headerlink" title="2、变更的分类"></a>2、变更的分类</h3><ul><li>根据性质划分（通过不同审批权限控制）<ul><li>重大变更</li><li>重要变更</li><li>一般变更</li></ul></li><li>根据变更急迫性划分（通过不同变更处理进行控制）<ul><li>紧急变更</li><li>非紧急变更</li></ul></li></ul><h3 id="3、区分产品范围和项目范围"><a href="#3、区分产品范围和项目范围" class="headerlink" title="3、区分产品范围和项目范围"></a>3、区分产品范围和项目范围</h3><h3 id="4、变更管理的8个步骤-8个变更流程"><a href="#4、变更管理的8个步骤-8个变更流程" class="headerlink" title="4、变更管理的8个步骤/8个变更流程"></a>4、变更管理的8个步骤/8个变更流程</h3><h3 id="5、安全策略的核心内容"><a href="#5、安全策略的核心内容" class="headerlink" title="5、安全策略的核心内容"></a>5、安全策略的核心内容</h3><h3 id="6、信息安全的属性"><a href="#6、信息安全的属性" class="headerlink" title="6、信息安全的属性"></a>6、信息安全的属性</h3><blockquote><p>1、完整性: 信息在存储和传输过程中保持<strong>不被修改、不被破坏、不被插入、不延迟、不乱序和不丢失</strong></p></blockquote><h3 id="7、信息的质量属性"><a href="#7、信息的质量属性" class="headerlink" title="7、信息的质量属性"></a>7、信息的质量属性</h3><h3 id="8、信息系统安全等级保护的概念"><a href="#8、信息系统安全等级保护的概念" class="headerlink" title="8、信息系统安全等级保护的概念"></a>8、信息系统安全等级保护的概念</h3>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第9章、项目的合同管理和文档与配置管理</title>
    <link href="/2021/08/31/%E7%AC%AC9%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%88%E5%90%8C%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%87%E6%A1%A3%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC9%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%88%E5%90%8C%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%87%E6%A1%A3%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第9章、项目的合同管理和文档与配置管理"><a href="#第9章、项目的合同管理和文档与配置管理" class="headerlink" title="第9章、项目的合同管理和文档与配置管理"></a>第9章、项目的合同管理和文档与配置管理</h1><span id="more"></span><h2 id="一、合同管理"><a href="#一、合同管理" class="headerlink" title="一、合同管理"></a>一、合同管理</h2><h3 id="1、合同形式"><a href="#1、合同形式" class="headerlink" title="1、合同形式"></a>1、合同形式</h3><h4 id="1）最新的法规"><a href="#1）最新的法规" class="headerlink" title="1）最新的法规"></a>1）最新的法规</h4><p>2021年1月起，颁布《中华人民共和国民法典》，原来的《合同法》合并其中，并规范了部分解释</p><h5 id="《民法典》对合同形式的解释"><a href="#《民法典》对合同形式的解释" class="headerlink" title="《民法典》对合同形式的解释"></a>《民法典》对合同形式的解释</h5><blockquote><p>**第四百六十九条: **</p><p>当事人订立合同，可以采用书面形式、口头形式或者其他形式。</p><p>书面形式是合同书、信件、电报、电传、传真等可以有形地表现所载内容的形式。</p><p>以电子数据交换、电子邮件等方式能够有形地表现所载内容，并可以随时调取茶用的数据电文，视为书面形式。</p></blockquote><h4 id="2）书面形式"><a href="#2）书面形式" class="headerlink" title="2）书面形式"></a>2）书面形式</h4><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><p>指以文字写成书面文件的方式达成的协议</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>形式明确肯定，有据可查</li><li>对于防止纠纷和解决争议具有重要作用</li></ul><h4 id="3）口头形式"><a href="#3）口头形式" class="headerlink" title="3）口头形式"></a>3）口头形式</h4><h5 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h5><p>指当事人面对面地谈话或者以电话交谈等方式达成的协议</p><h5 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h5><ul><li>直接、简便、快速</li><li>数额较小或者现款交易通常采用口头形式</li><li>是老百姓日常生活中广泛采用的合同形式</li></ul><h5 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h5><ul><li>发生纠纷举证困难</li></ul><h4 id="4）其他形式"><a href="#4）其他形式" class="headerlink" title="4）其他形式"></a>4）其他形式</h4><h5 id="概念：-2"><a href="#概念：-2" class="headerlink" title="概念："></a>概念：</h5><p>指根据当事人的行为或者特定情形<strong>推定成立</strong>的合同，也称为<strong>默示合同</strong></p><h5 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h5><p>当事人未用语言明确表示成立，而是根据当事人的行为推定成立</p><h5 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h5><p>如房屋租赁合同，租赁期满后，出租人为提出让承租人退房，承租人也未表示退房而继续交租金，出租人仍接受租金，尽管当事人之间没有重新签订合同，但是依行为推定，合同仍有效，继续履行</p><h3 id="2、合同签订之前的程序"><a href="#2、合同签订之前的程序" class="headerlink" title="2、合同签订之前的程序"></a>2、合同签订之前的程序</h3><h4 id="1）要约"><a href="#1）要约" class="headerlink" title="1）要约"></a>1）要约</h4><h5 id="概念：-3"><a href="#概念：-3" class="headerlink" title="概念："></a>概念：</h5><p>希望与他人订立合同（投标文件）</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h5><ul><li>内容具体确定，如价格、规格、型号、数量</li><li>经受要约人承诺，一旦接受就必须去做</li></ul><h4 id="2）要约邀请"><a href="#2）要约邀请" class="headerlink" title="2）要约邀请"></a>2）要约邀请</h4><h5 id="概念：-4"><a href="#概念：-4" class="headerlink" title="概念："></a>概念：</h5><p>希望他人向自己发出要约（招标文件）</p><h5 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h5><p>要约邀请不会确定具体的价格</p><h5 id="样例：-1"><a href="#样例：-1" class="headerlink" title="样例："></a>样例：</h5><p>拍卖公告、招标公告、招股说明书、债券募集办法、基金招募说明书、商业广告和宣传、寄送的价目表等</p><h5 id="例外："><a href="#例外：" class="headerlink" title="例外："></a>例外：</h5><p>商业广告和宣传内容符合要约条件，即视为要约</p><h4 id="3）承诺"><a href="#3）承诺" class="headerlink" title="3）承诺"></a>3）承诺</h4><h5 id="概念：-5"><a href="#概念：-5" class="headerlink" title="概念："></a>概念：</h5><p>受要约人同意要约</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p><strong>承诺当以通知的方式作出</strong>，但是根据交易习惯或要约表明可以通过行为作出承诺的情况除外</p><h4 id="4）《民法典》解释："><a href="#4）《民法典》解释：" class="headerlink" title="4）《民法典》解释："></a>4）《民法典》解释：</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831130036062.png" alt="image-20210831130036062"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831130217704.png" alt="image-20210831130217704"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831130241412.png" alt="image-20210831130241412"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831130419210.png" alt="image-20210831130419210"></p><h3 id="3、关于合同内容约定不明确的规定"><a href="#3、关于合同内容约定不明确的规定" class="headerlink" title="3、关于合同内容约定不明确的规定"></a>3、关于合同内容约定不明确的规定</h3><h4 id="1）《民法典》解释"><a href="#1）《民法典》解释" class="headerlink" title="1）《民法典》解释"></a>1）《民法典》解释</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831131953380.png" alt="image-20210831131953380"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831132031790.png" alt="image-20210831132031790"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831132139924.png" alt="image-20210831132139924"></p><h4 id="2）总结"><a href="#2）总结" class="headerlink" title="2）总结"></a>2）总结</h4><h5 id="1-质量不明确"><a href="#1-质量不明确" class="headerlink" title="1. 质量不明确"></a>1. 质量不明确</h5><ul><li>依照国家标准</li><li>依照行业标准（如没有国家标准）</li><li>依照合同目的（如没有行业标准）</li></ul><h5 id="2-价款（报酬）不明确"><a href="#2-价款（报酬）不明确" class="headerlink" title="2. 价款（报酬）不明确"></a>2. 价款（报酬）不明确</h5><ul><li>依照订立合同时履行地的市场价</li></ul><h5 id="3-地点不明确"><a href="#3-地点不明确" class="headerlink" title="3. 地点不明确"></a>3. 地点不明确</h5><ul><li>钱：在接受方所载地履行</li><li>不动产：在不动产所在地履行</li><li>其他：在履行义务方所在地履行</li></ul><h5 id="4-期限不明确"><a href="#4-期限不明确" class="headerlink" title="4. 期限不明确"></a>4. 期限不明确</h5><ul><li>债务人随时可履行，但需给准备时间</li><li>债权人随时可请求履行</li></ul><h5 id="5-方式不明确"><a href="#5-方式不明确" class="headerlink" title="5. 方式不明确"></a>5. 方式不明确</h5><ul><li>按有利于合同目的的方式</li></ul><h5 id="6-费用不明确"><a href="#6-费用不明确" class="headerlink" title="6. 费用不明确"></a>6. 费用不明确</h5><ul><li>由履行义务方承担</li><li>因债权人原因增加的费用由债权人承担</li></ul><h3 id="4、什么是政府指导价？"><a href="#4、什么是政府指导价？" class="headerlink" title="4、什么是政府指导价？"></a>4、什么是政府指导价？</h3><h4 id="1）《民法典》解释-1"><a href="#1）《民法典》解释-1" class="headerlink" title="1）《民法典》解释"></a>1）《民法典》解释</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831133930987.png" alt="image-20210831133930987"></p><p>2）</p><h3 id="5、定金、订金"><a href="#5、定金、订金" class="headerlink" title="5、定金、订金"></a>5、定金、订金</h3><h3 id="6、建设工程合同、委托合同"><a href="#6、建设工程合同、委托合同" class="headerlink" title="6、建设工程合同、委托合同"></a>6、建设工程合同、委托合同</h3><h3 id="7、无因管理、不当得利"><a href="#7、无因管理、不当得利" class="headerlink" title="7、无因管理、不当得利"></a>7、无因管理、不当得利</h3><h2 id="二、信息系统文档与配置管理"><a href="#二、信息系统文档与配置管理" class="headerlink" title="二、信息系统文档与配置管理"></a>二、信息系统文档与配置管理</h2><h3 id="1、文档管理"><a href="#1、文档管理" class="headerlink" title="1、文档管理"></a>1、文档管理</h3><h3 id="2、配置管理"><a href="#2、配置管理" class="headerlink" title="2、配置管理"></a>2、配置管理</h3><h3 id="3、开发文档、产品文档、管理文档"><a href="#3、开发文档、产品文档、管理文档" class="headerlink" title="3、开发文档、产品文档、管理文档"></a>3、开发文档、产品文档、管理文档</h3><h4 id="4、如何进行文档规范化管理"><a href="#4、如何进行文档规范化管理" class="headerlink" title="4、如何进行文档规范化管理"></a>4、如何进行文档规范化管理</h4><h4 id="5、配置管理相关概念"><a href="#5、配置管理相关概念" class="headerlink" title="5、配置管理相关概念"></a>5、配置管理相关概念</h4><p>6、草稿、正式、正在修改</p><p>7、开发库、受控库、产品库</p><p>8、配置管理员活动</p>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第8章、项目的立项和收尾</title>
    <link href="/2021/08/31/%E7%AC%AC8%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AB%8B%E9%A1%B9%E5%92%8C%E6%94%B6%E5%B0%BE/"/>
    <url>/2021/08/31/%E7%AC%AC8%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AB%8B%E9%A1%B9%E5%92%8C%E6%94%B6%E5%B0%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="第8章、项目的立项和收尾"><a href="#第8章、项目的立项和收尾" class="headerlink" title="第8章、项目的立项和收尾"></a>第8章、项目的立项和收尾</h1><span id="more"></span><h2 id="一、项目立项"><a href="#一、项目立项" class="headerlink" title="一、项目立项"></a>一、项目立项</h2><h2 id="二、项目收尾"><a href="#二、项目收尾" class="headerlink" title="二、项目收尾"></a>二、项目收尾</h2>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第7章、项目的沟通管理和干系人管理</title>
    <link href="/2021/08/31/%E7%AC%AC7%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%E5%92%8C%E5%B9%B2%E7%B3%BB%E4%BA%BA%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC7%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%E5%92%8C%E5%B9%B2%E7%B3%BB%E4%BA%BA%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第7章、项目的沟通管理和干系人管理"><a href="#第7章、项目的沟通管理和干系人管理" class="headerlink" title="第7章、项目的沟通管理和干系人管理"></a>第7章、项目的沟通管理和干系人管理</h1><span id="more"></span><h2 id="一、沟通管理"><a href="#一、沟通管理" class="headerlink" title="一、沟通管理"></a>一、沟通管理</h2><h3 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h3><h4 id="1）沟通的概念"><a href="#1）沟通的概念" class="headerlink" title="1）沟通的概念"></a>1）沟通的概念</h4><ul><li><p>沟通就是为确保项目信息及时且恰当地规划、收集、生产、发布、存储、检索、管理、控制、监督和最终处置项目所需的各个过程</p></li><li><p>管理就是沟通，没有沟通就没有管理</p></li><li><p>良好的沟通促进项目的成功</p></li><li><p>沟通中最重要的不仅是你发出了什么，且要关注对方接收和理解了什么、有什么样的反馈</p></li></ul><h4 id="2）沟通的分类"><a href="#2）沟通的分类" class="headerlink" title="2）沟通的分类"></a>2）沟通的分类</h4><h5 id="1-按严肃程度划分"><a href="#1-按严肃程度划分" class="headerlink" title="1. 按严肃程度划分"></a>1. 按严肃程度划分</h5><ul><li>正式沟通</li><li>非正式沟通</li></ul><h5 id="2-按沟通方向划分"><a href="#2-按沟通方向划分" class="headerlink" title="2. 按沟通方向划分"></a>2. 按沟通方向划分</h5><ul><li>单向沟通</li><li>双向沟通</li><li>横向沟通</li><li>纵向沟通</li></ul><h5 id="3-按沟通工具划分"><a href="#3-按沟通工具划分" class="headerlink" title="3. 按沟通工具划分"></a>3. 按沟通工具划分</h5><ul><li>书面沟通</li><li>口头沟通</li></ul><h3 id="2、沟通模型和状态"><a href="#2、沟通模型和状态" class="headerlink" title="2、沟通模型和状态"></a>2、沟通模型和状态</h3><h4 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h4><h5 id="1-编码"><a href="#1-编码" class="headerlink" title="1. 编码"></a>1. 编码</h5><p>把思想或想法转化为他人理解的语言</p><h5 id="2-信息和反馈信息"><a href="#2-信息和反馈信息" class="headerlink" title="2. 信息和反馈信息"></a>2. 信息和反馈信息</h5><p>编码过程所得到的结果</p><h5 id="3-媒介"><a href="#3-媒介" class="headerlink" title="3. 媒介"></a>3. 媒介</h5><p>用来传递信息的方法</p><h5 id="4-噪声"><a href="#4-噪声" class="headerlink" title="4. 噪声"></a>4. 噪声</h5><p>干扰信息传输和理解的一切因素，如距离、新技术、缺乏背景信息等</p><h5 id="5-解码"><a href="#5-解码" class="headerlink" title="5. 解码"></a>5. 解码</h5><p>把信息还原成有意义的思想或想法</p><h4 id="2）四个部分"><a href="#2）四个部分" class="headerlink" title="2）四个部分"></a>2）四个部分</h4><h5 id="1-发送方"><a href="#1-发送方" class="headerlink" title="1. 发送方"></a>1. 发送方</h5><h5 id="2-接收方"><a href="#2-接收方" class="headerlink" title="2. 接收方"></a>2. 接收方</h5><h5 id="3-媒介-1"><a href="#3-媒介-1" class="headerlink" title="3. 媒介"></a>3. 媒介</h5><h5 id="4-消息"><a href="#4-消息" class="headerlink" title="4. 消息"></a>4. 消息</h5><h4 id="3）五个基本状态（发收理认转）"><a href="#3）五个基本状态（发收理认转）" class="headerlink" title="3）五个基本状态（发收理认转）"></a>3）五个基本状态（发收理认转）</h4><ul><li>已发送</li><li>已收到</li><li>已理解</li><li>已认可</li><li>已转化</li></ul><h4 id="4）模型图"><a href="#4）模型图" class="headerlink" title="4）模型图"></a>4）模型图</h4><h5 id="1-沟通模型"><a href="#1-沟通模型" class="headerlink" title="1. 沟通模型"></a>1. 沟通模型</h5><p>![image-20210904175737131](/Users/shenlei/Library/Application Support/typora-user-images/image-20210904175737131.png)</p><h5 id="2-沟通信息准确度逐级递减漏斗模型"><a href="#2-沟通信息准确度逐级递减漏斗模型" class="headerlink" title="2. 沟通信息准确度逐级递减漏斗模型"></a>2. 沟通信息准确度逐级递减漏斗模型</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905114830233.png" alt="image-20210905114830233"></p><h3 id="3、沟通渠道和技巧"><a href="#3、沟通渠道和技巧" class="headerlink" title="3、沟通渠道和技巧"></a>3、沟通渠道和技巧</h3><h4 id="1）沟通渠道类型"><a href="#1）沟通渠道类型" class="headerlink" title="1）沟通渠道类型"></a>1）沟通渠道类型</h4><h5 id="1-文字"><a href="#1-文字" class="headerlink" title="1. 文字"></a>1. 文字</h5><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul><li><strong>可永久保存</strong>，容易查询</li><li>节约时间，阅读速度高于语言速度</li><li>读者可以根据自己的速度进行调整</li><li>无地理位置需求</li><li>更为精准</li><li>理论上可多次无损复制传播</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>纯文字资料损失了大量非语言符号，<strong>不利于情感的传递</strong></li><li>对于阅读者的选择无控制力</li><li>无法控制何时，以及是否被阅读</li></ul><h5 id="2-语言"><a href="#2-语言" class="headerlink" title="2. 语言"></a>2. 语言</h5><h6 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h6><ul><li><strong>可传递情感</strong></li><li>可同时跨地域沟通</li><li>比邮件更快</li><li>不需要保存传递信息的优先选择渠道</li></ul><h6 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>不利于建立促进个人关系</li><li>无法表现肢体语言</li><li>做不到文字资料的精准性，把<strong>握细节能力不足</strong></li><li>说 的速度比阅读速度相对慢</li></ul><h5 id="3-混合"><a href="#3-混合" class="headerlink" title="3. 混合"></a>3. 混合</h5><h6 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h6><ul><li>包括语言信息和非语言信息，<strong>沟通信息含量最丰富</strong></li><li>是建立集体关系和地位最好的渠道</li><li><strong>实时性最好</strong>，可以实时的做出反应和回复</li><li>对接收对象的选择有一定控制力</li></ul><h6 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>与语言方式相同，<strong>非文字信息速度慢</strong></li><li>利用语言沟通的时候，<strong>细节把握性不强</strong></li></ul><h4 id="2）选择的维度"><a href="#2）选择的维度" class="headerlink" title="2）选择的维度"></a>2）选择的维度</h4><h5 id="1-即时性维度"><a href="#1-即时性维度" class="headerlink" title="1. 即时性维度"></a>1. 即时性维度</h5><h5 id="2-表达方式维度"><a href="#2-表达方式维度" class="headerlink" title="2. 表达方式维度"></a>2. 表达方式维度</h5><h4 id="3）沟通存在的问题"><a href="#3）沟通存在的问题" class="headerlink" title="3）沟通存在的问题"></a>3）沟通存在的问题</h4><h5 id="1-语言表达能力不佳或欠缺"><a href="#1-语言表达能力不佳或欠缺" class="headerlink" title="1. 语言表达能力不佳或欠缺"></a>1. 语言表达能力不佳或欠缺</h5><h5 id="2-不懂得说话的技巧或艺术"><a href="#2-不懂得说话的技巧或艺术" class="headerlink" title="2. 不懂得说话的技巧或艺术"></a>2. 不懂得说话的技巧或艺术</h5><h5 id="3-未能充分传达自己的信息"><a href="#3-未能充分传达自己的信息" class="headerlink" title="3. 未能充分传达自己的信息"></a>3. 未能充分传达自己的信息</h5><h5 id="4-未能有效控制自己的情绪"><a href="#4-未能有效控制自己的情绪" class="headerlink" title="4. 未能有效控制自己的情绪"></a>4. 未能有效控制自己的情绪</h5><h4 id="4）沟通的有效性"><a href="#4）沟通的有效性" class="headerlink" title="4）沟通的有效性"></a>4）沟通的有效性</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h5><p>所有的沟通活动最终要关注的就是有效的沟通结果</p><h5 id="2-要素"><a href="#2-要素" class="headerlink" title="2. 要素"></a>2. 要素</h5><h6 id="效果（准确性）"><a href="#效果（准确性）" class="headerlink" title="效果（准确性）"></a>效果（准确性）</h6><p>强调在适当的时间、适当的方式、信息被准确的发送给适当的沟通参与方（信息的接收方），并且能被正确理解</p><h6 id="效率（及时性）"><a href="#效率（及时性）" class="headerlink" title="效率（及时性）"></a>效率（及时性）</h6><p>强调及时提供所需的信息</p><h5 id="3-提高沟通效率的原则"><a href="#3-提高沟通效率的原则" class="headerlink" title="3. 提高沟通效率的原则"></a>3. 提高沟通效率的原则</h5><ul><li>沟通内外有别</li><li>采用对方能够接受的风格</li><li>非正式的沟通有助于关系的融洽</li><li>扫除沟通的障碍</li><li>沟通的升级原则</li></ul><h5 id="4-阻碍因素"><a href="#4-阻碍因素" class="headerlink" title="4. 阻碍因素"></a>4. 阻碍因素</h5><ul><li>沟通双方的物理距离</li><li>沟通的环境因素</li><li>缺乏清晰的沟通渠道</li><li>复杂的组织结构</li><li>复杂的技术术语</li><li>有害的态度</li></ul><h5 id="5-如何有效的组织项目会议"><a href="#5-如何有效的组织项目会议" class="headerlink" title="5. 如何有效的组织项目会议"></a>5. 如何有效的组织项目会议</h5><ul><li>明确会议的目的和期望的结果（只在确定需要时才召开会议）</li><li>确定参加会议的人员</li><li>在会议召开前向参加者提供会议议程（明确议题，提前分发评审资料、会议通知）</li><li>使会议专业化（指定专门的主持人 —— 控制时间方向）</li><li>以积极、正面的态度解决问题</li><li>重视会议之后的记录（会议要形成结论、发布经审核的会议纪要）</li><li>重视会议结果的告知（会议纪要要落实到责任人、时间）</li></ul><h3 id="4、管理过程"><a href="#4、管理过程" class="headerlink" title="4、管理过程"></a>4、管理过程</h3><h4 id="1）规划沟通管理"><a href="#1）规划沟通管理" class="headerlink" title="1）规划沟通管理"></a>1）规划沟通管理</h4><h5 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li><p><strong>识别和记录与干系人最有效率和效果的沟通方式</strong></p></li><li><p>基于干系人相关信息需求、可用组织资产和具体项目需求，为项目沟通活动制定恰当、有效的方法和计划</p></li></ul><h5 id="2-关注重点"><a href="#2-关注重点" class="headerlink" title="2. 关注重点"></a>2. 关注重点</h5><p>制定有效性的沟通管理计划</p><h5 id="3-沟通管理计划的主要内容"><a href="#3-沟通管理计划的主要内容" class="headerlink" title="3. 沟通管理计划的主要内容"></a>3. 沟通管理计划的主要内容</h5><ul><li>项目干系人的沟通需要（不同的干系人的需求不同）</li><li>对要发布的信息进行描述（内容、描述、详尽程度）</li><li>信息接收的个人或组织</li><li>传达信息所需的技术或方法（</li><li>沟通效率</li><li>上报过程</li><li>随项目进展对沟通管理计划更新与细化的方法</li><li>通用词语组</li></ul><h5 id="4-输入"><a href="#4-输入" class="headerlink" title="4. 输入"></a>4. 输入</h5><ul><li><strong>项目管理计划</strong></li><li><h2 id="干系人登记册"><a href="#干系人登记册" class="headerlink" title="干系人登记册"></a>干系人登记册</h2></li><li>事业环境因素</li><li>组织过程资产</li></ul><h5 id="5-工具和技术"><a href="#5-工具和技术" class="headerlink" title="5. 工具和技术"></a>5. 工具和技术</h5><ul><li>分析沟通需求</li><li>信息传递方法的选择</li></ul><h5 id="6-输出"><a href="#6-输出" class="headerlink" title="6. 输出"></a>6. 输出</h5><ul><li>项目文件更新</li><li><strong>沟通管理计划</strong></li></ul><h4 id="2）管理沟通"><a href="#2）管理沟通" class="headerlink" title="2）管理沟通"></a>2）管理沟通</h4><h5 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li><p><strong>促进干系人之间实现有效率和效果的沟通</strong></p></li><li><p>确保项目信息及时恰当地收集、生成、发布、存储、检索、管理、监督和最终处置</p></li></ul><h5 id="2-关注重点-1"><a href="#2-关注重点-1" class="headerlink" title="2. 关注重点"></a>2. 关注重点</h5><p>确保沟通的效果</p><h5 id="3-输入"><a href="#3-输入" class="headerlink" title="3. 输入"></a>3. 输入</h5><ul><li>沟通管理计划</li><li>工作绩效报告</li><li>事业环境因素</li><li>组织过程资产</li></ul><h5 id="4-工具和技术"><a href="#4-工具和技术" class="headerlink" title="4. 工具和技术"></a>4. 工具和技术</h5><ul><li>沟通渠道的选择</li><li>信息传递方法的选择</li><li>信息管理系统</li><li>绩效报告</li></ul><h5 id="5-输出"><a href="#5-输出" class="headerlink" title="5. 输出"></a>5. 输出</h5><ul><li>项目沟通</li><li>项目管理计划更新</li><li>项目文件更新</li><li>组织过程资产更新</li></ul><h4 id="3）控制沟通"><a href="#3）控制沟通" class="headerlink" title="3）控制沟通"></a>3）控制沟通</h4><h5 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li><p><strong>随时确保所有参与者之间信息流动最优化</strong></p></li><li><p>确保满足项目及其相关方的信息需求</p></li></ul><h5 id="2-关注重点-2"><a href="#2-关注重点-2" class="headerlink" title="2.关注重点"></a>2.关注重点</h5><p>持续改进</p><h5 id="3-输入-1"><a href="#3-输入-1" class="headerlink" title="3. 输入"></a>3. 输入</h5><ul><li>项目管理计划</li><li>项目沟通</li><li>问题日志</li><li>工作绩效数据</li><li>组织过程资产</li></ul><h5 id="4-工具和技术-1"><a href="#4-工具和技术-1" class="headerlink" title="4. 工具和技术"></a>4. 工具和技术</h5><ul><li>信息管理系统</li><li>专家判断</li><li>会议</li></ul><h5 id="5-输出-1"><a href="#5-输出-1" class="headerlink" title="5. 输出"></a>5. 输出</h5><ul><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新</li><li>项目文件更新</li><li>组织过程资产更新</li></ul><h3 id="5、技术与工具"><a href="#5、技术与工具" class="headerlink" title="5、技术与工具"></a>5、技术与工具</h3><h4 id="1）干系人登记册"><a href="#1）干系人登记册" class="headerlink" title="1）干系人登记册"></a>1）干系人登记册</h4><p>主要沟通对象、关键影响人、次要沟通对象</p><h4 id="2）沟通渠道计算"><a href="#2）沟通渠道计算" class="headerlink" title="2）沟通渠道计算"></a>2）沟通渠道计算</h4><h5 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905094859736.png" alt="image-20210905094859736"></p><blockquote><p>两者之间沟通要去掉沟通的出发点（自己不能和自己沟通），所以是 n * (n-1)</p><p>两者之间沟通是一条渠道，所以 /2</p></blockquote><h4 id="3）信息传递方式的选择"><a href="#3）信息传递方式的选择" class="headerlink" title="3）信息传递方式的选择"></a>3）信息传递方式的选择</h4><h5 id="1-交互式沟通"><a href="#1-交互式沟通" class="headerlink" title="1. 交互式沟通"></a>1. 交互式沟通</h5><h6 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h6><ul><li>最有效的方法</li><li>快速传递</li><li>快速反馈</li><li>信息量大</li></ul><h6 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>传递中经过层次越多，信息失真可能性越大、核实的难度越大</li></ul><h6 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h6><ul><li>即时通信</li><li>电话</li><li>视频会</li></ul><h5 id="2-推式沟通"><a href="#2-推式沟通" class="headerlink" title="2. 推式沟通"></a>2. 推式沟通</h5><h6 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h6><ul><li>持久</li><li>有形</li><li>可核实</li></ul><h6 id="缺点：-4"><a href="#缺点：-4" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>效率低</li><li>缺乏反馈</li></ul><h6 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h6><ul><li>信件</li><li>报告</li><li>电子邮件</li><li>传真</li><li>日志</li><li>新闻稿</li></ul><h5 id="3-拉式沟通"><a href="#3-拉式沟通" class="headerlink" title="3. 拉式沟通"></a>3. 拉式沟通</h5><h6 id="优点：-5"><a href="#优点：-5" class="headerlink" title="优点："></a>优点：</h6><ul><li>信息意义十分明确，内涵丰富</li></ul><h6 id="缺点：-5"><a href="#缺点：-5" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>传递距离有限，界限模糊</li></ul><h6 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h6><ul><li>企业内网</li><li>电子在线选课</li><li>经验教训数据库</li><li>知识库</li></ul><h4 id="3）沟通的方式"><a href="#3）沟通的方式" class="headerlink" title="3）沟通的方式"></a>3）沟通的方式</h4><h5 id="1-方式"><a href="#1-方式" class="headerlink" title="1. 方式"></a>1. 方式</h5><ul><li>参与讨论<ul><li>如：头脑风暴</li></ul></li><li>征询方式<ul><li>如：问卷调查</li></ul></li><li>推销方式（说明）<ul><li>如：叙述解释</li></ul></li><li>叙述方式<ul><li>如：劝说鼓动</li></ul></li></ul><h5 id="2-参与和控制的关系"><a href="#2-参与和控制的关系" class="headerlink" title="2. 参与和控制的关系"></a>2. 参与和控制的关系</h5><blockquote><p>🚩 参与程度和控制程度成反比。</p></blockquote><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905100339854.png" alt="image-20210905100339854"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905100506504.png" alt="image-20210905100506504"></p><h5 id="3-如何选择"><a href="#3-如何选择" class="headerlink" title="3. 如何选择"></a>3. 如何选择</h5><ul><li>已掌握足够信息，不需要进一步听取意见，选择叙述方式，其次选择推销方式</li><li>掌握信息不足，没有完整成型意见，选择讨论或征询方式</li></ul><h4 id="4）沟通常用技巧"><a href="#4）沟通常用技巧" class="headerlink" title="4）沟通常用技巧"></a>4）沟通常用技巧</h4><ul><li><p>主动倾听</p></li><li><p>有效利用多种手段，尽最大可能帮助自己理解信息内容</p></li><li><p>有效利用多种手段，加强团体沟通技能</p></li><li><p>不回避问题，尽量了解事实真相</p></li><li><p>设定目标，采取必要的追踪、验证手段确定是否达到沟通目标</p></li><li><p>有多层次沟通协商能力，保证最大程度满足多方利益</p></li><li><p>强大的人格魅力和信用，帮助其他人树立信心</p></li><li><p>强大的表达能力，帮助他人提升士气，增加团队执行力</p></li></ul><h4 id="5）沟通管理计划"><a href="#5）沟通管理计划" class="headerlink" title="5）沟通管理计划"></a>5）沟通管理计划</h4><ul><li>通用术语表</li><li>干系人的沟通需求</li><li>需要沟通的信息，包括语言、格式、内容、详细程度</li><li>发布信息的原因</li><li>发布信息以及告知收悉或做出回应（如适用）的时限和频率</li><li>负责沟通相关信息的人员</li><li>负责授权保密信息发布的人员</li><li>将要接收信息个人或小组</li><li>传递信息的技术或方法</li><li>为沟通活动分配的资源，包括时间和预算</li><li>问题升级程序，用于规定下层员工无法解决问题的上报时限和上报路径</li><li>随项目进展，对沟通管理计划进行更新与优化的方法</li><li>项目信息流向图】工作流程（兼有授权顺序）、报告清单、会议计划</li><li>沟通制约因素，通常来自特定的法律法规、技术要求和组织政策</li><li>项目状态会议、项目团队会议、网络会议和电子邮件信息等的指南和模版</li><li>项目所用网站和项目管理软件的使用说明</li></ul><h3 id="6、管理沟通-VS-控制沟通"><a href="#6、管理沟通-VS-控制沟通" class="headerlink" title="6、管理沟通 VS 控制沟通"></a>6、管理沟通 VS 控制沟通</h3><h4 id="1）共性"><a href="#1）共性" class="headerlink" title="1）共性"></a>1）共性</h4><ul><li>都需要根据沟通管理计划来展开</li><li>都是项目沟通管理的过程</li></ul><h4 id="2）联系"><a href="#2）联系" class="headerlink" title="2）联系"></a>2）联系</h4><ul><li>管理沟通的输出是 <strong>项目沟通</strong>，是控制沟通的输入（<strong>项目沟通即已实际展开的沟通，如已召开的项目会议</strong>）</li><li>控制沟通的输出时 <strong>变更申请</strong>，会引发重新展开规沟通管理过程或管理沟通过程</li></ul><h4 id="3）区别"><a href="#3）区别" class="headerlink" title="3）区别"></a>3）区别</h4><ul><li><strong>两者作用各不相同</strong>。管理沟通在执行过程组，是要展开有效的沟通；控制沟通时在监控过程组，是要检查沟通情况，及时提出变更申请</li></ul><h2 id="二、干系人管理"><a href="#二、干系人管理" class="headerlink" title="二、干系人管理"></a>二、干系人管理</h2><h3 id="1、基础知识-1"><a href="#1、基础知识-1" class="headerlink" title="1、基础知识"></a>1、基础知识</h3><h4 id="1）概念-1"><a href="#1）概念-1" class="headerlink" title="1）概念"></a>1）概念</h4><ul><li>识别干系人的需求，并通过沟通管理满足其需求、解决其问题的过程</li><li>目前是获得更多人的支持，确保项目成功</li></ul><h4 id="2）项目干系人"><a href="#2）项目干系人" class="headerlink" title="2）项目干系人"></a>2）项目干系人</h4><ul><li>能影响项目决策、活动或结果的个人、群体或组织</li><li>会受或自认为会受项目决策、活动或结果的个人、群体或组织</li><li>客户、发起人、执行组织和有关公众等</li></ul><h3 id="2、管理过程"><a href="#2、管理过程" class="headerlink" title="2、管理过程"></a>2、管理过程</h3><h4 id="1）识别干系人"><a href="#1）识别干系人" class="headerlink" title="1）识别干系人"></a>1）识别干系人</h4><h5 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. 目的</h5><p>帮助项目经理建立对更干系人或干系人群体的适度关注</p><h5 id="2-原则"><a href="#2-原则" class="headerlink" title="2. 原则"></a>2. 原则</h5><p>识别干系人要全面、要尽早、要迭代开展，关注变化，引导参与</p><h5 id="3-输入-2"><a href="#3-输入-2" class="headerlink" title="3. 输入"></a>3. 输入</h5><ul><li><strong>项目章程</strong></li><li><strong>采购文件</strong></li><li>事业环境因素</li><li>组织过程资产</li></ul><h5 id="4-工具和技术-2"><a href="#4-工具和技术-2" class="headerlink" title="4. 工具和技术"></a>4. 工具和技术</h5><ul><li>组织相关会议</li><li>专家判断</li><li><strong>干系人分析</strong> —— 权利/利益方格</li></ul><h5 id="5-输出-2"><a href="#5-输出-2" class="headerlink" title="5. 输出"></a>5. 输出</h5><ul><li><strong>干系人登记册</strong></li></ul><h4 id="2）规划干系人管理"><a href="#2）规划干系人管理" class="headerlink" title="2）规划干系人管理"></a>2）规划干系人管理</h4><h5 id="1-目的-1"><a href="#1-目的-1" class="headerlink" title="1. 目的"></a>1. 目的</h5><p>为与项目干系人的互动提供清晰且可操作的计划，一支持项目利益</p><h5 id="2-输入"><a href="#2-输入" class="headerlink" title="2. 输入"></a>2. 输入</h5><ul><li><strong>项目管理计划</strong></li><li><strong>干系人登记册</strong></li><li>事业环境因素</li><li>组织过程资产</li></ul><h5 id="3-工具和技术"><a href="#3-工具和技术" class="headerlink" title="3. 工具和技术"></a>3. 工具和技术</h5><ul><li>组织相关会议</li><li>专家判断</li><li><strong>干系人分析</strong></li></ul><h5 id="4-输出"><a href="#4-输出" class="headerlink" title="4. 输出"></a>4. 输出</h5><ul><li><strong>干系人管理计划</strong></li><li>项目文件更新</li></ul><h4 id="3）管理干系人"><a href="#3）管理干系人" class="headerlink" title="3）管理干系人"></a>3）管理干系人</h4><h5 id="1-目的-2"><a href="#1-目的-2" class="headerlink" title="1. 目的"></a>1. 目的</h5><p>帮助项目经理提升来自干系人的支持，并把干系人的抵制降到最低</p><h5 id="2-输入-1"><a href="#2-输入-1" class="headerlink" title="2. 输入"></a>2. 输入</h5><ul><li><strong>干系人管理计划</strong></li><li><strong>沟通管理计划</strong></li><li>变更日志</li><li>组织过程资产</li></ul><h5 id="3-工具和技术-1"><a href="#3-工具和技术-1" class="headerlink" title="3. 工具和技术"></a>3. 工具和技术</h5><ul><li>沟通方法</li><li>人际关系技能</li><li>管理技能</li></ul><h5 id="4-输出-1"><a href="#4-输出-1" class="headerlink" title="4. 输出"></a>4. 输出</h5><ul><li>问题日志</li><li>变更请求</li><li>项目管理计划更新</li><li>项目文件更新</li><li>组织过程资产更新</li></ul><h4 id="4）控制干系人参与"><a href="#4）控制干系人参与" class="headerlink" title="4）控制干系人参与"></a>4）控制干系人参与</h4><h5 id="1-目的-3"><a href="#1-目的-3" class="headerlink" title="1. 目的"></a>1. 目的</h5><p>显著提高项目成功的机会</p><h5 id="2-输入-2"><a href="#2-输入-2" class="headerlink" title="2. 输入"></a>2. 输入</h5><ul><li>项目管理计划</li><li>问题日志</li><li>工作绩效数据</li><li>项目文件</li></ul><h5 id="3-工具和技术-2"><a href="#3-工具和技术-2" class="headerlink" title="3. 工具和技术"></a>3. 工具和技术</h5><ul><li>信息管理系统</li><li>专家判断</li><li>会议</li></ul><h5 id="4-输出-2"><a href="#4-输出-2" class="headerlink" title="4. 输出"></a>4. 输出</h5><ul><li>工作绩效信息</li><li>变更请求</li><li>项目文件更新</li><li>组织过程资产更新</li></ul><h3 id="3、技术与工具"><a href="#3、技术与工具" class="headerlink" title="3、技术与工具"></a>3、技术与工具</h3><h4 id="1）干系人分析技术-——-权利-利益方格（-）"><a href="#1）干系人分析技术-——-权利-利益方格（-）" class="headerlink" title="1）干系人分析技术 —— 权利/利益方格（***）"></a>1）干系人分析技术 —— 权利/利益方格（***）</h4><h5 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li>根据干系人的权利大小和利益对其分类</li><li>指明项目需要建立的与各干系人之间的关系和种类</li></ul><h5 id="2-方格解析"><a href="#2-方格解析" class="headerlink" title="2. 方格解析"></a>2. 方格解析</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905111918554.png" alt="image-20210905111918554"></p><blockquote><ul><li><p>B 区的干系人</p><ul><li>项目的客户、项目的领导</li><li>权利高、利益高，对项目结果关注度高 —— 重点管理，及时报告</li></ul></li><li><p>A 区的干系人</p><ul><li>权利大、利益低，但对项目结果关注度低 —— 令其满意，争取支持</li></ul></li><li><p>C 区的干系人</p><ul><li><p>项目组成员</p></li><li><p>利益高，但权利低，也关注结果 —— 随时告知项目状态，保持及时沟通</p></li></ul></li><li><p>D 区的干系人</p><ul><li>没权力，对项目的关注度低 —— 花少量精力监督管理</li><li>可能发挥间接作用，态度要好一些，争取支持</li></ul></li></ul></blockquote><h4 id="2）项目干系人登记册"><a href="#2）项目干系人登记册" class="headerlink" title="2）项目干系人登记册"></a>2）项目干系人登记册</h4><h5 id="1-内容"><a href="#1-内容" class="headerlink" title="1. 内容"></a>1. 内容</h5><h6 id="身份识别："><a href="#身份识别：" class="headerlink" title="身份识别："></a>身份识别：</h6><ul><li>姓名</li><li>组织职位</li><li>地点</li><li>联系方式</li><li>在项目中扮演的角色</li></ul><h6 id="评估信息："><a href="#评估信息：" class="headerlink" title="评估信息："></a>评估信息：</h6><ul><li>主要需求、期望</li><li>影响项目的潜力</li><li>最能影响的项目生命周期阶段</li></ul><h6 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h6><ul><li>内部/外部</li><li>作用、影响</li><li>权利利益模型</li><li>上级、下级、外围或横向分类模型</li></ul><h5 id="2-表格形式"><a href="#2-表格形式" class="headerlink" title="2. 表格形式"></a>2. 表格形式</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905153453102.png" alt="image-20210905153453102"></p><h4 id="3）干系人参与度评估矩阵"><a href="#3）干系人参与度评估矩阵" class="headerlink" title="3）干系人参与度评估矩阵"></a>3）干系人参与度评估矩阵</h4><h5 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h5><h6 id="不了解型："><a href="#不了解型：" class="headerlink" title="不了解型："></a>不了解型：</h6><ul><li>不知道项目及其潜在影响</li></ul><h6 id="抵制型："><a href="#抵制型：" class="headerlink" title="抵制型："></a>抵制型：</h6><ul><li>知道项目及其潜在影响，但抵制项目工作或成果引发的变更</li></ul><h6 id="中立型："><a href="#中立型：" class="headerlink" title="中立型："></a>中立型：</h6><ul><li>了解项目，但即不支持，也不反对</li></ul><h6 id="支持型："><a href="#支持型：" class="headerlink" title="支持型："></a>支持型：</h6><ul><li>了解项目及其潜在影响，并且支持项目工作及其成果</li></ul><h6 id="领导型："><a href="#领导型：" class="headerlink" title="领导型："></a>领导型：</h6><ul><li>了解项目及其潜在影响，并且积极参与以确保项目取得成功</li></ul><h5 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905154754430.png" alt="image-20210905154754430"></p><blockquote><p>干系人1 需要从不知晓到支持。重点关注获取支持</p><p>干系人2 需要从中立到支持，使其满意获取支持</p><p>干系人3 本来就支持，监督即可</p></blockquote><h4 id="4）干系人管理计划"><a href="#4）干系人管理计划" class="headerlink" title="4）干系人管理计划"></a>4）干系人管理计划</h4><h5 id="1-主要内容"><a href="#1-主要内容" class="headerlink" title="1. 主要内容"></a>1. 主要内容</h5><ul><li>项目成员可以看到哪些信息</li><li>项目经理需要哪些信息</li><li>高层管理者需要哪些信息</li><li>客户需要哪些信息</li><li>文件的访问权限、访问路径以及文件的接受格式等</li></ul><h5 id="2-干系人管理计划表示例"><a href="#2-干系人管理计划表示例" class="headerlink" title="2. 干系人管理计划表示例"></a>2. 干系人管理计划表示例</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210905154915693.png" alt="image-20210905154915693"></p><h3 id="4、管理干系人参与-VS-控制干系人参与"><a href="#4、管理干系人参与-VS-控制干系人参与" class="headerlink" title="4、管理干系人参与 VS 控制干系人参与"></a>4、管理干系人参与 VS 控制干系人参与</h3><h4 id="1）共性-1"><a href="#1）共性-1" class="headerlink" title="1）共性"></a>1）共性</h4><ul><li>都是为了确保干系人实际参与项目的程度符合所需的参与程度</li><li>都可能对干系人管理工作提出变更申请</li></ul><h4 id="2）联系-1"><a href="#2）联系-1" class="headerlink" title="2）联系"></a>2）联系</h4><ul><li>管理干系人参与过程的输出时 <strong>问题日志</strong>，是控制干系人参与的输入</li><li>在项目管理实战中，管理干系人参与和控制干系人参与两者往往无法拆开</li></ul><h4 id="3）区别-1"><a href="#3）区别-1" class="headerlink" title="3）区别"></a>3）区别</h4><ul><li>管理干系人参与在执行过程组，控制干系人参与在监控过程组</li><li><strong>管理干系人参与，是基于对什么做法有利于提升和维持干系人参与的预期，从而采取哪些做法来实现这个预期</strong></li><li>控制干系人参与，是基于对干系人参与程度和所需程度的差距，从而采取措施使实际参与程度和预期程度相匹配</li></ul><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><h3 id="1、沟通过程有参与讨论、征询、说明、叙述方式，控制程度从弱到强如何排列？"><a href="#1、沟通过程有参与讨论、征询、说明、叙述方式，控制程度从弱到强如何排列？" class="headerlink" title="1、沟通过程有参与讨论、征询、说明、叙述方式，控制程度从弱到强如何排列？"></a>1、沟通过程有参与讨论、征询、说明、叙述方式，控制程度从弱到强如何排列？</h3><h3 id="2、沟通管理计划的内容？（前6条）"><a href="#2、沟通管理计划的内容？（前6条）" class="headerlink" title="2、沟通管理计划的内容？（前6条）"></a>2、沟通管理计划的内容？（前6条）</h3><h3 id="3、打电话时交互式沟通，上传免费资料到百度云，是推式沟通，还是来式沟通？"><a href="#3、打电话时交互式沟通，上传免费资料到百度云，是推式沟通，还是来式沟通？" class="headerlink" title="3、打电话时交互式沟通，上传免费资料到百度云，是推式沟通，还是来式沟通？"></a>3、打电话时交互式沟通，上传免费资料到百度云，是推式沟通，还是来式沟通？</h3><h3 id="4、一个项目原有5名成员，由于工作需要，增加了3名新成员，问此时项目的沟通渠道数比原来增加了多少倍？是原来的多少倍？"><a href="#4、一个项目原有5名成员，由于工作需要，增加了3名新成员，问此时项目的沟通渠道数比原来增加了多少倍？是原来的多少倍？" class="headerlink" title="4、一个项目原有5名成员，由于工作需要，增加了3名新成员，问此时项目的沟通渠道数比原来增加了多少倍？是原来的多少倍？"></a>4、一个项目原有5名成员，由于工作需要，增加了3名新成员，问此时项目的沟通渠道数比原来增加了多少倍？是原来的多少倍？</h3><h3 id="5、干系人管理有哪四个过程？"><a href="#5、干系人管理有哪四个过程？" class="headerlink" title="5、干系人管理有哪四个过程？"></a>5、干系人管理有哪四个过程？</h3><h3 id="6、请绘制干系人权利-利益方格"><a href="#6、请绘制干系人权利-利益方格" class="headerlink" title="6、请绘制干系人权利/利益方格"></a>6、请绘制干系人权利/利益方格</h3>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第6章、项目的采购管理和风险管理</title>
    <link href="/2021/08/31/%E7%AC%AC6%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%87%87%E8%B4%AD%E7%AE%A1%E7%90%86%E5%92%8C%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC6%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%87%87%E8%B4%AD%E7%AE%A1%E7%90%86%E5%92%8C%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第6章、项目的采购管理和风险管理"><a href="#第6章、项目的采购管理和风险管理" class="headerlink" title="第6章、项目的采购管理和风险管理"></a>第6章、项目的采购管理和风险管理</h1><span id="more"></span><h2 id="一、风险管理"><a href="#一、风险管理" class="headerlink" title="一、风险管理"></a>一、风险管理</h2><h3 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h3><h4 id="1）风险和项目风险管理定义"><a href="#1）风险和项目风险管理定义" class="headerlink" title="1）风险和项目风险管理定义"></a>1）风险和项目风险管理定义</h4><h5 id="1-风险的概念"><a href="#1-风险的概念" class="headerlink" title="1. 风险的概念"></a>1. 风险的概念</h5><ul><li>指与项目相关的若干<strong>不确定性</strong>事件或条件</li><li>会对项目目标的实现产生<strong>正面或负面的影响</strong></li></ul><h5 id="2-风险的计算公式"><a href="#2-风险的计算公式" class="headerlink" title="2. 风险的计算公式"></a>2. 风险的计算公式</h5><h5 id="3-项目风险管理的目的"><a href="#3-项目风险管理的目的" class="headerlink" title="3. 项目风险管理的目的"></a>3. 项目风险管理的目的</h5><ul><li>降低消极风险的发生概率和影响</li><li>提高积极风险的发生概率和影响</li></ul><h4 id="2）项目风险的特点"><a href="#2）项目风险的特点" class="headerlink" title="2）项目风险的特点"></a>2）项目风险的特点</h4><h4 id="3）风险的分类"><a href="#3）风险的分类" class="headerlink" title="3）风险的分类"></a>3）风险的分类</h4><h5 id="1-风险分类的目的"><a href="#1-风险分类的目的" class="headerlink" title="1. 风险分类的目的"></a>1. 风险分类的目的</h5><ul><li>为确保系统地、持续一致地、有效地进行风险识别提供了基础</li><li>为风险管理工作提供了一个框架</li></ul><h5 id="2-按性质划分"><a href="#2-按性质划分" class="headerlink" title="2. 按性质划分"></a>2. 按性质划分</h5><ul><li>纯粹风险</li><li>投机风险<ul><li>后果<ul><li>没有损失</li><li>有损失</li><li>收益</li></ul></li></ul></li></ul><h5 id="3-按产生原因划分"><a href="#3-按产生原因划分" class="headerlink" title="3. 按产生原因划分"></a>3. 按产生原因划分</h5><ul><li>自然风险<ul><li>特征<ul><li>不可控性</li><li>周期性</li><li>共沾性</li></ul></li></ul></li><li>社会风险</li><li>政治风险（国家风险）</li><li>经济风险</li><li>技术风险</li></ul><h5 id="4-按标的物划分"><a href="#4-按标的物划分" class="headerlink" title="4. 按标的物划分"></a>4. 按标的物划分</h5><ul><li>财产风险</li><li>责任风险</li><li>人身风险</li><li>信用风险</li></ul><h5 id="5-按行为划分"><a href="#5-按行为划分" class="headerlink" title="5. 按行为划分"></a>5. 按行为划分</h5><ul><li>特定风险</li><li>基本风险</li></ul><h5 id="6-按环境划分"><a href="#6-按环境划分" class="headerlink" title="6. 按环境划分"></a>6. 按环境划分</h5><ul><li>静态风险</li><li>动态风险</li></ul><h4 id="4）风险的应对"><a href="#4）风险的应对" class="headerlink" title="4）风险的应对"></a>4）风险的应对</h4><h5 id="1-已知已知风险"><a href="#1-已知已知风险" class="headerlink" title="1. 已知已知风险"></a>1. 已知已知风险</h5><h6 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h6><ul><li>风险的发生可预知，且风险的后果和影响可预知</li></ul><h6 id="应对："><a href="#应对：" class="headerlink" title="应对："></a>应对：</h6><ul><li>必须加管理，以降低威胁</li><li>用成本基准中的直接成本应对已知已知风险</li></ul><h5 id="2-已知未知风险"><a href="#2-已知未知风险" class="headerlink" title="2. 已知未知风险"></a>2. 已知未知风险</h5><h6 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h6><ul><li>风险的发生可预知，且风险的后果和影响不可知</li></ul><h6 id="应对：-1"><a href="#应对：-1" class="headerlink" title="应对："></a>应对：</h6><ul><li></li><li>用成本基准中的应急计划和应急储备应对</li></ul><h5 id="3-未知未知风险"><a href="#3-未知未知风险" class="headerlink" title="3. 未知未知风险"></a>3. 未知未知风险</h5><h6 id="概念：-2"><a href="#概念：-2" class="headerlink" title="概念："></a>概念：</h6><ul><li>风险的发生和后果都不可知</li></ul><h6 id="应对：-2"><a href="#应对：-2" class="headerlink" title="应对："></a>应对：</h6><ul><li>只能实际发生后再处理</li><li>非成本基准，适用权变措施和管理储备</li></ul><h4 id="5）项目风险管理与其他管理的关系"><a href="#5）项目风险管理与其他管理的关系" class="headerlink" title="5）项目风险管理与其他管理的关系"></a>5）项目风险管理与其他管理的关系</h4><h4 id="6）风险的可预测性"><a href="#6）风险的可预测性" class="headerlink" title="6）风险的可预测性"></a>6）风险的可预测性</h4><h5 id="1-已知风险"><a href="#1-已知风险" class="headerlink" title="1. 已知风险"></a>1. 已知风险</h5><ul><li>可以明确风险的发生，并且其后果也可预见</li><li>例如：项目目标不明确、过分乐观的进度计划等</li></ul><h5 id="2-可预测风险"><a href="#2-可预测风险" class="headerlink" title="2. 可预测风险"></a>2. 可预测风险</h5><ul><li>可以预见风险的发生，但其后果不可预见</li><li>例如：业主不能及时审批、分包商不能及时交付等</li></ul><h5 id="3-不可预测风险"><a href="#3-不可预测风险" class="headerlink" title="3. 不可预测风险"></a>3. 不可预测风险</h5><ul><li>风险的发生和后果都不可以预见，一般是外部因素作用的结果</li><li>例如：自然灾害、通货膨胀、政策变化等</li></ul><h4 id="7）风险管理的重要概念"><a href="#7）风险管理的重要概念" class="headerlink" title="7）风险管理的重要概念"></a>7）风险管理的重要概念</h4><h5 id=""><a href="#" class="headerlink" title=""></a><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210907125512861.png" alt="image-20210907125512861"></h5><h3 id="2、规划风险管理"><a href="#2、规划风险管理" class="headerlink" title="2、规划风险管理"></a>2、规划风险管理</h3><h4 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h4><p>决定如何进行规划和实施项目风险管理活动</p><h4 id="2）规划风险管理的过程"><a href="#2）规划风险管理的过程" class="headerlink" title="2）规划风险管理的过程"></a>2）规划风险管理的过程</h4><h4 id="3）输入"><a href="#3）输入" class="headerlink" title="3）输入"></a>3）输入</h4><h5 id="1-项目管理计划"><a href="#1-项目管理计划" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-项目章程"><a href="#2-项目章程" class="headerlink" title="2. 项目章程"></a>2. 项目章程</h5><h5 id="3-干系人登记册"><a href="#3-干系人登记册" class="headerlink" title="3. 干系人登记册"></a>3. 干系人登记册</h5><h5 id="4-组织过程资产"><a href="#4-组织过程资产" class="headerlink" title="4. 组织过程资产"></a>4. 组织过程资产</h5><h5 id="5-事业环境因素"><a href="#5-事业环境因素" class="headerlink" title="5. 事业环境因素"></a>5. 事业环境因素</h5><h4 id="4）工具与技术"><a href="#4）工具与技术" class="headerlink" title="4）工具与技术"></a>4）工具与技术</h4><h5 id="1-分析技术"><a href="#1-分析技术" class="headerlink" title="1. 分析技术"></a>1. 分析技术</h5><h5 id="2-专家判断"><a href="#2-专家判断" class="headerlink" title="2. 专家判断"></a>2. 专家判断</h5><h5 id="3-会议"><a href="#3-会议" class="headerlink" title="3. 会议"></a>3. 会议</h5><h4 id="5）输出"><a href="#5）输出" class="headerlink" title="5）输出"></a>5）输出</h4><h5 id="1-风险管理计划的内容（-）"><a href="#1-风险管理计划的内容（-）" class="headerlink" title="1. 风险管理计划的内容（***）"></a>1. 风险管理计划的内容（***）</h5><ul><li>方法论</li><li>角色与职责</li><li>预算</li><li>时间安排</li><li>风险类别</li><li>风险概率和影响的定义</li><li>概率和影响矩阵</li><li>修订的干系人承受能力</li><li>报告格式</li><li>跟踪</li></ul><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210907124331831.png" alt="image-20210907124331831"></p><h5 id="2-风险概率和影响的定义"><a href="#2-风险概率和影响的定义" class="headerlink" title="2. 风险概率和影响的定义"></a>2. 风险概率和影响的定义</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210906125226848.png" alt="image-20210906125226848"></p><h5 id="3-风险分解结构（RBS）"><a href="#3-风险分解结构（RBS）" class="headerlink" title="3. 风险分解结构（RBS）"></a>3. 风险分解结构（RBS）</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210906125409870.png" alt="image-20210906125409870"></p><h3 id="3、识别风险"><a href="#3、识别风险" class="headerlink" title="3、识别风险"></a>3、识别风险</h3><h4 id="1）基本知识"><a href="#1）基本知识" class="headerlink" title="1）基本知识"></a>1）基本知识</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li>判断哪些风险会影响项目，并以书面形式记录其特点</li><li>风险识别是一个反复的过程，贯彻整个项目生命周期，即使项目快要结束了，也可能出现新的风险，所以要不断的识别风险</li></ul><h5 id="2-风险识别的特点："><a href="#2-风险识别的特点：" class="headerlink" title="2. 风险识别的特点："></a>2. 风险识别的特点：</h5><ul><li>全员性</li><li>系统性</li><li>动态性</li><li>信息依赖性</li><li>综合性</li></ul><h5 id="3-重要注意事项"><a href="#3-重要注意事项" class="headerlink" title="3. 重要注意事项"></a>3. 重要注意事项</h5><ul><li>不要遗漏重要风险</li><li>不可能识别所有风险</li><li>风险识别的详尽程度与项目的预算有关</li><li>风险识别的详尽程度与项目的重要性有关</li></ul><h4 id="2）输入"><a href="#2）输入" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-风险、成本、进度、人力资源管理计划"><a href="#1-风险、成本、进度、人力资源管理计划" class="headerlink" title="1. 风险、成本、进度、人力资源管理计划"></a>1. 风险、成本、进度、人力资源管理计划</h5><h5 id="2-范围基准"><a href="#2-范围基准" class="headerlink" title="2. 范围基准"></a>2. 范围基准</h5><h5 id="3-活动成本估算和活动时间估算"><a href="#3-活动成本估算和活动时间估算" class="headerlink" title="3. 活动成本估算和活动时间估算"></a>3. 活动成本估算和活动时间估算</h5><h5 id="4-干系人登记册"><a href="#4-干系人登记册" class="headerlink" title="4. 干系人登记册"></a>4. 干系人登记册</h5><h5 id="5-项目文件"><a href="#5-项目文件" class="headerlink" title="5. 项目文件"></a>5. 项目文件</h5><h5 id="6-采购文件"><a href="#6-采购文件" class="headerlink" title="6. 采购文件"></a>6. 采购文件</h5><h5 id="7-事业环境因素"><a href="#7-事业环境因素" class="headerlink" title="7. 事业环境因素"></a>7. 事业环境因素</h5><h5 id="8-组织过程资产"><a href="#8-组织过程资产" class="headerlink" title="8. 组织过程资产"></a>8. 组织过程资产</h5><h4 id="3）工具与技术"><a href="#3）工具与技术" class="headerlink" title="3）工具与技术"></a>3）工具与技术</h4><h5 id="1-文档审查"><a href="#1-文档审查" class="headerlink" title="1. 文档审查"></a>1. 文档审查</h5><h5 id="2-信息收集技术"><a href="#2-信息收集技术" class="headerlink" title="2. 信息收集技术"></a>2. 信息收集技术</h5><ul><li>德尔菲技术（匿名投票）</li><li>头脑风暴</li><li>访谈</li><li>根本原因识别</li></ul><h5 id="3-核对表分析"><a href="#3-核对表分析" class="headerlink" title="3. 核对表分析"></a>3. 核对表分析</h5><h5 id="4-假设分析"><a href="#4-假设分析" class="headerlink" title="4. 假设分析"></a>4. 假设分析</h5><h5 id="5-图表分析"><a href="#5-图表分析" class="headerlink" title="5. 图表分析"></a>5. 图表分析</h5><ul><li>因果图</li><li>系统或过程流程图</li><li>影响图</li></ul><h5 id="6-SWOT-分析（⚠️是风险识别的方法）"><a href="#6-SWOT-分析（⚠️是风险识别的方法）" class="headerlink" title="6. SWOT 分析（⚠️是风险识别的方法）"></a>6. SWOT 分析（⚠️是风险识别的方法）</h5><ul><li>内部因素<ul><li>S：优势</li><li>W：劣势</li></ul></li><li>外部因素<ul><li>O：机遇</li><li>T：威胁</li></ul></li></ul><h5 id="7-专家判断"><a href="#7-专家判断" class="headerlink" title="7. 专家判断"></a>7. 专家判断</h5><h4 id="4）输出"><a href="#4）输出" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-风险登记册"><a href="#1-风险登记册" class="headerlink" title="1. 风险登记册"></a>1. 风险登记册</h5><h4 id="5）风险登记册"><a href="#5）风险登记册" class="headerlink" title="5）风险登记册"></a>5）风险登记册</h4><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210907125036468.png" alt="image-20210907125036468"></p><h3 id="3、风险的定性分析"><a href="#3、风险的定性分析" class="headerlink" title="3、风险的定性分析"></a>3、风险的定性分析</h3><h4 id="1）概念-1"><a href="#1）概念-1" class="headerlink" title="1）概念"></a>1）概念</h4><ul><li><p>对风险概率和影响进行评估和汇总，并进行排序，以便随后进一步分析或行动</p></li><li><p>要对所有识别出的风险进行定性分析</p></li></ul><h4 id="2）输入-1"><a href="#2）输入-1" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-风险管理计划"><a href="#1-风险管理计划" class="headerlink" title="1. 风险管理计划"></a>1. 风险管理计划</h5><h5 id="2-范围基准-1"><a href="#2-范围基准-1" class="headerlink" title="2. 范围基准"></a>2. 范围基准</h5><h5 id="3-风险登记册"><a href="#3-风险登记册" class="headerlink" title="3. 风险登记册"></a>3. 风险登记册</h5><h5 id="4-事业环境因素"><a href="#4-事业环境因素" class="headerlink" title="4. 事业环境因素"></a>4. 事业环境因素</h5><h5 id="5-组织过程资产"><a href="#5-组织过程资产" class="headerlink" title="5. 组织过程资产"></a>5. 组织过程资产</h5><h4 id="3）工具与技术-1"><a href="#3）工具与技术-1" class="headerlink" title="3）工具与技术"></a>3）工具与技术</h4><h5 id="1-风险概率影响评估"><a href="#1-风险概率影响评估" class="headerlink" title="1. 风险概率影响评估"></a>1. 风险概率影响评估</h5><ul><li>将风险识别为高中低</li></ul><h5 id="2-概率和影响矩阵"><a href="#2-概率和影响矩阵" class="headerlink" title="2. 概率和影响矩阵"></a>2. 概率和影响矩阵</h5><ul><li>深灰：高风险</li><li>浅灰：中风险</li><li>无色：低风险</li></ul><h5 id="3-风险数据质量评估"><a href="#3-风险数据质量评估" class="headerlink" title="3. 风险数据质量评估"></a>3. 风险数据质量评估</h5><h5 id="4-风险分类"><a href="#4-风险分类" class="headerlink" title="4. 风险分类"></a>4. 风险分类</h5><h5 id="5-风险紧迫性评估"><a href="#5-风险紧迫性评估" class="headerlink" title="5. 风险紧迫性评估"></a>5. 风险紧迫性评估</h5><h5 id="6-专家判断"><a href="#6-专家判断" class="headerlink" title="6. 专家判断"></a>6. 专家判断</h5><h4 id="4）输出-1"><a href="#4）输出-1" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-项目文件更新"><a href="#1-项目文件更新" class="headerlink" title="1. 项目文件更新"></a>1. 项目文件更新</h5><ul><li>风险登记册（将已识别的风险进行高中低排序）</li><li>假设条件日志</li></ul><h4 id="5）风险的概率和影响矩阵"><a href="#5）风险的概率和影响矩阵" class="headerlink" title="5）风险的概率和影响矩阵"></a>5）风险的概率和影响矩阵</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li><p>根据风险可能对实现项目目标产生的影响，进行<strong>风险优先排序</strong>。</p></li><li><p>风险值 = 风险发生的概率 * 风险发生的后果</p></li><li><p><strong>虽然矩阵中有数字，但是要表面的是风险的高低程度，故是风险的定性分析</strong></p></li></ul><h5 id="2-矩阵图示例"><a href="#2-矩阵图示例" class="headerlink" title="2. 矩阵图示例"></a>2. 矩阵图示例</h5><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210907124751275.png" alt="image-20210907124751275"></h5><h5 id="3-应对策略"><a href="#3-应对策略" class="headerlink" title="3. 应对策略"></a>3. 应对策略</h5><h6 id="高风险："><a href="#高风险：" class="headerlink" title="高风险："></a>高风险：</h6><ul><li>采取积极策略，主动性测试，代价大于可接受，放弃</li></ul><h6 id="中风险："><a href="#中风险：" class="headerlink" title="中风险："></a>中风险：</h6><ul><li>采取积极策略，主动性测试，代价大于可接受，接受</li></ul><h6 id="低风险："><a href="#低风险：" class="headerlink" title="低风险："></a>低风险：</h6><ul><li>放入待观察清单，增加一定的应急储备</li></ul><h4 id="6）风险数据质量评估"><a href="#6）风险数据质量评估" class="headerlink" title="6）风险数据质量评估"></a>6）风险数据质量评估</h4><h5 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h5><p>评估有关风险的数据对风险管理有用程度的一种技术，</p><h5 id="2-内容"><a href="#2-内容" class="headerlink" title="2. 内容"></a>2. 内容</h5><p>检查对风险理解程度以及风险数据的准确性、质量、可靠性和完整性</p><h4 id="7）风险紧迫性评估"><a href="#7）风险紧迫性评估" class="headerlink" title="7）风险紧迫性评估"></a>7）风险紧迫性评估</h4><h5 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1. 定义"></a>1. 定义</h5><p>识别急需解决的风险（需要近期采取应对措施的风险）</p><h5 id="2-指标"><a href="#2-指标" class="headerlink" title="2. 指标"></a>2. 指标</h5><ul><li>风险应对措施所需的时间</li><li>风险征兆</li><li>警告</li><li>风险等级</li></ul><h3 id="4、风险的定量分析"><a href="#4、风险的定量分析" class="headerlink" title="4、风险的定量分析"></a>4、风险的定量分析</h3><h4 id="1）概念-2"><a href="#1）概念-2" class="headerlink" title="1）概念"></a>1）概念</h4><ul><li>就识别的风险对项目总体目标的影响进行量化</li><li>将定性分析出风险较高且有数字的风险进行定量分析</li></ul><h4 id="2）输入-2"><a href="#2）输入-2" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-风险、成本、进度管理计划"><a href="#1-风险、成本、进度管理计划" class="headerlink" title="1. 风险、成本、进度管理计划"></a>1. 风险、成本、进度管理计划</h5><h5 id="2-风险登记册"><a href="#2-风险登记册" class="headerlink" title="2. 风险登记册"></a>2. 风险登记册</h5><h5 id="3-事业环境因素"><a href="#3-事业环境因素" class="headerlink" title="3. 事业环境因素"></a>3. 事业环境因素</h5><h5 id="4-组织过程资产-1"><a href="#4-组织过程资产-1" class="headerlink" title="4. 组织过程资产"></a>4. 组织过程资产</h5><h4 id="3）工具与技术-2"><a href="#3）工具与技术-2" class="headerlink" title="3）工具与技术"></a>3）工具与技术</h4><h5 id="1-数据收集和展示技术"><a href="#1-数据收集和展示技术" class="headerlink" title="1. 数据收集和展示技术"></a>1. 数据收集和展示技术</h5><h5 id="2-风险定量分析和建模技术"><a href="#2-风险定量分析和建模技术" class="headerlink" title="2. 风险定量分析和建模技术"></a>2. 风险定量分析和建模技术</h5><h5 id="3-专家判断"><a href="#3-专家判断" class="headerlink" title="3. 专家判断"></a>3. 专家判断</h5><h4 id="4）输出-2"><a href="#4）输出-2" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-项目文件更新-1"><a href="#1-项目文件更新-1" class="headerlink" title="1. 项目文件更新"></a>1. 项目文件更新</h5><ul><li>风险登记册（将风险按照数值大小进行排序）</li></ul><h4 id="5）数据收集和展示技术"><a href="#5）数据收集和展示技术" class="headerlink" title="5）数据收集和展示技术"></a>5）数据收集和展示技术</h4><h5 id="1-访谈"><a href="#1-访谈" class="headerlink" title="1. 访谈"></a>1. 访谈</h5><p>通过谈话确认有多少人认为该风险为高，有多少人认为该分析为低</p><h5 id="2-概率分布"><a href="#2-概率分布" class="headerlink" title="2. 概率分布"></a>2. 概率分布</h5><p>三点估算法</p><h4 id="6）风险定量分析和建模技术"><a href="#6）风险定量分析和建模技术" class="headerlink" title="6）风险定量分析和建模技术"></a>6）风险定量分析和建模技术</h4><h5 id="1-预期货币价值分析（EMV）"><a href="#1-预期货币价值分析（EMV）" class="headerlink" title="1. 预期货币价值分析（EMV）"></a>1. 预期货币价值分析（EMV）</h5><ul><li>是一个统计概念，是对不确定性的分析</li><li>用于计算在将来某种情况发生或不发生的情况下的平均结果</li></ul><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210906225858597.png" alt="image-20210906225858597"></p><blockquote><p>🚩 百分比 * 收益 + 百分比 * 损失，然后选择收益做高或者损失最低的方案 </p></blockquote><h5 id="2-敏感性分析"><a href="#2-敏感性分析" class="headerlink" title="2. 敏感性分析"></a>2. 敏感性分析</h5><ul><li>确定哪些风险对项目具有最大的潜在影响， </li></ul><h5 id="3-模拟和建模-——-蒙特卡洛技术"><a href="#3-模拟和建模-——-蒙特卡洛技术" class="headerlink" title="3. 模拟和建模 —— 蒙特卡洛技术"></a>3. 模拟和建模 —— 蒙特卡洛技术</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210906225630661.png" alt="image-20210906225630661"></p><h3 id="4、规划风险应对"><a href="#4、规划风险应对" class="headerlink" title="4、规划风险应对"></a>4、规划风险应对</h3><h4 id="1）概念-3"><a href="#1）概念-3" class="headerlink" title="1）概念"></a>1）概念</h4><p>针对项目目标制订提高机会、降低威胁的方案和行动</p><h4 id="2）输入-3"><a href="#2）输入-3" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-风险管理计划-1"><a href="#1-风险管理计划-1" class="headerlink" title="1. 风险管理计划"></a>1. 风险管理计划</h5><h5 id="2-风险等级册"><a href="#2-风险等级册" class="headerlink" title="2. 风险等级册"></a>2. 风险等级册</h5><h4 id="3）工具与技术-3"><a href="#3）工具与技术-3" class="headerlink" title="3）工具与技术"></a>3）工具与技术</h4><h5 id="1-消极风险或威胁应对策略"><a href="#1-消极风险或威胁应对策略" class="headerlink" title="1. 消极风险或威胁应对策略"></a>1. 消极风险或威胁应对策略</h5><h5 id="2-积极风险或机会应对策略"><a href="#2-积极风险或机会应对策略" class="headerlink" title="2. 积极风险或机会应对策略"></a>2. 积极风险或机会应对策略</h5><h5 id="3-应急应对策略"><a href="#3-应急应对策略" class="headerlink" title="3. 应急应对策略"></a>3. 应急应对策略</h5><h5 id="4-专家判断"><a href="#4-专家判断" class="headerlink" title="4. 专家判断"></a>4. 专家判断</h5><h4 id="4）输出-3"><a href="#4）输出-3" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-项目管理计划更新"><a href="#1-项目管理计划更新" class="headerlink" title="1. 项目管理计划更新"></a>1. 项目管理计划更新</h5><h5 id="2-项目文件更新"><a href="#2-项目文件更新" class="headerlink" title="2. 项目文件更新"></a>2. 项目文件更新</h5><h4 id="5）消极风险或威胁的应对策略（-）"><a href="#5）消极风险或威胁的应对策略（-）" class="headerlink" title="5）消极风险或威胁的应对策略（***）"></a>5）消极风险或威胁的应对策略（***）</h4><h5 id="1-回避"><a href="#1-回避" class="headerlink" title="1. 回避"></a>1. 回避</h5><ul><li>改计划、保目标、放松要求</li><li>例如：<strong>延长进度、减少范围</strong>（去掉WBS中有风险额工作包或由第三方来消除）</li></ul><h5 id="2-转移"><a href="#2-转移" class="headerlink" title="2. 转移"></a>2. 转移</h5><ul><li>转给第三方</li><li>例如：<strong>保险、保证书、成本加酬金、固定总价合同</strong></li></ul><h5 id="3-减轻"><a href="#3-减轻" class="headerlink" title="3. 减轻"></a>3. 减轻</h5><ul><li>降低到临界值</li><li>例如：<strong>冗余、测试</strong>（雇佣有经验的雇员，更多的测试）</li></ul><h5 id="4-接受"><a href="#4-接受" class="headerlink" title="4. 接受"></a>4. 接受</h5><ul><li><strong>被动接受，不采取行动</strong></li></ul><h4 id="6）积极风险或威胁的应对策略（-）"><a href="#6）积极风险或威胁的应对策略（-）" class="headerlink" title="6）积极风险或威胁的应对策略（***）"></a>6）积极风险或威胁的应对策略（***）</h4><h5 id="1-开拓"><a href="#1-开拓" class="headerlink" title="1. 开拓"></a>1. 开拓</h5><ul><li>确保机会实现</li><li>例如: <strong>为项目分配更多资源</strong>（分配组织中最好的资源）</li></ul><h5 id="2-分享"><a href="#2-分享" class="headerlink" title="2. 分享"></a>2. 分享</h5><ul><li>分享给最优能力的第三方</li><li>例如：<strong>合作、合资</strong>（成立联合体进行投标或组建合资公司）</li></ul><h5 id="3-提高"><a href="#3-提高" class="headerlink" title="3. 提高"></a>3. 提高</h5><ul><li><strong>提高几率，触发概率</strong>（为尽早完成活动而增加资源）</li></ul><h5 id="4-接受-1"><a href="#4-接受-1" class="headerlink" title="4. 接受"></a>4. 接受</h5><ul><li><strong>主动接受， 应急储备</strong>（安排资源）</li></ul><h3 id="5、控制风险"><a href="#5、控制风险" class="headerlink" title="5、控制风险"></a>5、控制风险</h3><h4 id="1）概念-4"><a href="#1）概念-4" class="headerlink" title="1）概念"></a>1）概念</h4><p>在整个项目周期内，跟踪已识别的风险、监测残余风险、识别新风险和实施风险应对计划，并对其有效性进行评估</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210907125633066.png" alt="image-20210907125633066"></p><h4 id="2）输入-4"><a href="#2）输入-4" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-风险管理计划-2"><a href="#1-风险管理计划-2" class="headerlink" title="1. 风险管理计划"></a>1. 风险管理计划</h5><h5 id="2-风险登记册-1"><a href="#2-风险登记册-1" class="headerlink" title="2. 风险登记册"></a>2. 风险登记册</h5><h5 id="3-工作绩效数据"><a href="#3-工作绩效数据" class="headerlink" title="3. 工作绩效数据"></a>3. 工作绩效数据</h5><h5 id="4-工作绩效报告"><a href="#4-工作绩效报告" class="headerlink" title="4. 工作绩效报告"></a>4. 工作绩效报告</h5><h4 id="3）工具与技术-4"><a href="#3）工具与技术-4" class="headerlink" title="3）工具与技术"></a>3）工具与技术</h4><h5 id="1-风险再评估"><a href="#1-风险再评估" class="headerlink" title="1. 风险再评估"></a>1. 风险再评估</h5><h5 id="2-风险审计"><a href="#2-风险审计" class="headerlink" title="2. 风险审计"></a>2. 风险审计</h5><h5 id="3-偏差和趋势分析"><a href="#3-偏差和趋势分析" class="headerlink" title="3. 偏差和趋势分析"></a>3. 偏差和趋势分析</h5><h5 id="4-技术绩效测量"><a href="#4-技术绩效测量" class="headerlink" title="4. 技术绩效测量"></a>4. 技术绩效测量</h5><h5 id="5-储备分析"><a href="#5-储备分析" class="headerlink" title="5. 储备分析"></a>5. 储备分析</h5><h5 id="6-会议"><a href="#6-会议" class="headerlink" title="6. 会议"></a>6. 会议</h5><h4 id="4）输出-4"><a href="#4）输出-4" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-项目管理计划更新-1"><a href="#1-项目管理计划更新-1" class="headerlink" title="1. 项目管理计划更新"></a>1. 项目管理计划更新</h5><h5 id="2-项目文件更新-1"><a href="#2-项目文件更新-1" class="headerlink" title="2. 项目文件更新"></a>2. 项目文件更新</h5><h4 id="5）风险审计"><a href="#5）风险审计" class="headerlink" title="5）风险审计"></a>5）风险审计</h4><h5 id="1-内容"><a href="#1-内容" class="headerlink" title="1. 内容"></a>1. 内容</h5><ul><li><p>监控过程组</p></li><li><p>审计风险管理过程是否有效</p></li><li><p>审计风险应对措施是否有效</p></li></ul><h5 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h5><ul><li>为之后的项目起到借鉴作用（经验教训）</li></ul><h2 id="二、采购管理"><a href="#二、采购管理" class="headerlink" title="二、采购管理"></a>二、采购管理</h2><h3 id="1、规划采购（编制采购计划）"><a href="#1、规划采购（编制采购计划）" class="headerlink" title="1、规划采购（编制采购计划）"></a>1、规划采购（编制采购计划）</h3><h4 id="1）基础知识"><a href="#1）基础知识" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><h5 id="1-规划什么？"><a href="#1-规划什么？" class="headerlink" title="1. 规划什么？"></a>1. 规划什么？</h5><ul><li>是否需要采购</li><li>采购什么</li><li>何时采购</li></ul><h5 id="2-工作内容"><a href="#2-工作内容" class="headerlink" title="2. 工作内容"></a>2. 工作内容</h5><ul><li>规划采购</li><li>进行自制或外购分析</li><li>编制采购文件</li><li>编制供方选择标准</li></ul><h4 id="2）输入-5"><a href="#2）输入-5" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-1"><a href="#1-项目管理计划-1" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-需求文档"><a href="#2-需求文档" class="headerlink" title="2. 需求文档"></a>2. 需求文档</h5><h5 id="3-风险登记册-1"><a href="#3-风险登记册-1" class="headerlink" title="3. 风险登记册"></a>3. 风险登记册</h5><h5 id="4-活动资源要求"><a href="#4-活动资源要求" class="headerlink" title="4. 活动资源要求"></a>4. 活动资源要求</h5><h5 id="5-项目进度"><a href="#5-项目进度" class="headerlink" title="5. 项目进度"></a>5. 项目进度</h5><h5 id="6-活动成本估算"><a href="#6-活动成本估算" class="headerlink" title="6. 活动成本估算"></a>6. 活动成本估算</h5><h5 id="7-干系人登记册"><a href="#7-干系人登记册" class="headerlink" title="7. 干系人登记册"></a>7. 干系人登记册</h5><h5 id="8-事业环境因素"><a href="#8-事业环境因素" class="headerlink" title="8. 事业环境因素"></a>8. 事业环境因素</h5><h5 id="9-组织过程资产"><a href="#9-组织过程资产" class="headerlink" title="9. 组织过程资产"></a>9. 组织过程资产</h5><h4 id="3）工具和技术"><a href="#3）工具和技术" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-自制-外购分析"><a href="#1-自制-外购分析" class="headerlink" title="1. 自制/外购分析"></a>1. 自制/外购分析</h5><h5 id="2-专家判断-1"><a href="#2-专家判断-1" class="headerlink" title="2. 专家判断"></a>2. 专家判断</h5><h5 id="3-市场调研"><a href="#3-市场调研" class="headerlink" title="3. 市场调研"></a>3. 市场调研</h5><h5 id="4-会议"><a href="#4-会议" class="headerlink" title="4. 会议"></a>4. 会议</h5><h5 id="5-合同类型"><a href="#5-合同类型" class="headerlink" title="5. 合同类型"></a>5. 合同类型</h5><h4 id="4）输出-5"><a href="#4）输出-5" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-采购计划"><a href="#1-采购计划" class="headerlink" title="1. 采购计划"></a>1. 采购计划</h5><ul><li>采购计划描述<strong>从形成采购文件到合同收尾</strong>的采购过程</li><li>具体的采购活动将依据采购计划进行</li></ul><h5 id="2-采购工作说明书"><a href="#2-采购工作说明书" class="headerlink" title="2. 采购工作说明书"></a>2. 采购工作说明书</h5><ul><li>采购工作说明书定义了与采购合同相关的项目范围</li><li><strong>每个采购工作说明书都来自于项目的范围基准</strong></li></ul><h5 id="3-采购文件"><a href="#3-采购文件" class="headerlink" title="3. 采购文件"></a>3. 采购文件</h5><h6 id="概念：-3"><a href="#概念：-3" class="headerlink" title="概念："></a>概念：</h6><ul><li>采购文件是用来得到潜在卖方的报价建议书</li><li>当购买商业产品或标准产品时，通常会使用标书、投标或报价等术语</li></ul><h6 id="常见的采购文件："><a href="#常见的采购文件：" class="headerlink" title="常见的采购文件："></a>常见的采购文件：</h6><ul><li>方案邀请书RFP（需求明确）</li><li>报价申请书RFQ（招标）</li><li>征求供应商意见书RFI（需求不明确）</li><li>投标邀请书IFB</li><li>招标通知书</li><li>洽谈邀请</li><li>承包商初始建议征求书</li></ul><h5 id="4-供方选择标准"><a href="#4-供方选择标准" class="headerlink" title="4. 供方选择标准"></a>4. 供方选择标准</h5><ul><li>用于从潜在的卖方中选中符合要求的、合格的卖方</li></ul><h5 id="5-自制-外购决策"><a href="#5-自制-外购决策" class="headerlink" title="5. 自制/外购决策"></a>5. 自制/外购决策</h5><ul><li>任何预算限制都可能影响“自制/外购”的决策</li><li>“自制/外购”分析应考虑所有相关的成本（直接成本/间接成本，如升级费用、折旧费用）</li><li><strong>如果决策结果为外购，还要进一步决定时购买还是租借</strong></li></ul><h5 id="6-变更申请"><a href="#6-变更申请" class="headerlink" title="6. 变更申请"></a>6. 变更申请</h5><h5 id="7-可能的项目文件更新"><a href="#7-可能的项目文件更新" class="headerlink" title="7. 可能的项目文件更新"></a>7. 可能的项目文件更新</h5><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="4）采购工作说明书（SOW）（-）"><a href="#4）采购工作说明书（SOW）（-）" class="headerlink" title="4）采购工作说明书（SOW）（***）"></a>4）采购工作说明书（SOW）（***）</h4><h5 id="1-内容-1"><a href="#1-内容-1" class="headerlink" title="1. 内容"></a>1. 内容</h5><ul><li>前言</li><li>服务范围</li><li>方法</li><li>假定</li><li>服务期限</li><li>工作量估计</li><li>双方角色和责任</li><li>交付资料</li><li>完成标准</li><li>顾问组人员</li><li><strong>收费和付款方式</strong></li><li>变更管理</li></ul><h5 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2. 注意事项"></a>2. 注意事项</h5><ul><li><strong>每次进行采购，都需要编制 SOW</strong>（由项目经理）</li><li>可以将多个产品或服务的的采购组合成一个采购包，由一个SOW全部覆盖</li></ul><h5 id="3-与项目范围说明书的区别（-）"><a href="#3-与项目范围说明书的区别（-）" class="headerlink" title="3. 与项目范围说明书的区别（***）"></a>3. 与项目范围说明书的区别（***）</h5><ul><li>采购工作说明书时对项目所有要提供的产品或服务的叙述性描述</li><li>项目范围说明书是通过明确项目应该完成的工作而确定项目的范围</li></ul><h5 id="4-采购工作说明书样本"><a href="#4-采购工作说明书样本" class="headerlink" title="4. 采购工作说明书样本"></a>4. 采购工作说明书样本</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210910124740756.png" alt="image-20210910124740756"></p><h3 id="2、实施采购"><a href="#2、实施采购" class="headerlink" title="2、实施采购"></a>2、实施采购</h3><h4 id="1）实施采购的工作内容"><a href="#1）实施采购的工作内容" class="headerlink" title="1）实施采购的工作内容"></a>1）实施采购的工作内容</h4><ul><li><p>发布采购文件</p></li><li><p>从潜在卖家获得相关信息、报价、投标或建议书</p></li><li><p>对潜在卖方提交的相关材料进行评审（评标）</p></li><li><p>从中选择一家卖方（开标）</p></li><li><p>与卖方洽谈和签订书面合同</p></li></ul><h4 id="2）输入-6"><a href="#2）输入-6" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-采购计划-1"><a href="#1-采购计划-1" class="headerlink" title="1. 采购计划"></a>1. 采购计划</h5><h5 id="2-采购文件"><a href="#2-采购文件" class="headerlink" title="2. 采购文件"></a>2. 采购文件</h5><h5 id="3-卖方建议书"><a href="#3-卖方建议书" class="headerlink" title="3. 卖方建议书"></a>3. 卖方建议书</h5><h5 id="4-项目文件"><a href="#4-项目文件" class="headerlink" title="4. 项目文件"></a>4. 项目文件</h5><h5 id="5-采购工作说明"><a href="#5-采购工作说明" class="headerlink" title="5. 采购工作说明"></a>5. 采购工作说明</h5><h5 id="6-组织过程资产"><a href="#6-组织过程资产" class="headerlink" title="6. 组织过程资产"></a>6. 组织过程资产</h5><h4 id="3）工具和技术-1"><a href="#3）工具和技术-1" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-投标人会议"><a href="#1-投标人会议" class="headerlink" title="1. 投标人会议"></a>1. 投标人会议</h5><h5 id="2-建议评价技术"><a href="#2-建议评价技术" class="headerlink" title="2. 建议评价技术"></a>2. 建议评价技术</h5><h5 id="3-独立估算"><a href="#3-独立估算" class="headerlink" title="3. 独立估算"></a>3. 独立估算</h5><h5 id="4-专家判断-1"><a href="#4-专家判断-1" class="headerlink" title="4. 专家判断"></a>4. 专家判断</h5><h5 id="5-刊登广告"><a href="#5-刊登广告" class="headerlink" title="5. 刊登广告"></a>5. 刊登广告</h5><h5 id="6-分析技术"><a href="#6-分析技术" class="headerlink" title="6. 分析技术"></a>6. 分析技术</h5><h5 id="7-采购谈判"><a href="#7-采购谈判" class="headerlink" title="7. 采购谈判"></a>7. 采购谈判</h5><h4 id="4）输出-6"><a href="#4）输出-6" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-选中的卖方"><a href="#1-选中的卖方" class="headerlink" title="1. 选中的卖方"></a>1. 选中的卖方</h5><h5 id="2-合同"><a href="#2-合同" class="headerlink" title="2. 合同"></a>2. 合同</h5><h5 id="3-资源日历"><a href="#3-资源日历" class="headerlink" title="3. 资源日历"></a>3. 资源日历</h5><h5 id="4-变更请求"><a href="#4-变更请求" class="headerlink" title="4. 变更请求"></a>4. 变更请求</h5><h5 id="5-项目管理计划更新"><a href="#5-项目管理计划更新" class="headerlink" title="5. 项目管理计划更新"></a>5. 项目管理计划更新</h5><h4 id="5）询价比价-vs-不询价比价"><a href="#5）询价比价-vs-不询价比价" class="headerlink" title="5）询价比价 vs 不询价比价"></a>5）询价比价 vs 不询价比价</h4><h5 id="1-适用询价比价的采购产品"><a href="#1-适用询价比价的采购产品" class="headerlink" title="1. 适用询价比价的采购产品"></a>1. 适用询价比价的采购产品</h5><ul><li>市场化程度高的产品</li><li>非专利专有技术产品</li><li>充分竞争性产品</li><li>可替代性强的产品</li><li>供应商不唯一的产品</li></ul><h5 id="2-不适用询价比价的采购产品"><a href="#2-不适用询价比价的采购产品" class="headerlink" title="2. 不适用询价比价的采购产品"></a>2. 不适用询价比价的采购产品</h5><ul><li>指定采购、原厂或代理有相关协议的采购</li><li>单个供应商供货，合同在一定金额一下的采购</li></ul><blockquote><p>🚩 <strong>我国《招投标法》规定:</strong></p><p>工程施工400w以上，设备采购200w以上，服务100w以上，必须招投标。</p></blockquote><h4 id="6）一个完整的采购合同"><a href="#6）一个完整的采购合同" class="headerlink" title="6）一个完整的采购合同"></a>6）一个完整的采购合同</h4><h5 id="1-组成部分"><a href="#1-组成部分" class="headerlink" title="1. 组成部分"></a>1. 组成部分</h5><ul><li>开头</li><li>正文</li><li>结尾</li><li>附件</li></ul><h5 id="2-必备条款（-）"><a href="#2-必备条款（-）" class="headerlink" title="2. 必备条款（***）"></a>2. 必备条款（***）</h5><ul><li>商品名称</li><li>质量条款</li><li>数量和计量单位</li><li>商品的价格</li><li>交货的期限、地点和方式</li><li>产品的包装标准和包装物的供应商与回收</li><li>产品的验收方式</li><li>违约责任</li><li>结算方式</li></ul><h4 id="7）采购合同签订"><a href="#7）采购合同签订" class="headerlink" title="7）采购合同签订"></a>7）采购合同签订</h4><ul><li>对工程影响不大的辅材，可以将正规的购货发票视作采购合同</li><li> 除此之外都需要签订正规的采购合同（协议）</li><li>采购合同应清楚表述订购产品的有关信息和要求</li></ul><h4 id="8）采购谈判"><a href="#8）采购谈判" class="headerlink" title="8）采购谈判"></a>8）采购谈判</h4><h5 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li>采购谈判是指在合同签署前，对合同的结构、要求以及其他条款加以澄清，以取得一致意见。</li><li>最终的合同措施应该反映双方达成的全部一致意见</li></ul><h5 id="2-谈判内容（-）"><a href="#2-谈判内容（-）" class="headerlink" title="2. 谈判内容（***）"></a>2. 谈判内容（***）</h5><ul><li>责任</li><li>进行变更的权限</li><li>使用的条款和法律</li><li>技术和商务要求</li><li>所有权</li><li>合同融资</li><li>技术解决方案</li><li>总体进度计划</li><li>付款以及价格</li></ul><h3 id="3、控制采购"><a href="#3、控制采购" class="headerlink" title="3、控制采购"></a>3、控制采购</h3><h4 id="1）控制采购的工作内容"><a href="#1）控制采购的工作内容" class="headerlink" title="1）控制采购的工作内容"></a>1）控制采购的工作内容</h4><ul><li>管理采购关系</li><li>监督合同绩效</li><li>实施变更和纠偏</li><li>关闭合同</li></ul><h4 id="2）输入-7"><a href="#2）输入-7" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-2"><a href="#1-项目管理计划-2" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-采购文件-1"><a href="#2-采购文件-1" class="headerlink" title="2. 采购文件"></a>2. 采购文件</h5><h5 id="3-合同"><a href="#3-合同" class="headerlink" title="3. 合同"></a>3. 合同</h5><h5 id="4-批准的变更请求"><a href="#4-批准的变更请求" class="headerlink" title="4. 批准的变更请求"></a>4. 批准的变更请求</h5><h5 id="5-工作绩效报告"><a href="#5-工作绩效报告" class="headerlink" title="5. 工作绩效报告"></a>5. 工作绩效报告</h5><h5 id="6-工作绩效数据"><a href="#6-工作绩效数据" class="headerlink" title="6. 工作绩效数据"></a>6. 工作绩效数据</h5><h4 id="3）工具和技术-2"><a href="#3）工具和技术-2" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-合同变更控制系统"><a href="#1-合同变更控制系统" class="headerlink" title="1. 合同变更控制系统"></a>1. 合同变更控制系统</h5><h5 id="2-检查与审计"><a href="#2-检查与审计" class="headerlink" title="2. 检查与审计"></a>2. 检查与审计</h5><h5 id="3-采购绩效审查"><a href="#3-采购绩效审查" class="headerlink" title="3. 采购绩效审查"></a>3. 采购绩效审查</h5><h5 id="4-报告绩效"><a href="#4-报告绩效" class="headerlink" title="4. 报告绩效"></a>4. 报告绩效</h5><h5 id="5-支付系统"><a href="#5-支付系统" class="headerlink" title="5. 支付系统"></a>5. 支付系统</h5><h5 id="6-索赔管理"><a href="#6-索赔管理" class="headerlink" title="6. 索赔管理"></a>6. 索赔管理</h5><h5 id="7-记录管理系统"><a href="#7-记录管理系统" class="headerlink" title="7. 记录管理系统"></a>7. 记录管理系统</h5><h4 id="4）输出-7"><a href="#4）输出-7" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-工作绩效信息"><a href="#1-工作绩效信息" class="headerlink" title="1. 工作绩效信息"></a>1. 工作绩效信息</h5><h5 id="2-变更请求"><a href="#2-变更请求" class="headerlink" title="2. 变更请求"></a>2. 变更请求</h5><h5 id="3-项目管理计划更新"><a href="#3-项目管理计划更新" class="headerlink" title="3. 项目管理计划更新"></a>3. 项目管理计划更新</h5><h5 id="4-项目文件更新"><a href="#4-项目文件更新" class="headerlink" title="4. 项目文件更新"></a>4. 项目文件更新</h5><h5 id="5-组织过程资产更新"><a href="#5-组织过程资产更新" class="headerlink" title="5. 组织过程资产更新"></a>5. 组织过程资产更新</h5><h3 id="4、结束采购"><a href="#4、结束采购" class="headerlink" title="4、结束采购"></a>4、结束采购</h3><h4 id="1）输入"><a href="#1）输入" class="headerlink" title="1）输入"></a>1）输入</h4><h5 id="1-合同"><a href="#1-合同" class="headerlink" title="1. 合同"></a>1. 合同</h5><h5 id="2-合同收尾程序"><a href="#2-合同收尾程序" class="headerlink" title="2. 合同收尾程序"></a>2. 合同收尾程序</h5><h5 id="3-项目管理计划"><a href="#3-项目管理计划" class="headerlink" title="3. 项目管理计划"></a>3. 项目管理计划</h5><h5 id="4-采购文件"><a href="#4-采购文件" class="headerlink" title="4. 采购文件"></a>4. 采购文件</h5><h4 id="2）技术和工具"><a href="#2）技术和工具" class="headerlink" title="2）技术和工具"></a>2）技术和工具</h4><h5 id="1-采购审计"><a href="#1-采购审计" class="headerlink" title="1. 采购审计"></a>1. 采购审计</h5><h5 id="2-采购谈判"><a href="#2-采购谈判" class="headerlink" title="2. 采购谈判"></a>2. 采购谈判</h5><h5 id="3-记录管理系统"><a href="#3-记录管理系统" class="headerlink" title="3. 记录管理系统"></a>3. 记录管理系统</h5><h4 id="3）输出"><a href="#3）输出" class="headerlink" title="3）输出"></a>3）输出</h4><h5 id="1-合同收尾"><a href="#1-合同收尾" class="headerlink" title="1. 合同收尾"></a>1. 合同收尾</h5><h5 id="2-组织过程资产更新"><a href="#2-组织过程资产更新" class="headerlink" title="2. 组织过程资产更新"></a>2. 组织过程资产更新</h5><h4 id="4）合同收尾-vs-行政收尾"><a href="#4）合同收尾-vs-行政收尾" class="headerlink" title="4）合同收尾 vs 行政收尾"></a>4）合同收尾 vs 行政收尾</h4><table><thead><tr><th></th><th>合同收尾</th><th>行政收尾（管理收尾）</th></tr></thead><tbody><tr><td>生命周期</td><td>一个合同只有一次，就是合同签署的时候</td><td>整个项目周期的各个阶段</td></tr><tr><td>意义</td><td>合同收尾表明甲乙双方不再有合同关系</td><td>行政收尾常用于后续流程以及经验总结（所以合同收尾在前行政收尾在后）</td></tr><tr><td>负责人</td><td>管理员（项目经理）</td><td>项目发起人或高层</td></tr></tbody></table><h4 id="5）采购审计"><a href="#5）采购审计" class="headerlink" title="5）采购审计"></a>5）采购审计</h4><h5 id="1-原则"><a href="#1-原则" class="headerlink" title="1. 原则"></a>1. 原则</h5><ul><li>从采购计划编制到合同管理的整个采购过程进行系统的审查</li></ul><h5 id="2-目的"><a href="#2-目的" class="headerlink" title="2. 目的"></a>2. 目的</h5><ul><li><strong>找出可供本项目其他采购合同组织内其他项目借鉴的成功或失败的经验</strong></li></ul><h4 id="6）合同结束-vs-索赔管理"><a href="#6）合同结束-vs-索赔管理" class="headerlink" title="6）合同结束 vs 索赔管理"></a>6）合同结束 vs 索赔管理</h4><h5 id="1-合同结束的几种方式"><a href="#1-合同结束的几种方式" class="headerlink" title="1. 合同结束的几种方式"></a>1. 合同结束的几种方式</h5><h6 id="成功完成："><a href="#成功完成：" class="headerlink" title="成功完成："></a>成功完成：</h6><ul><li>一手交钱，一手交货，皆大欢喜，下次再来</li></ul><h6 id="双方协商终止合同："><a href="#双方协商终止合同：" class="headerlink" title="双方协商终止合同："></a>双方协商终止合同：</h6><ul><li>好聚好散，后会有期</li></ul><h6 id="重大违约：（-）"><a href="#重大违约：（-）" class="headerlink" title="重大违约：（***）"></a>重大违约：（***）</h6><ul><li><strong>可能出现罚款争议，仲裁甚至诉讼</strong></li></ul><h5 id="2-索赔管理"><a href="#2-索赔管理" class="headerlink" title="2. 索赔管理"></a>2. 索赔管理</h5><h6 id="传统争议的解决方法："><a href="#传统争议的解决方法：" class="headerlink" title="传统争议的解决方法："></a>传统争议的解决方法：</h6><ul><li>谈判、诉讼</li><li><strong>谈判是解决所有索赔和争议的首选方法</strong></li></ul><h6 id="替代争议的解决方法（ADR）："><a href="#替代争议的解决方法（ADR）：" class="headerlink" title="替代争议的解决方法（ADR）："></a>替代争议的解决方法（ADR）：</h6><ul><li>调解、仲裁</li></ul><h6 id="处理过程："><a href="#处理过程：" class="headerlink" title="处理过程："></a>处理过程：</h6><ul><li>通常会按照合同条款对索赔进行记录、处理、监督和管理</li><li>如果合同双方无法自行解决索赔问题，则按合同中规定的 ADR 去处理</li></ul><h3 id="5、招投标相关知识"><a href="#5、招投标相关知识" class="headerlink" title="5、招投标相关知识"></a>5、招投标相关知识</h3><h4 id="1）招投标的参与者"><a href="#1）招投标的参与者" class="headerlink" title="1）招投标的参与者"></a>1）招投标的参与者</h4><ul><li><p>招标人、招标代理机构、投标人构成招投标的参与者</p></li><li><p>招标人有权自行选择招标代理机构，委托其办理招标事宜</p></li><li><p><strong>招标人具有编制招标文件和组织评标的能力，则可以自行办理招标事宜</strong></p></li><li><p>在招标文件要求<strong>提交投标文件截止时间至少15天前</strong>，招标人可以以书面的形式对已发出的招标文件进行必要的澄清和修改</p></li><li><p>招标人不得以不合理的条件限制或排斥潜在的投标人，不得有歧视待遇，一切需遵循公平公正原则</p></li><li><p><strong>依法必须进行招投标的项目，自招标文件发出之日起到提交投标文件截止日为止，期间最短不得少于20天</strong></p></li></ul><h4 id="2）招投标程序（-）"><a href="#2）招投标程序（-）" class="headerlink" title="2）招投标程序（***）"></a>2）招投标程序（***）</h4><h5 id="1-招投标顺序"><a href="#1-招投标顺序" class="headerlink" title="1. 招投标顺序"></a>1. 招投标顺序</h5><ul><li>公开招标，应当发布招标公告</li><li>邀请招标，应当向三个以上具备承担招标项目能力、资信良好的特定法人或组织发出投标邀请书</li><li>招标人根据招标项目的具体情况，可以组织潜在投标人勘探项目现场</li><li>投标人投标</li><li>开标</li><li>评标</li><li>确定中标人</li><li>订立合同</li></ul><h5 id="2-图解"><a href="#2-图解" class="headerlink" title="2. 图解"></a>2. 图解</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210911182949480.png" alt="image-20210911182949480"></p><h5 id="3-工程施工招标程序"><a href="#3-工程施工招标程序" class="headerlink" title="3. 工程施工招标程序"></a>3. 工程施工招标程序</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210911192432587.png" alt="image-20210911192432587"></p><h4 id="2）招投"><a href="#2）招投" class="headerlink" title="2）招投"></a>2）招投</h4><h5 id="1-公开招标"><a href="#1-公开招标" class="headerlink" title="1. 公开招标"></a>1. 公开招标</h5><ul><li>指招标人以<strong>招标公告</strong>的方式邀请不特定的法人或其他组织投标</li></ul><h5 id="2-邀请招标"><a href="#2-邀请招标" class="headerlink" title="2. 邀请招标"></a>2. 邀请招标</h5><ul><li>指招标人以<strong>投标邀请书</strong>的方式邀请特定的法人或其他组织投标</li></ul><h4 id="3）投标"><a href="#3）投标" class="headerlink" title="3）投标"></a>3）投标</h4><h5 id="1-投标人"><a href="#1-投标人" class="headerlink" title="1. 投标人"></a>1. 投标人</h5><ul><li><strong>两个以上法人或其他组织可以组成一个联合体</strong>，以一个投标人的身份共同投标</li></ul><h5 id="2-投标文件的修改"><a href="#2-投标文件的修改" class="headerlink" title="2. 投标文件的修改"></a>2. 投标文件的修改</h5><ul><li>投标人在投标文件要求提交投标文件的截止时间前，可以补充、修改或撤回已提交的投标文件，并书面通知招标人</li></ul><h5 id="3-投标违规的情况"><a href="#3-投标违规的情况" class="headerlink" title="3. 投标违规的情况"></a>3. 投标违规的情况</h5><ul><li>投标人以他人名义投标或以其他方式弄虚作假，骗取中标的，则视作中标无效，给招标人造成的损失，依法承担赔偿责任，如构成犯罪，则依法追究刑事责任</li></ul><h4 id="4）开标"><a href="#4）开标" class="headerlink" title="4）开标"></a>4）开标</h4><h5 id="1-开标时间"><a href="#1-开标时间" class="headerlink" title="1. 开标时间"></a>1. 开标时间</h5><ul><li>开标应当在招标文件确定的提交投标文件确定的提交投标文件截止时间的同一时间公开进行</li></ul><h5 id="2-开标地点"><a href="#2-开标地点" class="headerlink" title="2. 开标地点"></a>2. 开标地点</h5><ul><li>开标地点应当为招标文件中预先确定的地点</li></ul><h5 id="3-主持人"><a href="#3-主持人" class="headerlink" title="3. 主持人"></a>3. 主持人</h5><ul><li>开标有招标人主持，邀请所有投标人参加</li></ul><h5 id="4-检查公证"><a href="#4-检查公证" class="headerlink" title="4. 检查公证"></a>4. 检查公证</h5><ul><li>开标时，由投标人或其推选的代表检查投标文件的密封情况；也可以由招标人委托的公证机构检查公证</li></ul><h4 id="5）评标"><a href="#5）评标" class="headerlink" title="5）评标"></a>5）评标</h4><h5 id="1-负责方"><a href="#1-负责方" class="headerlink" title="1. 负责方"></a>1. 负责方</h5><ul><li>评标由招标人依法组建的评标委员会负责</li></ul><h5 id="2-评标委员会"><a href="#2-评标委员会" class="headerlink" title="2. 评标委员会"></a>2. 评标委员会</h5><ul><li>评标委员会由招标人代表和有关技术、经济等方面的专家组成</li></ul><h5 id="3-评标委员会的权能"><a href="#3-评标委员会的权能" class="headerlink" title="3. 评标委员会的权能"></a>3. 评标委员会的权能</h5><ul><li>评标委员会可以要求投标人对投标文件中含义不明确的内容做出必要的澄清说明，但不得超出投标文件的范围或改变投标文件的实质性内容</li><li>招标人可以授权评标委员会直接确定中标人</li></ul><h4 id="6）中标"><a href="#6）中标" class="headerlink" title="6）中标"></a>6）中标</h4><h5 id="1-中标必要条件"><a href="#1-中标必要条件" class="headerlink" title="1. 中标必要条件"></a>1. 中标必要条件</h5><ul><li>能够最大限度地满足招标文件中规定的各项综合评标标准</li><li>能够满足招标文件的实质性要求，且经评审的投标价格最低（投标价格低于成本除外）</li></ul><h5 id="2-合同签订"><a href="#2-合同签订" class="headerlink" title="2. 合同签订"></a>2. 合同签订</h5><ul><li>招标人和中标人应当自<strong>中标通知书发出日起30天内</strong>，按招标文件和中标人的投标文件<strong>订立书面合同</strong></li></ul><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><h3 id="1、采购管理包括哪四个过程？"><a href="#1、采购管理包括哪四个过程？" class="headerlink" title="1、采购管理包括哪四个过程？"></a>1、采购管理包括哪四个过程？</h3><ul><li>规划采购</li><li>实施采购</li><li>控制采购</li><li>结束采购</li></ul><h3 id="2、政府采购法规定的6种采购方式是什么？"><a href="#2、政府采购法规定的6种采购方式是什么？" class="headerlink" title="2、政府采购法规定的6种采购方式是什么？"></a>2、政府采购法规定的6种采购方式是什么？</h3><ul><li><p><strong>公开招标</strong></p></li><li><p><strong>邀请招标</strong></p></li><li><p>竞争性谈判</p></li><li><p>单一来源采购</p></li><li><p>询价</p></li><li><p>其他方式</p></li></ul><h3 id="3、评标委员会由几人以上单数组成？其中经济技术专家不得少于多少？"><a href="#3、评标委员会由几人以上单数组成？其中经济技术专家不得少于多少？" class="headerlink" title="3、评标委员会由几人以上单数组成？其中经济技术专家不得少于多少？"></a>3、评标委员会由几人以上单数组成？其中经济技术专家不得少于多少？</h3><ul><li>评标委员会由5人及以上单数组成（避免意见持平）</li><li>其中经济技术专家不得少于总人数的三分之二</li></ul><h3 id="4、质量审计、风险审计、采购审计，分别在那个过程组？"><a href="#4、质量审计、风险审计、采购审计，分别在那个过程组？" class="headerlink" title="4、质量审计、风险审计、采购审计，分别在那个过程组？"></a>4、质量审计、风险审计、采购审计，分别在那个过程组？</h3><ul><li>质量审计在执行过程组（在执行过程中发现质量问题要及时纠偏）</li><li>风险审计在监控过程组（风险伴随项目的整个生命周期，需要实时监控）</li><li>采购审计在收尾过程组（采购完成要合同收尾、行政收尾）</li></ul><h3 id="5、积极风险、消极风险、同时适用于积极和消极风险的应对措施是什么？"><a href="#5、积极风险、消极风险、同时适用于积极和消极风险的应对措施是什么？" class="headerlink" title="5、积极风险、消极风险、同时适用于积极和消极风险的应对措施是什么？"></a>5、积极风险、消极风险、同时适用于积极和消极风险的应对措施是什么？</h3><ul><li><p>积极风险的应对措施</p><ul><li>开拓</li><li>分享</li><li>提高</li></ul></li><li><p>消极风险的应对措施</p><ul><li>回避</li><li>转移</li><li>减轻</li></ul></li><li><p>同时适的应对措施 —— 接受</p><ul><li>消极 —— 被动接受</li><li>积极 —— 主动接受</li></ul></li></ul><h3 id="6、增加冗余、增加应急储备分别属于哪种应对措施？"><a href="#6、增加冗余、增加应急储备分别属于哪种应对措施？" class="headerlink" title="6、增加冗余、增加应急储备分别属于哪种应对措施？"></a>6、增加冗余、增加应急储备分别属于哪种应对措施？</h3><ul><li>增加冗余 —— 减轻风险</li><li>增加应急储备 —— 接受风险</li></ul><h3 id="7、风险管理包括哪6个过程？"><a href="#7、风险管理包括哪6个过程？" class="headerlink" title="7、风险管理包括哪6个过程？"></a>7、风险管理包括哪6个过程？</h3><ul><li>制定风险管理计划</li><li>风险识别</li><li>风险定性分析</li><li>风险定量分析</li><li>制订风险应对计划</li><li>风险监控</li></ul><h3 id="8、风险审计要是审计哪两个有效性？"><a href="#8、风险审计要是审计哪两个有效性？" class="headerlink" title="8、风险审计要是审计哪两个有效性？"></a>8、风险审计要是审计哪两个有效性？</h3><ul><li>风险管理过程的有效性</li><li>风险应对措施的有效性</li></ul><h2 id="四、错题回顾"><a href="#四、错题回顾" class="headerlink" title="四、错题回顾"></a>四、错题回顾</h2><h4 id="1、风险管理"><a href="#1、风险管理" class="headerlink" title="1、风险管理"></a>1、风险管理</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913151501746.png" alt="image-20210913151501746"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913151717167.png" alt="image-20210913151717167"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913151736950.png" alt="image-20210913151736950"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913151750564.png" alt="image-20210913151750564"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913151836990.png" alt="image-20210913151836990"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913151855663.png" alt="image-20210913151855663"></p><h3 id="2、采购管理"><a href="#2、采购管理" class="headerlink" title="2、采购管理"></a>2、采购管理</h3>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章、项目的质量管理和人力管理</title>
    <link href="/2021/08/31/%E7%AC%AC5%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E5%92%8C%E4%BA%BA%E5%8A%9B%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC5%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E5%92%8C%E4%BA%BA%E5%8A%9B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章、项目的质量管理和人力管理"><a href="#第5章、项目的质量管理和人力管理" class="headerlink" title="第5章、项目的质量管理和人力管理"></a>第5章、项目的质量管理和人力管理</h1><span id="more"></span><h2 id="一、质量管理"><a href="#一、质量管理" class="headerlink" title="一、质量管理"></a>一、质量管理</h2><h3 id="1、质量管理概述"><a href="#1、质量管理概述" class="headerlink" title="1、质量管理概述"></a>1、质量管理概述</h3><h4 id="1）基础知识"><a href="#1）基础知识" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><h5 id="1-质量"><a href="#1-质量" class="headerlink" title="1. 质量"></a>1. 质量</h5><ul><li>反映实体满足主体明确和隐含需求的能力的特性的总和</li></ul><h5 id="2-质量管理"><a href="#2-质量管理" class="headerlink" title="2. 质量管理"></a>2. 质量管理</h5><ul><li>确定质量方针、目标和职责，并通过质量体系中的质量规划、质量保证、质量控制以及质量改进来使其实现所有管理职能的全部活动</li></ul><h5 id="3-质量方针"><a href="#3-质量方针" class="headerlink" title="3. 质量方针"></a>3. 质量方针</h5><ul><li>由组织的最高管理者正式发布的该组织总的质量宗旨和方向</li></ul><h5 id="4-质量目标"><a href="#4-质量目标" class="headerlink" title="4. 质量目标"></a>4. 质量目标</h5><ul><li>在质量方面所追求的目的</li><li><strong>是落实质量方针的具体需求</strong></li></ul><h4 id="2）质量管理体系"><a href="#2）质量管理体系" class="headerlink" title="2）质量管理体系"></a>2）质量管理体系</h4><h5 id="1-ISO9000系列，8-项基本原则"><a href="#1-ISO9000系列，8-项基本原则" class="headerlink" title="1. ISO9000系列，8 项基本原则"></a>1. ISO9000系列，8 项基本原则</h5><ul><li>以顾客为中心</li><li>领导作用</li><li>全员参与</li><li>过程方法</li><li>管理的系统方法</li><li>持续改进</li><li>基于事实的决策方法</li><li>与供方互利的关系</li></ul><h4 id="3）全面质量管理"><a href="#3）全面质量管理" class="headerlink" title="3）全面质量管理"></a>3）全面质量管理</h4><h4 id="4）六西格玛"><a href="#4）六西格玛" class="headerlink" title="4）六西格玛"></a>4）六西格玛</h4><h3 id="2、规划质量管理"><a href="#2、规划质量管理" class="headerlink" title="2、规划质量管理"></a>2、规划质量管理</h3><h4 id="1）输入"><a href="#1）输入" class="headerlink" title="1）输入"></a>1）输入</h4><h5 id="1-项目管理计划"><a href="#1-项目管理计划" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-干系人登记册"><a href="#2-干系人登记册" class="headerlink" title="2. 干系人登记册"></a>2. 干系人登记册</h5><h5 id="3-风险登记册"><a href="#3-风险登记册" class="headerlink" title="3. 风险登记册"></a>3. 风险登记册</h5><h5 id="4-需求文件"><a href="#4-需求文件" class="headerlink" title="4. 需求文件"></a>4. 需求文件</h5><h5 id="5-事业环境因素"><a href="#5-事业环境因素" class="headerlink" title="5. 事业环境因素"></a>5. 事业环境因素</h5><h5 id="6-组织过程资产"><a href="#6-组织过程资产" class="headerlink" title="6. 组织过程资产"></a>6. 组织过程资产</h5><h4 id="2）工具和技术"><a href="#2）工具和技术" class="headerlink" title="2）工具和技术"></a>2）工具和技术</h4><h5 id="1-成本效益分析"><a href="#1-成本效益分析" class="headerlink" title="1. 成本效益分析"></a>1. 成本效益分析</h5><h5 id="2-质量成本"><a href="#2-质量成本" class="headerlink" title="2. 质量成本"></a>2. 质量成本</h5><h5 id="3-其中基本质量工具"><a href="#3-其中基本质量工具" class="headerlink" title="3. 其中基本质量工具"></a>3. 其中基本质量工具</h5><h5 id="4-标杆对照"><a href="#4-标杆对照" class="headerlink" title="4. 标杆对照"></a>4. 标杆对照</h5><h5 id="5-实验设计"><a href="#5-实验设计" class="headerlink" title="5. 实验设计"></a>5. 实验设计</h5><h5 id="6-统计抽样"><a href="#6-统计抽样" class="headerlink" title="6. 统计抽样"></a>6. 统计抽样</h5><h5 id="7-其他质量管理工具"><a href="#7-其他质量管理工具" class="headerlink" title="7. 其他质量管理工具"></a>7. 其他质量管理工具</h5><h5 id="8-会议"><a href="#8-会议" class="headerlink" title="8. 会议"></a>8. 会议</h5><h4 id="3）输出"><a href="#3）输出" class="headerlink" title="3）输出"></a>3）输出</h4><h5 id="1-质量管理计划"><a href="#1-质量管理计划" class="headerlink" title="1. 质量管理计划"></a>1. 质量管理计划</h5><h5 id="2-过程改进计划"><a href="#2-过程改进计划" class="headerlink" title="2. 过程改进计划"></a>2. 过程改进计划</h5><h5 id="3-质量测量指标"><a href="#3-质量测量指标" class="headerlink" title="3. 质量测量指标"></a>3. 质量测量指标</h5><h5 id="4-质量核对单"><a href="#4-质量核对单" class="headerlink" title="4. 质量核对单"></a>4. 质量核对单</h5><h5 id="5-项目文件更新"><a href="#5-项目文件更新" class="headerlink" title="5. 项目文件更新"></a>5. 项目文件更新</h5><h3 id="3、实施质量保证"><a href="#3、实施质量保证" class="headerlink" title="3、实施质量保证"></a>3、实施质量保证</h3><h4 id="1）输入-1"><a href="#1）输入-1" class="headerlink" title="1）输入"></a>1）输入</h4><h5 id="1-质量管理计划-1"><a href="#1-质量管理计划-1" class="headerlink" title="1. 质量管理计划"></a>1. 质量管理计划</h5><h5 id="2-过程改进计划-1"><a href="#2-过程改进计划-1" class="headerlink" title="2. 过程改进计划"></a>2. 过程改进计划</h5><h5 id="3-质量测量指标-1"><a href="#3-质量测量指标-1" class="headerlink" title="3. 质量测量指标"></a>3. 质量测量指标</h5><h5 id="4-质量控制测量结果"><a href="#4-质量控制测量结果" class="headerlink" title="4. 质量控制测量结果"></a>4. 质量控制测量结果</h5><h5 id="5-项目文件"><a href="#5-项目文件" class="headerlink" title="5. 项目文件"></a>5. 项目文件</h5><h4 id="2）工具和技术-1"><a href="#2）工具和技术-1" class="headerlink" title="2）工具和技术"></a>2）工具和技术</h4><h5 id="1-质量管理与控制工具"><a href="#1-质量管理与控制工具" class="headerlink" title="1. 质量管理与控制工具"></a>1. 质量管理与控制工具</h5><h5 id="2-质量审计"><a href="#2-质量审计" class="headerlink" title="2. 质量审计"></a>2. 质量审计</h5><h5 id="3-过程分析"><a href="#3-过程分析" class="headerlink" title="3. 过程分析"></a>3. 过程分析</h5><h4 id="3）输出-1"><a href="#3）输出-1" class="headerlink" title="3）输出"></a>3）输出</h4><h5 id="1-变更请求"><a href="#1-变更请求" class="headerlink" title="1. 变更请求"></a>1. 变更请求</h5><h5 id="2-项目管理计划更新"><a href="#2-项目管理计划更新" class="headerlink" title="2. 项目管理计划更新"></a>2. 项目管理计划更新</h5><h5 id="3-项目文件更新"><a href="#3-项目文件更新" class="headerlink" title="3. 项目文件更新"></a>3. 项目文件更新</h5><h5 id="4-组织过程资产更新"><a href="#4-组织过程资产更新" class="headerlink" title="4. 组织过程资产更新"></a>4. 组织过程资产更新</h5><h3 id="4、控制质量"><a href="#4、控制质量" class="headerlink" title="4、控制质量"></a>4、控制质量</h3><h4 id="1）输入-2"><a href="#1）输入-2" class="headerlink" title="1）输入"></a>1）输入</h4><h5 id="1-项目管理计划-1"><a href="#1-项目管理计划-1" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-质量测量指标"><a href="#2-质量测量指标" class="headerlink" title="2. 质量测量指标"></a>2. 质量测量指标</h5><h5 id="3-质量核对单"><a href="#3-质量核对单" class="headerlink" title="3. 质量核对单"></a>3. 质量核对单</h5><h5 id="4-工作绩效数据"><a href="#4-工作绩效数据" class="headerlink" title="4. 工作绩效数据"></a>4. 工作绩效数据</h5><h5 id="5-批准的变更请求"><a href="#5-批准的变更请求" class="headerlink" title="5. 批准的变更请求"></a>5. 批准的变更请求</h5><h5 id="6-可交付成果"><a href="#6-可交付成果" class="headerlink" title="6. 可交付成果"></a>6. 可交付成果</h5><h5 id="7-项目文件"><a href="#7-项目文件" class="headerlink" title="7. 项目文件"></a>7. 项目文件</h5><h5 id="8-组织过程资产"><a href="#8-组织过程资产" class="headerlink" title="8. 组织过程资产"></a>8. 组织过程资产</h5><h4 id="2）工具和技术-2"><a href="#2）工具和技术-2" class="headerlink" title="2）工具和技术"></a>2）工具和技术</h4><h5 id="1-七种基本质量工具"><a href="#1-七种基本质量工具" class="headerlink" title="1. 七种基本质量工具"></a>1. 七种基本质量工具</h5><h5 id="2-统计抽样"><a href="#2-统计抽样" class="headerlink" title="2. 统计抽样"></a>2. 统计抽样</h5><h5 id="3-检查"><a href="#3-检查" class="headerlink" title="3. 检查"></a>3. 检查</h5><h5 id="4-审计已批准的变更请求"><a href="#4-审计已批准的变更请求" class="headerlink" title="4. 审计已批准的变更请求"></a>4. 审计已批准的变更请求</h5><h4 id="3）输出-2"><a href="#3）输出-2" class="headerlink" title="3）输出"></a>3）输出</h4><h5 id="1-质量控制测量结果"><a href="#1-质量控制测量结果" class="headerlink" title="1. 质量控制测量结果"></a>1. 质量控制测量结果</h5><h5 id="2-确认的变更"><a href="#2-确认的变更" class="headerlink" title="2. 确认的变更"></a>2. 确认的变更</h5><h5 id="3-核实的可交付成果"><a href="#3-核实的可交付成果" class="headerlink" title="3. 核实的可交付成果"></a>3. 核实的可交付成果</h5><h5 id="4-工作绩效信息"><a href="#4-工作绩效信息" class="headerlink" title="4. 工作绩效信息"></a>4. 工作绩效信息</h5><h5 id="5-变更请求"><a href="#5-变更请求" class="headerlink" title="5. 变更请求"></a>5. 变更请求</h5><h5 id="6-项目管理计划更新"><a href="#6-项目管理计划更新" class="headerlink" title="6. 项目管理计划更新"></a>6. 项目管理计划更新</h5><h5 id="7-项目文件更新"><a href="#7-项目文件更新" class="headerlink" title="7. 项目文件更新"></a>7. 项目文件更新</h5><h5 id="8-组织过程资产更新"><a href="#8-组织过程资产更新" class="headerlink" title="8. 组织过程资产更新"></a>8. 组织过程资产更新</h5><h2 id="二、人力资源管理"><a href="#二、人力资源管理" class="headerlink" title="二、人力资源管理"></a>二、人力资源管理</h2>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、项目的进度管理和成本管理</title>
    <link href="/2021/08/31/%E7%AC%AC4%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%AE%A1%E7%90%86%E5%92%8C%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC4%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%AE%A1%E7%90%86%E5%92%8C%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、项目的进度管理和成本管理"><a href="#第4章、项目的进度管理和成本管理" class="headerlink" title="第4章、项目的进度管理和成本管理"></a>第4章、项目的进度管理和成本管理</h1><span id="more"></span><h2 id="一、进度管理"><a href="#一、进度管理" class="headerlink" title="一、进度管理"></a>一、进度管理</h2><h2 id="二、成本管理"><a href="#二、成本管理" class="headerlink" title="二、成本管理"></a>二、成本管理</h2>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、项目的整体管理和范围管理</title>
    <link href="/2021/08/31/%E7%AC%AC3%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%B4%E4%BD%93%E7%AE%A1%E7%90%86%E5%92%8C%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/31/%E7%AC%AC3%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%B4%E4%BD%93%E7%AE%A1%E7%90%86%E5%92%8C%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、项目的整体管理和范围管理"><a href="#第3章、项目的整体管理和范围管理" class="headerlink" title="第3章、项目的整体管理和范围管理"></a>第3章、项目的整体管理和范围管理</h1><span id="more"></span><h2 id="一、整体管理"><a href="#一、整体管理" class="headerlink" title="一、整体管理"></a>一、整体管理</h2><h3 id="1、整体管理概述"><a href="#1、整体管理概述" class="headerlink" title="1、整体管理概述"></a>1、整体管理概述</h3><h4 id="1）基础知识"><a href="#1）基础知识" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><h5 id="1-整体管理的概念"><a href="#1-整体管理的概念" class="headerlink" title="1. 整体管理的概念"></a>1. 整体管理的概念</h5><p>项目整体管理知识领域包括识别、确定、结合、统一与协调各项目管理过程组中不同过程的活动，是一个全局性的、综合性的管理</p><h5 id="2-项目管理的目标"><a href="#2-项目管理的目标" class="headerlink" title="2. 项目管理的目标"></a>2. 项目管理的目标</h5><h6 id="范围管理："><a href="#范围管理：" class="headerlink" title="范围管理："></a>范围管理：</h6><ul><li><p>做且只做</p></li><li><p>框定边界，明确行业，结合以往经验，有所突破</p></li></ul><h6 id="进度管理："><a href="#进度管理：" class="headerlink" title="进度管理："></a>进度管理：</h6><ul><li><p>按部就班</p></li><li><p>稳步推进，稳扎稳打</p></li></ul><h6 id="成本管理："><a href="#成本管理：" class="headerlink" title="成本管理："></a>成本管理：</h6><ul><li><p>精打细算</p></li><li><p>机会成本</p></li></ul><h6 id="质量管理："><a href="#质量管理：" class="headerlink" title="质量管理："></a>质量管理：</h6><ul><li>恰到好处</li></ul><h6 id="人力资源管理："><a href="#人力资源管理：" class="headerlink" title="人力资源管理："></a>人力资源管理：</h6><ul><li>人尽其才</li></ul><h6 id="沟通管理："><a href="#沟通管理：" class="headerlink" title="沟通管理："></a>沟通管理：</h6><ul><li>互通有无</li><li>积极主动、有效沟通</li></ul><h6 id="风险管理："><a href="#风险管理：" class="headerlink" title="风险管理："></a>风险管理：</h6><ul><li>未雨绸缪</li></ul><h6 id="采购管理："><a href="#采购管理：" class="headerlink" title="采购管理："></a>采购管理：</h6><ul><li>合作共赢</li></ul><h6 id="干系人管理："><a href="#干系人管理：" class="headerlink" title="干系人管理："></a>干系人管理：</h6><ul><li>化敌为友 </li></ul><h6 id="整体管理："><a href="#整体管理：" class="headerlink" title="整体管理："></a>整体管理：</h6><ul><li>运筹帷幄，决胜千里</li></ul><h4 id="2）项目启动会"><a href="#2）项目启动会" class="headerlink" title="2）项目启动会"></a>2）项目启动会</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h5><p>项目启动会是一个项目的开始</p><h5 id="2-目的"><a href="#2-目的" class="headerlink" title="2. 目的"></a>2. 目的</h5><p>使项目的主要干系人明确项目的目标、范围、需求、背景以及各自的职责和权限</p><h5 id="3-与项目开工会的区别"><a href="#3-与项目开工会的区别" class="headerlink" title="3. 与项目开工会的区别"></a>3. 与项目开工会的区别</h5><table><thead><tr><th></th><th>项目启动会</th><th>项目开工会</th></tr></thead><tbody><tr><td>组织者</td><td>项目发起人</td><td>项目经理</td></tr><tr><td>作用</td><td>决定项目要不要做</td><td>介绍项目怎么做</td></tr><tr><td>结果</td><td>宣布项目正式成立</td><td>介绍和分发项目计划，宣布项目进入执行阶段</td></tr></tbody></table><h4 id="3）事业环境因素"><a href="#3）事业环境因素" class="headerlink" title="3）事业环境因素"></a>3）事业环境因素</h4><p>事业环境因素包括，但不限于如下事项:</p><ul><li>组织或公司的文化与组成结构</li><li>政府或行业标准（如监管部门的规章制度、产品标准、质量标准和工艺标准）</li><li>基础设施（如现有的软件与硬件基础设施）</li><li>现有的人力资源（如技能、专业与知识）</li><li>人事管理（如雇佣与解雇指导方针、员工业绩评价与培训记录）</li><li>公司工作核准制度</li><li>市场情况</li><li>商业数据库（如标准的成本估算数据、行业风险研究信息与风险数据库）</li><li>项目管理信息系统</li></ul><h4 id="4）组织过程资产"><a href="#4）组织过程资产" class="headerlink" title="4）组织过程资产"></a>4）组织过程资产</h4><h5 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h5><p>组织过程资产指组织从以前项目中吸取的教训和学习到的知识，如完成的进度表、风险数据和实现价值数据</p><h5 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h5><ul><li>组织进行工作的过程和程序</li><li>组织整体信息存储检索知识库</li></ul><h4 id="5）成果线"><a href="#5）成果线" class="headerlink" title="5）成果线"></a>5）成果线</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913222801242.png" alt="image-20210913222801242"></p><h4 id="6）数据线"><a href="#6）数据线" class="headerlink" title="6）数据线"></a>6）数据线</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913223227534.png" alt="image-20210913223227534"></p><h3 id="2、制定项目章程"><a href="#2、制定项目章程" class="headerlink" title="2、制定项目章程"></a>2、制定项目章程</h3><h4 id="1）项目章程基本概念"><a href="#1）项目章程基本概念" class="headerlink" title="1）项目章程基本概念"></a>1）项目章程基本概念</h4><h5 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>项目章程是正式批准项目的文件</li><li>该文件正式表明项目发起方和项目承建方之间的伙伴关系，并记录了干系人的需要和期望的初步要求</li><li>项目章程可以由发起人编制，也可以由项目经理与发起机构合作编制（项目经理应该参与到编制章程的过程中）</li><li><strong>项目由项目组以外的机构来启动</strong></li><li>项目启动者或发起人应该具有一定的职权，能为项目获取资金并提供资源</li><li>项目章程不等同于合同，其中不会有金钱报酬相关的内容</li></ul><h5 id="2-作用（-）"><a href="#2-作用（-）" class="headerlink" title="2. 作用（***）"></a>2. 作用（***）</h5><ul><li>确定项目存在，没有章程就没有项目的存在</li><li>签字后的项目章程，标志着项目的正式启动（<strong>签名需由项目组成员外的人进行</strong>，如项目发起人、CCB等）</li><li>任命项目经理，并给项目经理授权</li><li>明确了项目的粗略要求（范围、进度、成本、质量）</li><li>将项目与公司日常运作结合起来</li></ul><h5 id="3-内容（-）"><a href="#3-内容（-）" class="headerlink" title="3. 内容（***）"></a>3. 内容（***）</h5><ul><li>项目目的或批准项目的原因（项目从哪来）</li><li>可测量的项目目标和相关的成功标准（项目到哪去）</li><li>概括性的项目描述（初步的范围）</li><li>项目的总体要求（初步的质量）</li><li>项目的主要风险（主要的风险）</li><li>总体里程碑进度计划（初步的进度）</li><li>总体预算（初步的成本）</li><li>项目审批要求（用什么标准评价成功、由谁对行吗成功下结论、由谁来签署项目结束）（收尾）</li><li>委派的项目经理及其职责和职权（委任）</li><li>发起人或其他批准项目章程的人员的姓名和职权（干系人）</li></ul><h4 id="2）输入"><a href="#2）输入" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目工作说明书"><a href="#1-项目工作说明书" class="headerlink" title="1. 项目工作说明书"></a>1. 项目工作说明书</h5><h5 id="2-商业论证"><a href="#2-商业论证" class="headerlink" title="2. 商业论证"></a>2. 商业论证</h5><h5 id="3-协议"><a href="#3-协议" class="headerlink" title="3. 协议"></a>3. 协议</h5><h5 id="4-事业环境因素"><a href="#4-事业环境因素" class="headerlink" title="4. 事业环境因素"></a>4. 事业环境因素</h5><h5 id="5-组织过程资产"><a href="#5-组织过程资产" class="headerlink" title="5. 组织过程资产"></a>5. 组织过程资产</h5><h4 id="3）工具和技术"><a href="#3）工具和技术" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-专家判断"><a href="#1-专家判断" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-引导技术"><a href="#2-引导技术" class="headerlink" title="2. 引导技术"></a>2. 引导技术</h5><h4 id="4）输出"><a href="#4）输出" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-项目章程"><a href="#1-项目章程" class="headerlink" title="1. 项目章程"></a>1. 项目章程</h5><h4 id="5）项目工作说明书"><a href="#5）项目工作说明书" class="headerlink" title="5）项目工作说明书"></a>5）项目工作说明书</h4><h5 id="1-定义-3"><a href="#1-定义-3" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>项目工作说明书是应该由项目提供的产品或服务的文字说明</li><li>对于内部项目，叫工作说明书</li><li>对于外部项目，属于招标文件的一部分，如建议邀请书、信息请求、招标邀请书等</li></ul><h5 id="2-内容"><a href="#2-内容" class="headerlink" title="2. 内容"></a>2. 内容</h5><ul><li>业务需求<ul><li>可能来自于培训需求、市场需求、技术进步、法律要求或政府标准</li></ul></li><li>产品范围说明书<ul><li>项目创造的产品或服务的要求与特征的说明文件</li></ul></li><li>战略计划<ul><li>所有项目都应该支持组织的战略目标</li></ul></li></ul><h3 id="3、制定项目管理计划"><a href="#3、制定项目管理计划" class="headerlink" title="3、制定项目管理计划"></a>3、制定项目管理计划</h3><h4 id="1）项目管理计划"><a href="#1）项目管理计划" class="headerlink" title="1）项目管理计划"></a>1）项目管理计划</h4><h5 id="1-子计划"><a href="#1-子计划" class="headerlink" title="1. 子计划"></a>1. 子计划</h5><ul><li>范围管理计划</li><li>需求管理计划</li><li>进度管理计划</li><li>成本管理计划</li><li>质量管理计划</li><li>过程改进计划</li><li>人力资源计划</li><li>沟通管理计划</li><li>风险管理计划</li><li>采购管理计划</li></ul><h5 id="2-具体内容"><a href="#2-具体内容" class="headerlink" title="2. 具体内容"></a>2. 具体内容</h5><ul><li>项目管理团队选择的各个项目管理过程</li><li>每一选定过程的实施水平</li><li>对实施这些过程时使用的工具和技术所做的说明</li><li>在管理具体项目中使用选定过程的方式和方法，包括过程之间的依赖关系和相关作用，以及重要的依据和成果</li><li>为了实现项目目标所执行工作的方式、方法</li><li>监控变更的方式、方法</li><li>实施配置管理的方式、方法</li><li>使用实施效果测量基准并使之保持完整的方式、方法</li><li>项目干系人之间的沟通需求与技术</li><li>选定的项目生命周期和多阶段项目的项目阶段</li><li>高层管理人员为了加快解决未解决问题和处理为做出的决策，对内容、范围和时间安排的相关审查</li></ul><h4 id="2）项目管理计划编制（-）"><a href="#2）项目管理计划编制（-）" class="headerlink" title="2）项目管理计划编制（***）"></a>2）项目管理计划编制（***）</h4><h5 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1. 工作流程"></a>1. 工作流程</h5><ul><li>明确项目目标</li><li>成立初步的项目团队</li><li>工作准备与信息收集</li><li>依据模板、标准编写初步的、概要的项目计划</li><li>将上述计划纳入项目计划，然后对项目计划进行综合平衡、优化</li><li>项目经理负责组织编写项目计划</li><li>评审和批准项目计划</li><li><strong>获得批准的项目计划就是项目的基准</strong></li></ul><h5 id="2-基本原则"><a href="#2-基本原则" class="headerlink" title="2. 基本原则"></a>2. 基本原则</h5><ul><li>目标的统一管理</li><li>方案的统一管理</li><li>过程的统一管理</li><li>技术工作与管理工作的统一协调</li><li>计划的统一管理</li><li>人力资源的统一管理</li><li>各干系人的参与</li><li>逐步精确</li></ul><h5 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3. 步骤"></a>3. 步骤</h5><ul><li>各具体知识领域制订个字的分项计划</li><li>整体管理知识领域收集各分项计划，整合成项目管理计划</li><li>用项目管理计划指导项目的执行和监控工作</li><li>对提出的必要变更请求，报实施整体变更控制过程审批</li><li>根据经批准的变更请求，更新项目管理计划</li></ul><h4 id="3）输入"><a href="#3）输入" class="headerlink" title="3）输入"></a>3）输入</h4><h5 id="1-项目章程-1"><a href="#1-项目章程-1" class="headerlink" title="1. 项目章程"></a>1. 项目章程</h5><h5 id="2-其他过程的输出"><a href="#2-其他过程的输出" class="headerlink" title="2. 其他过程的输出"></a>2. 其他过程的输出</h5><h5 id="3-事业环境因素"><a href="#3-事业环境因素" class="headerlink" title="3. 事业环境因素"></a>3. 事业环境因素</h5><h5 id="4-组织过程资产"><a href="#4-组织过程资产" class="headerlink" title="4. 组织过程资产"></a>4. 组织过程资产</h5><h4 id="4）工具和技术"><a href="#4）工具和技术" class="headerlink" title="4）工具和技术"></a>4）工具和技术</h4><h5 id="1-专家判断-1"><a href="#1-专家判断-1" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-引导技术-1"><a href="#2-引导技术-1" class="headerlink" title="2. 引导技术"></a>2. 引导技术</h5><h4 id="5）输出"><a href="#5）输出" class="headerlink" title="5）输出"></a>5）输出</h4><h5 id="1-项目管理计划"><a href="#1-项目管理计划" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h3 id="4、指导管理项目执行"><a href="#4、指导管理项目执行" class="headerlink" title="4、指导管理项目执行"></a>4、指导管理项目执行</h3><h4 id="1）基本概念"><a href="#1）基本概念" class="headerlink" title="1）基本概念"></a>1）基本概念</h4><h5 id="1-工作要求"><a href="#1-工作要求" class="headerlink" title="1. 工作要求"></a>1. 工作要求</h5><ul><li>要求项目经理和项目团队采取多种行动执行项目管理计划，完成项目范围说明书中明确的工作</li></ul><h5 id="2-工作内容"><a href="#2-工作内容" class="headerlink" title="2. 工作内容"></a>2. 工作内容</h5><h6 id="人力资源管理：-1"><a href="#人力资源管理：-1" class="headerlink" title="人力资源管理："></a>人力资源管理：</h6><ul><li>组建项目团队</li><li>建设项目团队</li><li>管理项目团队</li></ul><h6 id="项目质量管理："><a href="#项目质量管理：" class="headerlink" title="项目质量管理："></a>项目质量管理：</h6><ul><li>实施质量保证</li></ul><h6 id="项目采购管理："><a href="#项目采购管理：" class="headerlink" title="项目采购管理："></a>项目采购管理：</h6><ul><li>实施采购</li></ul><h6 id="项目沟通管理："><a href="#项目沟通管理：" class="headerlink" title="项目沟通管理："></a>项目沟通管理：</h6><ul><li>发布信息</li><li>管理干系人期望</li></ul><h6 id="干系人管理：-1"><a href="#干系人管理：-1" class="headerlink" title="干系人管理："></a>干系人管理：</h6><ul><li>管理相关干系人</li></ul><h4 id="2）输入-1"><a href="#2）输入-1" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-1"><a href="#1-项目管理计划-1" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-批准的变更申请"><a href="#2-批准的变更申请" class="headerlink" title="2. 批准的变更申请"></a>2. 批准的变更申请</h5><h5 id="3-事业环境因素-1"><a href="#3-事业环境因素-1" class="headerlink" title="3. 事业环境因素"></a>3. 事业环境因素</h5><h5 id="4-组织过程资产-1"><a href="#4-组织过程资产-1" class="headerlink" title="4. 组织过程资产"></a>4. 组织过程资产</h5><h4 id="3）工具和技术-1"><a href="#3）工具和技术-1" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-专家判断-2"><a href="#1-专家判断-2" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-项目管理信息系统"><a href="#2-项目管理信息系统" class="headerlink" title="2. 项目管理信息系统"></a>2. 项目管理信息系统</h5><h5 id="3-会议"><a href="#3-会议" class="headerlink" title="3. 会议"></a>3. 会议</h5><h4 id="4）输出-1"><a href="#4）输出-1" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-可交付成果"><a href="#1-可交付成果" class="headerlink" title="1. 可交付成果"></a>1. 可交付成果</h5><h5 id="2-工作绩效数据"><a href="#2-工作绩效数据" class="headerlink" title="2. 工作绩效数据"></a>2. 工作绩效数据</h5><h5 id="3-变更请求"><a href="#3-变更请求" class="headerlink" title="3. 变更请求"></a>3. 变更请求</h5><h5 id="4-项目管理计划更新"><a href="#4-项目管理计划更新" class="headerlink" title="4. 项目管理计划更新"></a>4. 项目管理计划更新</h5><h5 id="5-项目文件更新"><a href="#5-项目文件更新" class="headerlink" title="5. 项目文件更新"></a>5. 项目文件更新</h5><h4 id="5）项目信息系统"><a href="#5）项目信息系统" class="headerlink" title="5）项目信息系统"></a>5）项目信息系统</h4><h5 id="1-定义-4"><a href="#1-定义-4" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>项目管理信息系统是由用于归纳、综合和传播项目管理程序输出的工具和技术组成的</li><li><strong>一个项目管理信息系统主要由两部分组成 —— 计划系统 和 控制系统</strong></li></ul><h5 id="2-计划系统（配置管理系统）"><a href="#2-计划系统（配置管理系统）" class="headerlink" title="2. 计划系统（配置管理系统）"></a>2. 计划系统（配置管理系统）</h5><ul><li>用于提交变更建议、追踪变更建议的审查与批准制度、确定变更的批准级别、确认批准的变更方法</li><li><strong>常用的配置管理软件由 CVS、VSS、ClearCase 等</strong></li></ul><h5 id="3-控制系统（变更控制系统）"><a href="#3-控制系统（变更控制系统）" class="headerlink" title="3. 控制系统（变更控制系统）"></a>3. 控制系统（变更控制系统）</h5><ul><li>用于确定控制、改变和批准项目可交付成果和文件的方式、方法</li></ul><h4 id="6）工作绩效数据"><a href="#6）工作绩效数据" class="headerlink" title="6）工作绩效数据"></a>6）工作绩效数据</h4><h5 id="1-定义-5"><a href="#1-定义-5" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>工作绩效数据是在执行项目工作的过程中，从每个正在执行的活动中收集到的原始观察结果和测量值</li></ul><h5 id="2-主要内容"><a href="#2-主要内容" class="headerlink" title="2. 主要内容"></a>2. 主要内容</h5><ul><li>表明进度绩效的状态信息</li><li>已完成和尚未完成的可交付成果</li><li>已经开始与已经完成的计划活动</li><li>质量标准满足的程度</li><li>批准与已经开销的费用</li><li>对于完成已经开始的计划活动的估算</li><li>绩效过程中的计划活动实际完成的百分比</li><li>吸取并已记录且转入经验教训知识库的教训</li><li>资源利用的细节</li></ul><h3 id="5、监控项目工作"><a href="#5、监控项目工作" class="headerlink" title="5、监控项目工作"></a>5、监控项目工作</h3><h4 id="1）基本概念-1"><a href="#1）基本概念-1" class="headerlink" title="1）基本概念"></a>1）基本概念</h4><h5 id="1-定义-6"><a href="#1-定义-6" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>监控工作属于监控过程组，主要工作是监控和控制启动、规划、执行和结束过程组中项目所需的各个过程，并采取纠正或预防措施来控制项目的实施效果，使其符合基准要求</li><li>监控是一个贯穿项目整个生命周期的过程</li></ul><h5 id="2-工作内容-1"><a href="#2-工作内容-1" class="headerlink" title="2. 工作内容"></a>2. 工作内容</h5><ul><li>确认范围</li><li>控制范围</li><li>控制进度</li><li>控制成本</li><li>控制质量</li><li>控制沟通</li><li>监控风险</li><li>控制采购</li><li>监督干系人参与</li></ul><h5 id="3-作用"><a href="#3-作用" class="headerlink" title="3. 作用"></a>3. 作用</h5><ul><li>让项目管理团队能够识别项目的状态是否正常，并识别任何可能要求给予特别关注的方面</li></ul><h4 id="2）输入-2"><a href="#2）输入-2" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-2"><a href="#1-项目管理计划-2" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-进度预测（完工尚需时间估算）"><a href="#2-进度预测（完工尚需时间估算）" class="headerlink" title="2. 进度预测（完工尚需时间估算）"></a>2. 进度预测（完工尚需时间估算）</h5><ul><li>基于实际进展与进度基准的比较而计算出的对于进度的预测，通常用于表示进度偏差和进度绩效指数</li></ul><h5 id="3-成本预测（完工尚需估算）"><a href="#3-成本预测（完工尚需估算）" class="headerlink" title="3. 成本预测（完工尚需估算）"></a>3. 成本预测（完工尚需估算）</h5><ul><li>基于实际进展与成本基准的比较而计算出的完工尚需（投资）估算，通常用于表示成本偏差和成本绩效指数</li></ul><h5 id="4-确认的变更"><a href="#4-确认的变更" class="headerlink" title="4. 确认的变更"></a>4. 确认的变更</h5><ul><li>批准的变更是实施整体变更控制过程的结果</li><li>需要对其执行情况进行确认，以保证正确落实</li><li>确认的变更用数据来说明变更已得到正确的落实</li></ul><h5 id="5-工作绩效信息"><a href="#5-工作绩效信息" class="headerlink" title="5. 工作绩效信息"></a>5. 工作绩效信息</h5><h5 id="6-事业环境因素"><a href="#6-事业环境因素" class="headerlink" title="6. 事业环境因素"></a>6. 事业环境因素</h5><h5 id="7-组织过程资产"><a href="#7-组织过程资产" class="headerlink" title="7. 组织过程资产"></a>7. 组织过程资产</h5><h4 id="3）工具和技术-2"><a href="#3）工具和技术-2" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-专家判断-3"><a href="#1-专家判断-3" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-分析技术"><a href="#2-分析技术" class="headerlink" title="2. 分析技术"></a>2. 分析技术</h5><h5 id="3-项目管理信息系统"><a href="#3-项目管理信息系统" class="headerlink" title="3. 项目管理信息系统"></a>3. 项目管理信息系统</h5><h5 id="4-会议"><a href="#4-会议" class="headerlink" title="4. 会议"></a>4. 会议</h5><h4 id="4）输出-2"><a href="#4）输出-2" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-变更申请"><a href="#1-变更申请" class="headerlink" title="1. 变更申请"></a>1. 变更申请</h5><h5 id="2-工作绩效报告"><a href="#2-工作绩效报告" class="headerlink" title="2. 工作绩效报告"></a>2. 工作绩效报告</h5><ul><li>为制定决策、采取行动或引起关注而汇编工作绩效信息所形成的实物或电子项目文件</li></ul><h5 id="3-项目管理计划更新"><a href="#3-项目管理计划更新" class="headerlink" title="3. 项目管理计划更新"></a>3. 项目管理计划更新</h5><h5 id="4-项目文件更新"><a href="#4-项目文件更新" class="headerlink" title="4. 项目文件更新"></a>4. 项目文件更新</h5><h4 id="5）分析技术"><a href="#5）分析技术" class="headerlink" title="5）分析技术"></a>5）分析技术</h4><h5 id="1-定义-7"><a href="#1-定义-7" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>根据可能的项目或环境变量的变化，以及它们与其他变量之间的关系，采用分析技术来预测潜在的后果</li></ul><h5 id="2-具体分析技术方法"><a href="#2-具体分析技术方法" class="headerlink" title="2. 具体分析技术方法"></a>2. 具体分析技术方法</h5><ul><li>回归分析</li><li>分组方法</li><li>因果分析</li><li>根本原因分析</li><li>预测方法（如时间序列、情景构建、模拟等）</li><li>失效模式与影响分析</li><li>故障树分析</li><li>储备分析</li><li>趋势分析</li><li><strong>挣值管理</strong></li><li>差异分析</li></ul><h3 id="6、实施整体变更控制"><a href="#6、实施整体变更控制" class="headerlink" title="6、实施整体变更控制"></a>6、实施整体变更控制</h3><h4 id="1）基础概念"><a href="#1）基础概念" class="headerlink" title="1）基础概念"></a>1）基础概念</h4><h5 id="1-定义-8"><a href="#1-定义-8" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>整体变更控制过程贯彻整个项目生命周期</li><li>项目很少会准确按项目管理计划进行，变更控制必不可少</li></ul><h5 id="2-变更控制过程中的配置管理活动"><a href="#2-变更控制过程中的配置管理活动" class="headerlink" title="2. 变更控制过程中的配置管理活动"></a>2. 变更控制过程中的配置管理活动</h5><ul><li>配置识别<ul><li>是确定与核实产品配置、标识产品与文件、管理变更、保持信息公开的基础</li></ul></li><li>配置状态记录<ul><li>捕捉、存储和评价有效的管理产品和产品信息所需的配置信息</li></ul></li><li>配置核实与审计<ul><li>查明配置文件中确定的性能和功能已达到要求</li></ul></li></ul><h5 id="3-具体工作"><a href="#3-具体工作" class="headerlink" title="3. 具体工作"></a>3. 具体工作</h5><ul><li>比照计划（基准）</li><li>分析现状</li><li>计算偏差</li><li>做出预测</li><li>决定行动</li><li>监督变更</li></ul><h5 id="3-变更控制委员会（CCB）"><a href="#3-变更控制委员会（CCB）" class="headerlink" title="3. 变更控制委员会（CCB）"></a>3. 变更控制委员会（CCB）</h5><ul><li>CCB 是<strong>决策机构</strong>，不是作业机构。其工作是评审和决定变更是否实行，但不提出变更方案（项目经理或干系人提出）</li></ul><h5 id="4-项目经理的职责"><a href="#4-项目经理的职责" class="headerlink" title="4. 项目经理的职责"></a>4. 项目经理的职责</h5><ul><li>相应变更提出者的要求，评估变更对项目的影响，制定应对方案，将技术需求转化成资源需求，再供授权人决策</li><li>按照变更申请的评审结果调整项目基准，确保姓名的基准能够反映项目的实施情况</li></ul><h4 id="2）输入-3"><a href="#2）输入-3" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-3"><a href="#1-项目管理计划-3" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-工作绩效报告-1"><a href="#2-工作绩效报告-1" class="headerlink" title="2. 工作绩效报告"></a>2. 工作绩效报告</h5><h5 id="3-变更申请"><a href="#3-变更申请" class="headerlink" title="3. 变更申请"></a>3. 变更申请</h5><h5 id="4-事业环境因素-1"><a href="#4-事业环境因素-1" class="headerlink" title="4. 事业环境因素"></a>4. 事业环境因素</h5><h5 id="5-组织过程资产-1"><a href="#5-组织过程资产-1" class="headerlink" title="5. 组织过程资产"></a>5. 组织过程资产</h5><h4 id="3）工具和技术-3"><a href="#3）工具和技术-3" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-专家判断-4"><a href="#1-专家判断-4" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-会议"><a href="#2-会议" class="headerlink" title="2. 会议"></a>2. 会议</h5><h5 id="3-变更控制工具"><a href="#3-变更控制工具" class="headerlink" title="3. 变更控制工具"></a>3. 变更控制工具</h5><h4 id="4）输出-3"><a href="#4）输出-3" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-批准的变更请求"><a href="#1-批准的变更请求" class="headerlink" title="1. 批准的变更请求"></a>1. 批准的变更请求</h5><h5 id="2-变更日志"><a href="#2-变更日志" class="headerlink" title="2. 变更日志"></a>2. 变更日志</h5><ul><li>用于记录项目过程中出现的变更</li><li>应与相关干系人沟通这些变更，以及其对项目进度、成本和风险的影响</li><li>被否决的变更申请也应该记录在变更日志中</li></ul><h5 id="3-项目管理计划更新-1"><a href="#3-项目管理计划更新-1" class="headerlink" title="3. 项目管理计划更新"></a>3. 项目管理计划更新</h5><h5 id="4-项目文件更新-1"><a href="#4-项目文件更新-1" class="headerlink" title="4. 项目文件更新"></a>4. 项目文件更新</h5><h3 id="7、结束项目或阶段"><a href="#7、结束项目或阶段" class="headerlink" title="7、结束项目或阶段"></a>7、结束项目或阶段</h3><h4 id="1）基本概念-2"><a href="#1）基本概念-2" class="headerlink" title="1）基本概念"></a>1）基本概念</h4><h5 id="1-定义-9"><a href="#1-定义-9" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>结束项目或阶段是完结所有除收尾过程组外的其他过程组的活动，正式结束项目或阶段的过程</li></ul><h5 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h5><ul><li>总结经验教训，正式结束项目工作，为展开新的工作释放资源</li></ul><h4 id="2）输入-4"><a href="#2）输入-4" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-4"><a href="#1-项目管理计划-4" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-验收的可交付成果"><a href="#2-验收的可交付成果" class="headerlink" title="2. 验收的可交付成果"></a>2. 验收的可交付成果</h5><ul><li>包括批准的产品规范、交货收据和工作绩效文件</li><li>在分阶段实施的项目或被取消的项目中，可能会包括未全部完成的可交付成果或中间可交付成果</li></ul><h5 id="3-组织过程资产"><a href="#3-组织过程资产" class="headerlink" title="3 组织过程资产"></a>3 组织过程资产</h5><h4 id="3）工具和技术-4"><a href="#3）工具和技术-4" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-专家判断-5"><a href="#1-专家判断-5" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-分析技术-1"><a href="#2-分析技术-1" class="headerlink" title="2. 分析技术"></a>2. 分析技术</h5><h5 id="3-会议-1"><a href="#3-会议-1" class="headerlink" title="3. 会议"></a>3. 会议</h5><h4 id="4）输出-4"><a href="#4）输出-4" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-最终产品、服务或成果移交"><a href="#1-最终产品、服务或成果移交" class="headerlink" title="1. 最终产品、服务或成果移交"></a>1. 最终产品、服务或成果移交</h5><h5 id="2-组织过程资产更新"><a href="#2-组织过程资产更新" class="headerlink" title="2. 组织过程资产更新"></a>2. 组织过程资产更新</h5><h4 id="5）合同收尾-vs-行政收尾"><a href="#5）合同收尾-vs-行政收尾" class="headerlink" title="5）合同收尾 vs 行政收尾"></a>5）合同收尾 vs 行政收尾</h4><h5 id="1-合同收尾"><a href="#1-合同收尾" class="headerlink" title="1. 合同收尾"></a>1. 合同收尾</h5><ul><li>在合同双方实质性履行我那合同规定的权利义务后，对单个合同进行正式关闭</li><li>外部的、在行政收尾之前、以合同签收为止的一次</li></ul><h5 id="2-行政收尾"><a href="#2-行政收尾" class="headerlink" title="2. 行政收尾"></a>2. 行政收尾</h5><ul><li><p>在项目实质性完工（全部技术工作完成）以后对项目进行正式关闭</p></li><li><p>内部的、在合同收尾之后、项目的每个阶段都要行政收尾（总结经验教训）</p></li></ul><h2 id="二、范围管理"><a href="#二、范围管理" class="headerlink" title="二、范围管理"></a>二、范围管理</h2><h3 id="1、范围管理概述"><a href="#1、范围管理概述" class="headerlink" title="1、范围管理概述"></a>1、范围管理概述</h3><h4 id="1）范围管理的概念"><a href="#1）范围管理的概念" class="headerlink" title="1）范围管理的概念"></a>1）范围管理的概念</h4><h5 id="1-定义-10"><a href="#1-定义-10" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>项目范围管理就是要做范围内的事，且只做范围内的事，即不少做也不多做</li><li>根据约束限制逐步缩减范围，兼顾三条约束边界的互动关系，<strong>最终形成必须交付的工作或服务</strong></li></ul><h5 id="2-项目范围的三大约束"><a href="#2-项目范围的三大约束" class="headerlink" title="2. 项目范围的三大约束"></a>2. 项目范围的三大约束</h5><ul><li>质量标准约束</li><li>成本约束</li><li>进度约束</li></ul><h5 id="3-工作内容"><a href="#3-工作内容" class="headerlink" title="3. 工作内容"></a>3. 工作内容</h5><ul><li>明确项目边界</li><li>对项目执行工作进行监控</li><li>防止项目范围发生蔓延</li></ul><h4 id="3）范围管理的意义"><a href="#3）范围管理的意义" class="headerlink" title="3）范围管理的意义"></a>3）范围管理的意义</h4><ul><li><p>项目范围<strong>定义不清</strong>，往往是<strong>导致项目失败的首要原因</strong></p></li><li><p>项目范围管理是项目<strong>各项计划、控制的基础</strong></p></li><li><p>项目范围管理确定了项目的<strong>具体工作任务</strong>，有助于清楚的<strong>责任划分</strong>和<strong>任务分派</strong></p></li><li><p>清楚项目的工作具体范围和具体内容，是<strong>提高成本、进度和资源估算的精准性的基础</strong></p></li></ul><h4 id="4）范围基准"><a href="#4）范围基准" class="headerlink" title="4）范围基准"></a>4）范围基准</h4><ul><li>项目的范围基准就是经过批准的项目范围说明书、WBS 和 WBS词典</li></ul><h4 id="5）产品范围"><a href="#5）产品范围" class="headerlink" title="5）产品范围"></a>5）产品范围</h4><h5 id="1-定义-11"><a href="#1-定义-11" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>产品范围指<strong>产品或服务所应该包含的功能</strong></li></ul><h5 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="2. 作用"></a>2. 作用</h5><ul><li>产品范围是项目范围的基础，产品范围的定义就是产品要求的描述</li></ul><h5 id="3-完成的判断依据"><a href="#3-完成的判断依据" class="headerlink" title="3. 完成的判断依据"></a>3. 完成的判断依据</h5><ul><li>产品范围是否完成，根据产品是否满足产品描述来判断</li></ul><h5 id="4-变更的影响"><a href="#4-变更的影响" class="headerlink" title="4. 变更的影响"></a>4. 变更的影响</h5><ul><li>产品变更后，首先受到影响的就是项目范围</li></ul><h4 id="6）项目范围（项目工作范围）"><a href="#6）项目范围（项目工作范围）" class="headerlink" title="6）项目范围（项目工作范围）"></a>6）项目范围（项目工作范围）</h4><h5 id="1-定义-12"><a href="#1-定义-12" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>项目范围是指为了能够交付产品，项目所<strong>必须做的工作</strong></li></ul><h5 id="2-作用-2"><a href="#2-作用-2" class="headerlink" title="2. 作用"></a>2. 作用</h5><ul><li>项目范围的定义是产生项目管理计划的基础</li></ul><h5 id="3-完成的判断依据-1"><a href="#3-完成的判断依据-1" class="headerlink" title="3. 完成的判断依据"></a>3. 完成的判断依据</h5><ul><li>判断项目范围是否完成，要<strong>以范围基准来衡量</strong></li></ul><h3 id="2、规划范围管理"><a href="#2、规划范围管理" class="headerlink" title="2、规划范围管理"></a>2、规划范围管理</h3><blockquote><p>编写范围管理计划</p></blockquote><h4 id="1）基础知识-1"><a href="#1）基础知识-1" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><h5 id="1-定义-13"><a href="#1-定义-13" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>规划范围管理就是编写范围管理计划，以书面的方式描述如何定义、确认和控制项目范围的过程</li></ul><h5 id="2-作用-3"><a href="#2-作用-3" class="headerlink" title="2. 作用"></a>2. 作用</h5><ul><li>在整个项目生命周期内为如何管理范围提供指南和方向</li></ul><h4 id="2）输入-5"><a href="#2）输入-5" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-项目管理计划-5"><a href="#1-项目管理计划-5" class="headerlink" title="1. 项目管理计划"></a>1. 项目管理计划</h5><h5 id="2-项目章程"><a href="#2-项目章程" class="headerlink" title="2. 项目章程"></a>2. 项目章程</h5><h5 id="3-事业环境因素-2"><a href="#3-事业环境因素-2" class="headerlink" title="3. 事业环境因素"></a>3. 事业环境因素</h5><h5 id="4-组织过程资产-2"><a href="#4-组织过程资产-2" class="headerlink" title="4. 组织过程资产"></a>4. 组织过程资产</h5><h4 id="3）工具和技术-5"><a href="#3）工具和技术-5" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-专家判断-6"><a href="#1-专家判断-6" class="headerlink" title="1. 专家判断"></a>1. 专家判断</h5><h5 id="2-会议-1"><a href="#2-会议-1" class="headerlink" title="2. 会议"></a>2. 会议</h5><h4 id="4）输出-5"><a href="#4）输出-5" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-范围管理计划"><a href="#1-范围管理计划" class="headerlink" title="1. 范围管理计划"></a>1. 范围管理计划</h5><h5 id="2-需求管理计划"><a href="#2-需求管理计划" class="headerlink" title="2. 需求管理计划"></a>2. 需求管理计划</h5><h4 id="5）范围管理计划"><a href="#5）范围管理计划" class="headerlink" title="5）范围管理计划"></a>5）范围管理计划</h4><h5 id="1-内容"><a href="#1-内容" class="headerlink" title="1. 内容"></a>1. 内容</h5><ul><li>如何制订项目范围说明书</li><li>如何根据范围说明书创建 WBS </li><li>如何维护和批准 WBS</li><li>如何确认和正式验收已完成的项目可交付成果</li><li>如何处理项目范围说明书的变更，该工作与实施整体变更控制过程直接相联</li></ul><h5 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h5><ul><li>可以包含在项目管理计划之中，也可以作为单独的一项独立存在</li><li>根据不同的项目要求，<strong>可以是详细的也可以是概括的，可以是正式的也可以是非正式的</strong></li></ul><h4 id="6）需求管理计划"><a href="#6）需求管理计划" class="headerlink" title="6）需求管理计划"></a>6）需求管理计划</h4><h5 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h5><ul><li><p><strong>明确需求，建立需求基线</strong>，使项目组和用户达成共识</p></li><li><p>建立需求跟踪联系链，监控控制用户需求是否被正确执行，使最终产品与用户需求一致</p></li></ul><h5 id="2-内容-1"><a href="#2-内容-1" class="headerlink" title="2. 内容"></a>2. 内容</h5><ul><li>如何规划、跟踪和汇报各种需求活动</li><li>需求管理需要使用的资源</li><li>培训计划</li><li>项目干系人参与需求管理的策略</li><li>判断项目范围与需求不一致的准则和纠正规则</li><li>需求跟踪结构（哪些需求属性被列入跟踪矩阵）</li><li>可在其他哪些项目文件中追踪到这些需求</li><li>配置管理活动</li></ul><h3 id="3、收集需求"><a href="#3、收集需求" class="headerlink" title="3、收集需求"></a>3、收集需求</h3><blockquote><p>确定需求</p></blockquote><h4 id="1）基础知识-2"><a href="#1）基础知识-2" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><h5 id="1-需求的分类"><a href="#1-需求的分类" class="headerlink" title="1. 需求的分类"></a>1. 需求的分类</h5><ul><li><p>业务需求</p><ul><li>整个组织的高层级需要，如，解决业务问题或抓住业务机会，实施项目的原因</li></ul></li><li><p>干系人需求</p><ul><li>干系人或干系人群体的需求</li></ul></li><li><p>解决方案需求</p><ul><li>为了满足业务需求和干系人需求，产品、服务或成果必须具备的特性、功能和特征</li><li>功能需求<ul><li>关于产品能开展的行为，如，流程、数据，以及与产品的互动等</li></ul></li><li>非功能需求<ul><li>对功能需求的补充，是产品正常运行所需的环境条件或质量，如，可靠性、安全性、性能、服务水平等</li></ul></li></ul></li><li><p>过渡需求</p><ul><li>从当前状态过渡到将来状态所需的临时能力，如，数据转换和培训需求</li></ul></li><li><p>项目需求</p><ul><li>项目需要满足的行动、过程或其他条件</li></ul></li><li><p>质量需求</p><ul><li><p>用于确定项目可交付成果的成功完成或其他项目需求的实现条件或标准。</p></li><li><p>QFD 对于质量需求进行了细分</p><ul><li>基本需求</li><li>期望需求</li><li>意外需求</li></ul></li></ul></li></ul><h4 id="2）输入-6"><a href="#2）输入-6" class="headerlink" title="2）输入"></a>2）输入</h4><h5 id="1-范围管理计划-1"><a href="#1-范围管理计划-1" class="headerlink" title="1. 范围管理计划"></a>1. 范围管理计划</h5><h5 id="2-需求管理计划-1"><a href="#2-需求管理计划-1" class="headerlink" title="2. 需求管理计划"></a>2. 需求管理计划</h5><h5 id="3-干系人管理计划"><a href="#3-干系人管理计划" class="headerlink" title="3. 干系人管理计划"></a>3. 干系人管理计划</h5><h5 id="4-项目章程"><a href="#4-项目章程" class="headerlink" title="4. 项目章程"></a>4. 项目章程</h5><h5 id="5-干系人登记册"><a href="#5-干系人登记册" class="headerlink" title="5. 干系人登记册"></a>5. 干系人登记册</h5><h4 id="3）工具和技术-6"><a href="#3）工具和技术-6" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h5 id="1-访谈"><a href="#1-访谈" class="headerlink" title="1. 访谈"></a>1. 访谈</h5><ul><li>直接交谈</li></ul><h5 id="2-焦点小组"><a href="#2-焦点小组" class="headerlink" title="2. 焦点小组"></a>2. 焦点小组</h5><ul><li>群体访谈，预先选定的干系人和主题专家</li></ul><h5 id="3-引导式研讨会"><a href="#3-引导式研讨会" class="headerlink" title="3. 引导式研讨会"></a>3. 引导式研讨会</h5><ul><li>跨职能干系人，能比单项会议更快地发现和解决问题</li></ul><h5 id="4-群体创新技术"><a href="#4-群体创新技术" class="headerlink" title="4. 群体创新技术"></a>4. 群体创新技术</h5><ul><li>头脑风暴<ul><li>各抒己见</li></ul></li><li>名义小组技术<ul><li>头脑风暴法的深化应用</li></ul></li><li><strong>德尔斐技术</strong><ul><li>专家背靠背（匿名投票）</li></ul></li><li>概念/思维导图<ul><li>引导新的创意</li></ul></li><li>亲和图（KJ法）<ul><li>核心是头脑风暴法，是根据结果去找原因</li></ul></li><li>多标准决策分析<ul><li>借助决策矩阵</li></ul></li></ul><h5 id="5-群体决策技术"><a href="#5-群体决策技术" class="headerlink" title="5. 群体决策技术"></a>5. 群体决策技术</h5><ul><li>对多个未来行动方案进行评估</li></ul><h5 id="6-问卷调查"><a href="#6-问卷调查" class="headerlink" title="6. 问卷调查"></a>6. 问卷调查</h5><ul><li>设计书面问题</li></ul><h5 id="7-观察"><a href="#7-观察" class="headerlink" title="7. 观察"></a>7. 观察</h5><ul><li>直接观察工作和实施流程</li></ul><h5 id="8-原型法"><a href="#8-原型法" class="headerlink" title="8. 原型法"></a>8. 原型法</h5><ul><li>指干系人或干系人群体的需求</li></ul><h5 id="9-标杆对照"><a href="#9-标杆对照" class="headerlink" title="9. 标杆对照"></a>9. 标杆对照</h5><ul><li>与其他类似组织比较，<strong>识别最佳实践</strong></li></ul><h5 id="10-系统交互图"><a href="#10-系统交互图" class="headerlink" title="10. 系统交互图"></a>10. 系统交互图</h5><ul><li>可视化描述，系统与参与者之间的交互</li></ul><h5 id="11-文件分析"><a href="#11-文件分析" class="headerlink" title="11. 文件分析"></a>11. 文件分析</h5><ul><li>分析文档，挖掘需求</li></ul><h4 id="4）输出-6"><a href="#4）输出-6" class="headerlink" title="4）输出"></a>4）输出</h4><h5 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h5><h5 id="2-需求跟踪矩阵"><a href="#2-需求跟踪矩阵" class="headerlink" title="2. 需求跟踪矩阵"></a>2. 需求跟踪矩阵</h5><h4 id="5）需求文件"><a href="#5）需求文件" class="headerlink" title="5）需求文件"></a>5）需求文件</h4><h5 id="1-定义-14"><a href="#1-定义-14" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>描述各种单一需求将如何满足与项目相关的业务需求</li></ul><h5 id="2-内容-2"><a href="#2-内容-2" class="headerlink" title="2. 内容"></a>2. 内容</h5><ul><li>业务需求</li><li>干系人需求</li><li>解决方案需求</li><li>项目需求</li><li>过渡需求</li><li>与需求相关的假设条件、依赖关系和制约因素</li></ul><h4 id="6）需求管理"><a href="#6）需求管理" class="headerlink" title="6）需求管理"></a>6）需求管理</h4><h5 id="1-定义-15"><a href="#1-定义-15" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>在产品开发过程中维持需求一致性和精确性的所有活动</li></ul><h5 id="2-内容-3"><a href="#2-内容-3" class="headerlink" title="2. 内容"></a>2. 内容</h5><ul><li>控制需求基线，保持项目计划与需求一致</li><li>控制单个需求和需求文档的版本情况</li><li>管理需求和联系链之间的联系</li><li>管理单个需求和项目其他可交付物之间的依赖关系</li><li>跟踪基线中需求的状态</li></ul><h5 id="3-特征"><a href="#3-特征" class="headerlink" title="3. 特征"></a>3. 特征</h5><ul><li>可跟踪性（双向可跟踪）</li><li><strong>可验证性</strong>（基本特性）</li></ul><h4 id="7）需求跟踪"><a href="#7）需求跟踪" class="headerlink" title="7）需求跟踪"></a>7）需求跟踪</h4><h5 id="1-定义-16"><a href="#1-定义-16" class="headerlink" title="1. 定义"></a>1. 定义</h5><ul><li>需求跟踪就是将单个需求和其他元素之间的依赖关系和逻辑联系建立跟踪，这些元素包括各种类型的需求、、业务规则、系统组件以及帮助文件等</li></ul><h5 id="2-双向跟踪"><a href="#2-双向跟踪" class="headerlink" title="2. 双向跟踪"></a>2. 双向跟踪</h5><ul><li></li></ul><h3 id="4、定义范围"><a href="#4、定义范围" class="headerlink" title="4、定义范围"></a>4、定义范围</h3><blockquote><p>制订项目范围说明书</p></blockquote><h4 id="1）基础知识-3"><a href="#1）基础知识-3" class="headerlink" title="1）基础知识"></a>1）基础知识</h4><h4 id="2）输入-7"><a href="#2）输入-7" class="headerlink" title="2）输入"></a>2）输入</h4><h4 id="3）工具和技术-7"><a href="#3）工具和技术-7" class="headerlink" title="3）工具和技术"></a>3）工具和技术</h4><h4 id="4）输出-7"><a href="#4）输出-7" class="headerlink" title="4）输出"></a>4）输出</h4><h3 id="5、创建工作分解结构"><a href="#5、创建工作分解结构" class="headerlink" title="5、创建工作分解结构"></a>5、创建工作分解结构</h3><blockquote><p>将项目范围分解成较小的、更容易管理的单元</p></blockquote><h3 id="6、确认范围"><a href="#6、确认范围" class="headerlink" title="6、确认范围"></a>6、确认范围</h3><blockquote><p>正式验收项目已完成的可交付成果</p></blockquote><h3 id="7、控制范围"><a href="#7、控制范围" class="headerlink" title="7、控制范围"></a>7、控制范围</h3><blockquote><p>监督项目和产品的范围状态、管理范围基准变更</p></blockquote><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><h3 id="1、判断题"><a href="#1、判断题" class="headerlink" title="1、判断题"></a>1、判断题</h3><h4 id="1）项目章程由项目经理发布"><a href="#1）项目章程由项目经理发布" class="headerlink" title="1）项目章程由项目经理发布"></a>1）项目章程由项目经理发布</h4><blockquote><p>错，项目章程一般由项目发起人发布，项目发起人是项目组成员外的其他人</p></blockquote><h4 id="2）项目启动会由项目经理组织，项目开工会由发起人组织"><a href="#2）项目启动会由项目经理组织，项目开工会由发起人组织" class="headerlink" title="2）项目启动会由项目经理组织，项目开工会由发起人组织"></a>2）项目启动会由项目经理组织，项目开工会由发起人组织</h4><blockquote><p>错，项目启动会一般由项目发起人组织，表示项目正式启动；项目开工会由项目经理组织，安排具体计划</p></blockquote><h4 id="3）项目经理不应该进入CCB"><a href="#3）项目经理不应该进入CCB" class="headerlink" title="3）项目经理不应该进入CCB"></a>3）项目经理不应该进入CCB</h4><blockquote><p>错</p></blockquote><h4 id="4）所有的变更，均应该由-CCB-审批"><a href="#4）所有的变更，均应该由-CCB-审批" class="headerlink" title="4）所有的变更，均应该由 CCB 审批"></a>4）所有的变更，均应该由 CCB 审批</h4><blockquote><p>错</p></blockquote><h4 id="5）项目收尾包括管理收尾-行政收尾"><a href="#5）项目收尾包括管理收尾-行政收尾" class="headerlink" title="5）项目收尾包括管理收尾 + 行政收尾"></a>5）项目收尾包括管理收尾 + 行政收尾</h4><blockquote><p>错，项目收尾包括合同工收尾和行政收尾（管理收尾）</p></blockquote><h3 id="2、问答题"><a href="#2、问答题" class="headerlink" title="2、问答题"></a>2、问答题</h3><h4 id="1）项目章程包括哪些内容？"><a href="#1）项目章程包括哪些内容？" class="headerlink" title="1）项目章程包括哪些内容？"></a>1）项目章程包括哪些内容？</h4><ul><li><p>项目目的或批准项目的原因（项目从哪来）</p></li><li><p>可测量的项目目标和相关的成功标准（项目到哪去）</p></li><li><p>概括性的项目描述（初步的项目范围）</p></li><li><p>项目的总体要求（初步的项目质量）</p></li><li><p>项目的主要风险（主要的项目风险）</p></li><li><p>总体里程碑进度计划（初步的项目进度）</p></li><li><p>总体预算（初步的项目投资）</p></li><li><p>项目审批要求（如何收尾，项目成功的评判标准、由谁评审项目成功、由谁签署项目结束）</p></li><li><p>委派项目经理并为其授权（委任）</p></li><li><p>项目相关干系人的姓名和职权（干系人）</p></li></ul><h4 id="2）项目范围说明书包括哪些内容？"><a href="#2）项目范围说明书包括哪些内容？" class="headerlink" title="2）项目范围说明书包括哪些内容？"></a>2）项目范围说明书包括哪些内容？</h4><h4 id="3）范围基准包括哪些内容？"><a href="#3）范围基准包括哪些内容？" class="headerlink" title="3）范围基准包括哪些内容？"></a>3）范围基准包括哪些内容？</h4><h2 id="四、错题回顾"><a href="#四、错题回顾" class="headerlink" title="四、错题回顾"></a>四、错题回顾</h2><h3 id="1、整体管理"><a href="#1、整体管理" class="headerlink" title="1、整体管理"></a>1、整体管理</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913232407692.png" alt="image-20210913232407692"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210913232504410.png" alt="image-20210913232504410"></p><h3 id="2、范围管理"><a href="#2、范围管理" class="headerlink" title="2、范围管理"></a>2、范围管理</h3>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、信息系统基础</title>
    <link href="/2021/08/30/%E7%AC%AC1%E7%AB%A0%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/08/30/%E7%AC%AC1%E7%AB%A0%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、信息系统基础"><a href="#第1章、信息系统基础" class="headerlink" title="第1章、信息系统基础"></a>第1章、信息系统基础</h1><span id="more"></span><h2 id="一、信息系统综合知识"><a href="#一、信息系统综合知识" class="headerlink" title="一、信息系统综合知识"></a>一、信息系统综合知识</h2><h3 id="1、信息的基本概念"><a href="#1、信息的基本概念" class="headerlink" title="1、信息的基本概念"></a>1、信息的基本概念</h3><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/30/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%80%9A%E8%BF%87-http-%E8%B0%83%E7%94%A8-k8s-api/"/>
    <url>/2021/08/30/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%80%9A%E8%BF%87-http-%E8%B0%83%E7%94%A8-k8s-api/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、通过-http-调用-k8s-api"><a href="#第1章、通过-http-调用-k8s-api" class="headerlink" title="第1章、通过 http 调用 k8s api"></a>第1章、通过 http 调用 k8s api</h1><span id="more"></span><h2 id="一、K8S-API-认证概述"><a href="#一、K8S-API-认证概述" class="headerlink" title="一、K8S API 认证概述"></a>一、K8S API 认证概述</h2><p>在Kubernetes集群中，Kubernetes 的 API Server 提供了对 K8S 各类资源的增删改查以及 watch 的 Http Rest 接口。API Server是集群管理API的入口，也是整个系统的数据总线和数据中心。它由运行在Master节点上的一个名为 <code>kube-apiserver</code> 的进程提供的服务。</p><p>用户可以通过kubectl、客户端库、http rest，User 或者 ServiceAccount 的形式访问 API Server，但是无论是哪种形式，只有被授权了才能访问这是不变的。当一个请求到达API时， 往往要经过几个阶段的安全控制，在一个典型的应用集群中，API Server通常会使用自签名的CA证书提供HTTPS服务，同时开启认证与授权等安全机制。</p><p>通常，在Kubernetes集群搭建之后，除了使用官方的 kubectl 工具与API Server进行交互外，我们也可以通过 K8S 提供的各语言的 client 进行交互，甚至还可以使用Postman或者curl，有些时候直接使用curl 会有更好的效果。</p><p>当然，上面我们简单的说了一下 K8S 的 API 存在鉴权机制，所以与API Server交互之前，通常需要首先创建一个有正确权限的ServiceAccount，这个 ServiceAccount 通过 ClusterRole/Role、ClusterRoleBinding/RoleBinding 等给其赋予相关资源的操作权限， 而Service Account 对应的 Token 则用于API Server进行基本的认证。与API Server的交互是基于 TLS 安全加密的，所以请求的时候还需要自签名的证书，当然也可以非安全方式连接API Server， 但是不推荐这么做。</p><p>具体的 K8S API 访问控制机制参考: <a href="http://docs.kubernetes.org.cn/27.html">Kubernetes API 访问控制</a></p><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="1、准备-API-调用使用的-ServiceAccount（可选）"><a href="#1、准备-API-调用使用的-ServiceAccount（可选）" class="headerlink" title="1、准备 API 调用使用的 ServiceAccount（可选）"></a>1、准备 API 调用使用的 ServiceAccount（可选）</h3><h4 id="1）创建-ServiceAccount"><a href="#1）创建-ServiceAccount" class="headerlink" title="1）创建 ServiceAccount"></a>1）创建 ServiceAccount</h4><blockquote><p>🚩实际上， 我们所有对于 K8S 资源的操作都需要由一个 “用户” 来进行，这个 “用户” 就是 ServiceAccount，它相当于传统操作系统中的系统用户概念，这样的概念广泛运用于各类程序以及操作系统中。并且，相较于操作系统更加便捷的是，当我们在创建一个 ServiceAccount 的时候，K8S 就会自动生成一个与其关联的 secret，而无需自行再去创建。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create sa apiviewer<br></code></pre></td></tr></table></figure><h4 id="2）创建-RoleBinding"><a href="#2）创建-RoleBinding" class="headerlink" title="2）创建 RoleBinding"></a>2）创建 RoleBinding</h4><blockquote><p>🚩 我们可以重新创建一个 ClusterRole，进行 RBAC 授权，也可以使用 K8S 集群原本已存在的 ClusterRole，这样可以免去较为复杂的资源授权规则，通过 <code>kubectl get clusterrole</code> 可以查看集群中已经存在的 ClusterRole，由于我们需要对API 进行全方位的操作，所以这里使用权限较高的 <code>cluster-admin</code> 来于 ServiceAccount 绑定（这会存在一定的安全风险，正式环境使用建议重新创建 ClusterRole 并最小化授权）。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create rolebinding apiadmin --clusterrole cluster-admin --serviceaccount default:apiviewer<br></code></pre></td></tr></table></figure><h3 id="2、获取Bearer-Token、Certificate、API-Server-URL"><a href="#2、获取Bearer-Token、Certificate、API-Server-URL" class="headerlink" title="2、获取Bearer Token、Certificate、API Server URL"></a>2、获取Bearer Token、Certificate、API Server URL</h3><h4 id="1）获取-ServiceAccount-的-Secret"><a href="#1）获取-ServiceAccount-的-Secret" class="headerlink" title="1）获取 ServiceAccount 的 Secret"></a>1）获取 ServiceAccount 的 Secret</h4><blockquote><p>🌈 我们可以使用 <code>jsonpath</code> 的方式截取对应 json 结构体内的数据，其使用方法和 jq 命令较为类似，但是前提是需要预先知道 json 的具体结构，</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SECRET=$(kubectl get serviceaccount apiviewer -ojsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)<br></code></pre></td></tr></table></figure><h4 id="2）获取-Bearer-Token"><a href="#2）获取-Bearer-Token" class="headerlink" title="2）获取 Bearer Token"></a>2）获取 Bearer Token</h4><blockquote><p>⚠️ <strong>注意:</strong></p><p>Token 是经过 base64 编码加密过的，需要用 base64 反编码处理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">TOKEN=$(kubectl get secret $&#123;SECRET&#125; -ojsonpath=&#x27;&#123;.data.token&#125;&#x27;|base64 -d)<br></code></pre></td></tr></table></figure><h4 id="3）获取-Secret-使用-CA-证书"><a href="#3）获取-Secret-使用-CA-证书" class="headerlink" title="3）获取 Secret 使用 CA 证书"></a>3）获取 Secret 使用 CA 证书</h4><blockquote><p>🚩 ServiceAccount 的 Secret 都是由 kube-apiserver 的 ca 证书签发的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get secret $&#123;SECRET&#125; -o jsonpath=&quot;&#123;.data[&#x27;ca\.crt&#x27;]&#125;&quot; | base64 -d &gt; /tmp/ca.crt<br></code></pre></td></tr></table></figure><h4 id="4）获取-API-Server-URL"><a href="#4）获取-API-Server-URL" class="headerlink" title="4）获取 API Server URL"></a>4）获取 API Server URL</h4><blockquote><p>🚩 如果API Server部署在多台Master上，只需访问其中一台即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">APISERVER=https://$(kubectl -n default get endpoints kubernetes --no-headers | awk -F &quot;[, ]+&quot; &#x27;&#123;print $2&#125;&#x27;)<br></code></pre></td></tr></table></figure><h2 id="三、使用-Token-通过-HTTP-方式访问-K8S-集群"><a href="#三、使用-Token-通过-HTTP-方式访问-K8S-集群" class="headerlink" title="三、使用 Token 通过 HTTP 方式访问 K8S 集群"></a>三、使用 Token 通过 HTTP 方式访问 K8S 集群</h2><h3 id="1、获取-K8S-的版本信息-—-version"><a href="#1、获取-K8S-的版本信息-—-version" class="headerlink" title="1、获取 K8S 的版本信息 —/version"></a>1、获取 K8S 的版本信息 —<code>/version</code></h3><blockquote><p>🌈 <code>jq</code> 是一个 shell 命令行解析 json 结构体的神器，Linux 系统使用对应的包管理器就可以直接安装（brew、yum、apt-get）</p><p>使用 <code>-r</code> 参数，返回字符串，不使用的则返回的是 json 结构体的一部分。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s  $APISERVER/version --header &quot;Authorization: Bearer $TOKEN&quot; --cacert /tmp/ca.crt | jq -r &#x27;.gitVersion&#x27;<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830173521373.png" alt="image-20210830173521373"></p><h3 id="2、获取所有-pod-的名称-—-api-v1-namespaces-NAMESPACE-pods"><a href="#2、获取所有-pod-的名称-—-api-v1-namespaces-NAMESPACE-pods" class="headerlink" title="2、获取所有 pod 的名称 — /api/v1/namespaces/${NAMESPACE}/pods"></a>2、获取所有 pod 的名称 — <code>/api/v1/namespaces/$&#123;NAMESPACE&#125;/pods</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s  $APISERVER/api/v1/namespaces/default/pods/ --header &quot;Authorization: Bearer $TOKEN&quot; --cacert /tmp/ca.crt | jq &#x27;.items[].metadata.name&#x27;<br></code></pre></td></tr></table></figure><p>正常的 json 返回，类似下图，但是由于当前集群的 default 命名空间下并没 pod 资源，所以实际返回值什么也没有。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830181237353.png" alt="image-20210830181237353"></p><h3 id="3、问题记录-调用-K8S-API-返回-cannot-list-resource-报错"><a href="#3、问题记录-调用-K8S-API-返回-cannot-list-resource-报错" class="headerlink" title="3、问题记录: 调用 K8S API 返回 cannot list resource 报错"></a>3、问题记录: 调用 K8S API 返回 cannot list resource 报错</h3><h4 id="1）报错信息类似下图"><a href="#1）报错信息类似下图" class="headerlink" title="1）报错信息类似下图:"></a>1）报错信息类似下图:</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830181304648.png" alt="image-20210830181304648"></p><h4 id="2）问题原因"><a href="#2）问题原因" class="headerlink" title="2）问题原因:"></a>2）问题原因:</h4><p>这是典型的RBAC权限控制后的结果，也就说我们的 <code>apiviewer</code> 并没有操作 kube-system 命名空间下资源的权限，因为 ServiceAccount 是根据 namespace 隔离的，虽然 <code>cluster-admin</code> 具有较高的权限，但是我们的 <code>apiviewer</code> 却只有 default 命名空间的操作权限。而不具备其他 namespace 的权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl describe rolebinding apiadmin<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830175553457.png" alt="image-20210830175553457"></p><h4 id="3）解决方案"><a href="#3）解决方案" class="headerlink" title="3）解决方案:"></a>3）解决方案:</h4><p>既然我们知道了问题的原因，解决起来就比较简单了，如果我们要通过 API 操作 <code>kube-system</code> 命名空间下的资源，那么只要重新创建一个具有该命名空间操作权限的 ServiceAccount 就可以了。其他命名空间也是同理的，甚至在不同的命名空间下我们可以用同一个 ServiceAccount 的名称。</p><p>我们在文章开头说过，在 K8S 中对 API 资源的权限划分主要可用通过 <code>Role</code> 或者 <code>ClusterRole</code> 来绑定 <code>ServiceAccount</code>。上面我们使用里系统默认的 ClusterRole 进行了 RBAC 授权，这里我们通过从新创建 Role-RoleBinding 的方式来解决这个问题。</p><h5 id="1-创建-RBAC-授权规则"><a href="#1-创建-RBAC-授权规则" class="headerlink" title="1. 创建 RBAC 授权规则"></a>1. 创建 RBAC 授权规则</h5><p>具体的 yaml 声明文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-role</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limitranges</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apps</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">batch</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cronjobs</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jobs</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">autoscaling</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">horizontalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authentication.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tokenreviews</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authorization.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">subjectaccessreviews</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">policy</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">poddisruptionbudgets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificates.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificatesigningrequests</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">storage.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">storageclasses</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">volumeattachments</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">admissionregistration.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mutatingwebhookconfigurations</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">validatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networking.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networkpolicies</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-crb</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subjects:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-role</span><br>    <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong> 这里处于后期学习目的，授权是过大的，大多数权限对于非系统层面的命名空间来说并不需要，实际情况下，建议按需最小化授权。</p></blockquote><h5 id="2-获取必要的信息"><a href="#2-获取必要的信息" class="headerlink" title="2. 获取必要的信息"></a>2. 获取必要的信息</h5><p>按照上面的步骤，再是获取我们新创建的 ServiceAccount 的相关信息（注意 namespace 的区别）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">SECRET=$(kubectl get serviceaccount apiadmin -n kube-system -ojsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)<br>TOKEN=$(kubectl get secret $&#123;SECRET&#125; -n kube-system -ojsonpath=&#x27;&#123;.data.token&#125;&#x27;|base64 -d)<br>kubectl get secret $&#123;SECRET&#125; -n kube-system -o jsonpath=&quot;&#123;.data[&#x27;ca\.crt&#x27;]&#125;&quot; | base64 -d &gt; /tmp/ca.crt<br>APISERVER=https://$(kubectl -n default get endpoints kubernetes --no-headers | awk -F &quot;[, ]+&quot; &#x27;&#123;print $2&#125;&#x27;)<br></code></pre></td></tr></table></figure><h5 id="3-再次访问验证"><a href="#3-再次访问验证" class="headerlink" title="3. 再次访问验证"></a>3. 再次访问验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s $APISERVER/api/v1/namespaces/kube-system/pods/ --header &quot;Authorization: Bearer $TOKEN&quot; --cacert /tmp/ca.crt | jq -r &#x27;.items[].metadata.name&#x27;<br></code></pre></td></tr></table></figure><p>可以发现正常返回了 kube-system 下的 pod 列表，如下图：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831104138845.png" alt="image-20210831104138845"></p><h2 id="四、拓展知识：RBAC-权限审计"><a href="#四、拓展知识：RBAC-权限审计" class="headerlink" title="四、拓展知识：RBAC 权限审计"></a>四、拓展知识：RBAC 权限审计</h2><blockquote><p>🚩 </p><p>我们在上文中反复强调了授权要按照最小化原则来做，因为权限越大，责任也越大，权限的泛滥，可能会对整个体统导致不可挽回的后果，比如说一个账号不小心泄露，如果该账号的权限较大，那么很可能该账号所能调配的资源都会受到威胁。因此，授权时安装最小化原则这很重要，当然同样重要的还有权限的审计。</p><p>事实上，K8S 官方的 Kubectl 工具中已经为用户提供了这样的审计命令 —— <code>Kubectl Can-I</code>，可以通过帮助菜单大概了解其用法：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831111150021.png" alt="image-20210831111150021"></p></blockquote><h3 id="1、基础使用"><a href="#1、基础使用" class="headerlink" title="1、基础使用"></a>1、基础使用</h3><h4 id="1）查看你是否拥有-get-pod-的权限"><a href="#1）查看你是否拥有-get-pod-的权限" class="headerlink" title="1）查看你是否拥有 get pod 的权限"></a>1）查看你是否拥有 get pod 的权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i get pods<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831113515080.png" alt="image-20210831113515080"></p><h4 id="2）查看你是否拥有-cluster-admin-的权限"><a href="#2）查看你是否拥有-cluster-admin-的权限" class="headerlink" title="2）查看你是否拥有 cluster-admin 的权限"></a>2）查看你是否拥有 cluster-admin 的权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i &quot;*&quot; &quot;*&quot;<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831113615960.png" alt="image-20210831113615960"></p><h4 id="3）列出你在某个-namesapce-中拥有的所有权限"><a href="#3）列出你在某个-namesapce-中拥有的所有权限" class="headerlink" title="3）列出你在某个 namesapce 中拥有的所有权限"></a>3）列出你在某个 namesapce 中拥有的所有权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i --list --namespace=kube-system<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831113700788.png" alt="image-20210831113700788"></p><h3 id="2、结合上面内容练习一下："><a href="#2、结合上面内容练习一下：" class="headerlink" title="2、结合上面内容练习一下："></a>2、结合上面内容练习一下：</h3><h4 id="1）default-下-的-apiviewer"><a href="#1）default-下-的-apiviewer" class="headerlink" title="1）default 下 的 apiviewer"></a>1）default 下 的 apiviewer</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i list pods --as=system:serviceaccount:default:apiviewer -n kube-system <br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831112734259.png" alt="image-20210831112734259"></p><h4 id="2）kube-system-下的-apiadmin"><a href="#2）kube-system-下的-apiadmin" class="headerlink" title="2）kube-system 下的 apiadmin"></a>2）kube-system 下的 apiadmin</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i list pods --as=system:serviceaccount:kube-system:apiadmin -n kube-system <br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210831112746463.png" alt="image-20210831112746463"></p><h2 id="五、思考与练习"><a href="#五、思考与练习" class="headerlink" title="五、思考与练习"></a>五、思考与练习</h2><h3 id="如果我这边需要新建一个命名空间，并期望通过-HTTP-REST-API-对该命名空间的资源进行操作，你会了吗？"><a href="#如果我这边需要新建一个命名空间，并期望通过-HTTP-REST-API-对该命名空间的资源进行操作，你会了吗？" class="headerlink" title="如果我这边需要新建一个命名空间，并期望通过 HTTP REST API 对该命名空间的资源进行操作，你会了吗？"></a>如果我这边需要新建一个命名空间，并期望通过 HTTP REST API 对该命名空间的资源进行操作，你会了吗？</h3><h4 id="思路提示"><a href="#思路提示" class="headerlink" title="思路提示:"></a>思路提示:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang K8S API 快速入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯蓝鲸（Go版） 快速入门手册</title>
    <link href="/2021/08/30/%E8%85%BE%E8%AE%AF%E8%93%9D%E9%B2%B8%EF%BC%88Go%E7%89%88%EF%BC%89-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/08/30/%E8%85%BE%E8%AE%AF%E8%93%9D%E9%B2%B8%EF%BC%88Go%E7%89%88%EF%BC%89-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="腾讯蓝鲸（Go版）-快速入门手册"><a href="#腾讯蓝鲸（Go版）-快速入门手册" class="headerlink" title="腾讯蓝鲸（Go版） 快速入门手册"></a>腾讯蓝鲸（Go版） 快速入门手册</h1><span id="more"></span><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/bk-cmdb.png" alt="bk-cmdb"></p><p><a href="https://bk.tencent.com/">蓝鲸官网</a></p><p><a href="https://github.com/Tencent/bk-cmdb">官方github</a></p><h3 id="1、蓝鲸简介"><a href="#1、蓝鲸简介" class="headerlink" title="1、蓝鲸简介"></a>1、蓝鲸简介</h3><p>蓝鲸配置平台（蓝鲸CMDB）是一个面向资产及应用的企业级配置管理平台。</p><p>蓝鲸配置平台提供了全新自定义模型管理，用户不仅可以方便地实现内置模型属性的拓展，同时也能够根据不同的企业需求随时新增模型和关联关系，把网络、中间件、虚拟资源等纳入到CMDB的管理中。除此之外还增加了更多符合场景需要的新功能：机器数据快照、数据自动发现、变更事件主动推送、更加精细的权限管理、可拓展的业务拓扑等功能。</p><p>在技术构建上，架构的核心聚焦于资源，我们把CMDB管理的原子资源分为主机、进程和通用对象三种类型，并构建了对这些资源的原子操作层。在这些原子操作之上，我们构建了更贴近用户操作的场景层，场景层通过对不同资源的组合操作来完成用户的请求。</p><h3 id="2、具体功能"><a href="#2、具体功能" class="headerlink" title="2、具体功能"></a>2、具体功能</h3><ul><li>拓扑化的主机管理：主机基础属性、主机快照数据、主机归属关系管理</li><li>组织架构管理：可扩展的基于业务的组织架构管理</li><li>模型管理：既能管理业务、集群、主机等内置模型，也能自定义模型</li><li>进程管理：基于模块的主机进程管理</li><li>事件注册与推送：提供基于回调方式的事件注册与推送</li><li>通用权限管理：灵活的基于用户组的权限管理</li><li>操作审计：用户操作行为的审计与回溯</li></ul><h3 id="3、架构设计"><a href="#3、架构设计" class="headerlink" title="3、架构设计"></a>3、架构设计</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826102802263.png" alt="Go蓝鲸架构设计"></p><h3 id="4、服务进程清单"><a href="#4、服务进程清单" class="headerlink" title="4、服务进程清单"></a>4、服务进程清单</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>cmdb_webserver</td><td>web server 服务子目录</td></tr><tr><td>cmdb_apiserver</td><td>场景层服务，api 服务</td></tr><tr><td>cmdb_coreservice</td><td>资源管理层，提供原子接口服务</td></tr><tr><td>cmdb_adminserver</td><td>负责系统数据的初始化以及配置管理工作</td></tr><tr><td>cmdb_authserver</td><td>鉴权认证服务</td></tr><tr><td>cmdb_cloudserver</td><td>云数据管理服务</td></tr><tr><td>cmdb_datacollection</td><td>场景层服务，数据采集服务</td></tr><tr><td>cmdb_eventserver</td><td>场景层服务，事件推送服务</td></tr><tr><td>cmdb_hostserver</td><td>场景层服务，主机数据维护</td></tr><tr><td>cmdb_operationserver</td><td>场景层服务，提供与运营统计相关功能服务</td></tr><tr><td>cmdb_procserver</td><td>场景层服务，负责进程数据的维护</td></tr><tr><td>cmdb_synchronizeserver</td><td>场景层服务，数据同步服务</td></tr><tr><td>cmdb_toposerver</td><td>场景层服务，负责模型的定义以及主机、业务、模块及进程等实例数据的维护</td></tr><tr><td>cmdb_taskserver</td><td>场景层服务，异步任务管理服务</td></tr></tbody></table><h3 id="5、代码结构"><a href="#5、代码结构" class="headerlink" title="5、代码结构"></a>5、代码结构</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826103025159.png" alt="Go蓝鲸代码结构"></p><h4 id="目录结构说明："><a href="#目录结构说明：" class="headerlink" title="目录结构说明："></a>目录结构说明：</h4><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>web-server</td><td>web层服务后端，基于 golang 的 gin框架</td></tr><tr><td>ui</td><td>web层服务前端，基于 vue.js</td></tr><tr><td>test</td><td>系统服务的测试用例，基于 golang 原生</td></tr><tr><td>tools</td><td>客户端管理工具（基于 golang）以及辅助脚本工具（基于 Javascript）</td></tr><tr><td>apiserver</td><td>接入层 api 服务层，基于 golang 的 go-restful 框架</td></tr><tr><td>scene_server</td><td>接入层 场景微服务层，基于 golang 的 go-restful 框架</td></tr><tr><td>source_controller</td><td>接入层 资源调度层，基于 golang 的 go-restful 框架，提供原子接口服务</td></tr><tr><td>common</td><td>项目公共依赖库，基于 golang 原生</td></tr><tr><td>storage</td><td>存储接入封装，基于 golang 原生</td></tr><tr><td>thirdpartyclient</td><td>第三方客户端接入封装，基于 golang 原生</td></tr></tbody></table><h2 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h2><h3 id="1、编译环境准备"><a href="#1、编译环境准备" class="headerlink" title="1、编译环境准备"></a>1、编译环境准备</h3><h4 id="1）环境需求"><a href="#1）环境需求" class="headerlink" title="1）环境需求"></a>1）环境需求</h4><ul><li>golang &gt;= 1.8</li><li>python &gt;= 2.7.5</li><li>nodejs &gt;= 4.0.0（编译过程中需要可以连公网下载依赖包）</li></ul><h4 id="2）安装-Go"><a href="#2）安装-Go" class="headerlink" title="2）安装 Go"></a>2）安装 Go</h4><p>推荐使用 g 进行 Go 的版本管理，参考如下文档</p><p><a href="https://tareya.github.io/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/#golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g">golang 多版本管理工具 — g</a></p><h4 id="3）安装-node-js"><a href="#3）安装-node-js" class="headerlink" title="3）安装 node.js"></a>3）安装 node.js</h4><h5 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h5><p><a href="https://nodejs.org/zh-cn/download/">官网下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://nodejs.org/dist/v14.17.5/node-v14.17.5-linux-x64.tar.xz\<br></code></pre></td></tr></table></figure><h5 id="2-解压并设置路径"><a href="#2-解压并设置路径" class="headerlink" title="2. 解压并设置路径"></a>2. 解压并设置路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf node-v14.17.5-linux-x64.tar.xz -C /data/applications/ &amp;&amp; \<br>cd /data/applications &amp;&amp; \<br>ln -s node-v14.17.5-linux-x64 node &amp;&amp; \<br>ln -s /data/applications/node/bin/* /usr/local/bin/<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v <br>npm -v<br></code></pre></td></tr></table></figure><h5 id="3-安装-cnpm"><a href="#3-安装-cnpm" class="headerlink" title="3. 安装 cnpm"></a>3. 安装 cnpm</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825165451698.png" alt="image-20210825165451698"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /data/applications/node/bin/cnpm /usr/local/bin/<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm -v<br></code></pre></td></tr></table></figure><h3 id="2、源码编译"><a href="#2、源码编译" class="headerlink" title="2、源码编译"></a>2、源码编译</h3><h4 id="1）源码下载"><a href="#1）源码下载" class="headerlink" title="1）源码下载"></a>1）源码下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/go/src &amp;&amp; \<br>export GOPATH=~/go &amp;&amp; \<br>cd $GOPATH/src &amp;&amp; \<br>git clone git@github.com:Tareya/configcenter.git<br></code></pre></td></tr></table></figure><h4 id="2）整体编译"><a href="#2）整体编译" class="headerlink" title="2）整体编译"></a>2）整体编译</h4><blockquote><p>🚩 <strong>三种编译模式</strong></p><p>官方提供的 Makefile 提供了多种编译模式</p><p>1⃣️ <strong>指定版本号的编译</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">VERSION=xxxx make<br></code></pre></td></tr></table></figure><p>2⃣️ <strong>本地代码分支编译</strong></p><p>Makefile 默认为支持 darwin 平台，且 默认情况是前后端一起编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make <br></code></pre></td></tr></table></figure><p>3⃣️ <strong>编译参数</strong></p><p>支持 linux 平台编译，需要指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make linux<br></code></pre></td></tr></table></figure><p>使用 cnpm 代替 npm 编译前端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make NPM=cnpm<br></code></pre></td></tr></table></figure></blockquote><h5 id="支持-Linux-平台编译"><a href="#支持-Linux-平台编译" class="headerlink" title="支持 Linux 平台编译"></a>支持 Linux 平台编译</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $GOPATH/src/configcenter/src &amp;&amp; \<br>export GOPATH=~/go &amp;&amp; \<br>make linux NPM=cnpm<br></code></pre></td></tr></table></figure><h5 id="问题记录-解决环境变量识别问题"><a href="#问题记录-解决环境变量识别问题" class="headerlink" title="问题记录: 解决环境变量识别问题"></a>问题记录: 解决环境变量识别问题</h5><h6 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h6><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825172030664.png" alt="image-20210825172030664"></p><h6 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因:"></a>问题原因:</h6><p>在官方提供的 Makefile 中，路径是写死的，所以如果路径不一致，会无法读取到对应的文件</p><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GOPATH=~/go<br></code></pre></td></tr></table></figure><h4 id="3）后端编译（可选）"><a href="#3）后端编译（可选）" class="headerlink" title="3）后端编译（可选）"></a>3）后端编译（可选）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make server <br></code></pre></td></tr></table></figure><h4 id="4）前端编译（可选）"><a href="#4）前端编译（可选）" class="headerlink" title="4）前端编译（可选）"></a>4）前端编译（可选）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make ui NPM=cnpm<br></code></pre></td></tr></table></figure><h5 id="问题记录-解决node编译oom问题"><a href="#问题记录-解决node编译oom问题" class="headerlink" title="问题记录: 解决node编译oom问题"></a>问题记录: 解决node编译oom问题</h5><h6 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h6><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825172156810.png" alt="image-20210825172156810"></p><h6 id="问题原因-1"><a href="#问题原因-1" class="headerlink" title="问题原因:"></a>问题原因:</h6><p>该问题是由于前端代码问题导致的 node 编译 OOM ，旧版本暂时没有此类问题，故推荐使用 release <a href="https://github.com/Tencent/bk-cmdb/releases/tag/release-v3.9.5">v3.9.5</a> 的源码</p><p><a href="https://github.com/Tencent/bk-cmdb/issues/5341">官方 github issue 记录</a></p><p><a href="https://tareya.github.io/2021/08/26/node-%E7%BC%96%E8%AF%91-JavaScript-heap-out-of-memory-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">类似问题解决方法</a></p><h3 id="3、打包镜像"><a href="#3、打包镜像" class="headerlink" title="3、打包镜像"></a>3、打包镜像</h3><h4 id="1）打包前后端编译结果"><a href="#1）打包前后端编译结果" class="headerlink" title="1）打包前后端编译结果"></a>1）打包前后端编译结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make package<br></code></pre></td></tr></table></figure><p>归档包存放位置：<code>~/go/src/configcenter/src/bin/pub/cmdb.tar.gz</code></p><h4 id="2）镜像制作"><a href="#2）镜像制作" class="headerlink" title="2）镜像制作"></a>2）镜像制作</h4><p>解压cmdb.tar.gz，进入cmdb目录执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -i 参数后面配置的参数是基础镜像，基础镜像可以自己制作，也可以使用公共镜像。v</span><br>./image.sh -i &lt;base_image&gt;<br></code></pre></td></tr></table></figure><h2 id="三、部署"><a href="#三、部署" class="headerlink" title="三、部署"></a>三、部署</h2><h3 id="1、依赖的三方组件清单"><a href="#1、依赖的三方组件清单" class="headerlink" title="1、依赖的三方组件清单"></a>1、依赖的三方组件清单</h3><ul><li>ZooKeeper &gt;= 3.4.11</li><li>Redis &gt;= 3.2.11</li><li>MongoDB &gt;= 4.2</li><li>Elasticsearch &gt;= 7.0.0 (用于全文检索功能)</li><li>Monstache &gt;= 6.0.0 (用于全文检索功能)</li></ul><h3 id="2、Docker-部署-Zookeeper（单机）"><a href="#2、Docker-部署-Zookeeper（单机）" class="headerlink" title="2、Docker 部署 Zookeeper（单机）"></a>2、Docker 部署 Zookeeper（单机）</h3><p><a href="https://zookeeper.apache.org/">Zookeeper 官网地址</a></p><h4 id="1）环境准备"><a href="#1）环境准备" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-3-4-12-版本）"><a href="#1-拉取镜像-（官方推荐-3-4-12-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 3.4.12 版本）"></a>1. 拉取镜像 （官方推荐 3.4.12 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull zookeeper:3.4.12<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录"><a href="#2-创建持久化目录" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/zookeepr/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件"><a href="#2）编辑配置文件" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件"><a href="#1-新建配置文件" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/zookeepr/conf/zoo.cfg</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">clientPort=2181<br>dataDir=/data<br>dataLogDir=/datalog<br>tickTime=2000<br></code></pre></td></tr></table></figure><h5 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>clientPort</td><td>zookeeper 监听端口</td></tr><tr><td>dataDir</td><td>Zookeeper 保存数据的目录</td></tr><tr><td>dataLogDir</td><td>Zookeeper 保存日志的目录</td></tr><tr><td>tickTime</td><td>Zookeeper 服务之间或与客户端之间心跳检测的间隔时间</td></tr></tbody></table><h4 id="3）启动容器"><a href="#3）启动容器" class="headerlink" title="3）启动容器"></a>3）启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name zookeeper -p 2181:2181 -v /data/bk-cmdb/zookeepr/data:/data -v /data/bk-cmdb/zookeepr/log:/datalog -v /etc/localtime:/etc/localtime --restart=always zookeeper:3.4.12<br></code></pre></td></tr></table></figure><h3 id="3、部署-Redis"><a href="#3、部署-Redis" class="headerlink" title="3、部署 Redis"></a>3、部署 Redis</h3><h4 id="1）环境准备-1"><a href="#1）环境准备-1" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-3-2-11-版本）"><a href="#1-拉取镜像-（官方推荐-3-2-11-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 3.2.11 版本）"></a>1. 拉取镜像 （官方推荐 3.2.11 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis:3.2.11-alpine<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-1"><a href="#2-创建持久化目录-1" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/redis/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-1"><a href="#2）编辑配置文件-1" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-1"><a href="#1-新建配置文件-1" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/redis/conf/redis.conf</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">port 6379<br>bind 0.0.0.0<br>loglevel notice<br>logfile &quot;/tmp/redis.log&quot;<br><br>dbfilename dump.rdb<br>dir ./<br>save 900 1<br>stop-writes-on-bgsave-error yes<br>rdbcompression yes<br>rdbchecksum yes<br><br>daemonize no<br>protected-mode no<br>requirepass &#x27;PassWord@123&#x27;<br><br>maxmemory 1g<br>maxmemory-policy volatile-lru<br></code></pre></td></tr></table></figure><h5 id="2-参数说明-1"><a href="#2-参数说明-1" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>port</td><td>redis 监听端口</td></tr><tr><td>bind</td><td>redis 监听地址，由于容器启动，故使用 0.0.0.0</td></tr><tr><td>loglevel</td><td>日志级别</td></tr><tr><td>logfile</td><td>redis 日志文件保存路径</td></tr><tr><td>dbfilename</td><td>开启 rdb 持久化</td></tr><tr><td>dir</td><td>持久化文件保存路径</td></tr><tr><td>save</td><td>满足条件则刷入持久化文件</td></tr><tr><td>stop-writes-on-bgsave-error</td><td>后台save出错,前台要停止写操作</td></tr><tr><td>rdbcompression</td><td>是否对 rdb 持久化进行数据压缩</td></tr><tr><td>rdbchecksum</td><td>是否对 rdb 持久化进行数据校验</td></tr><tr><td>daemonize</td><td>是否以后台方式启动，容器启动选择 no</td></tr><tr><td>protected-mode</td><td>关闭保护模式，允许所有 IP 访问</td></tr><tr><td>requirepass</td><td>开启认证，设置认证密码</td></tr><tr><td>maxmemory</td><td>允许使用的最大内存</td></tr><tr><td>maxmemory-policy</td><td>内存到达最大值时，key 回收的机制</td></tr></tbody></table><h4 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">docker run -itd --name redis -p 6379:6379 -v /data/bk-cmdb/redis/conf/redis.conf:/etc/redis/redis.conf -v /data/bk-cmdb/redis/data:/data -v /data/bk-cmdb/redis/log:/tmp -v /etc/localtime:/etc/localtime --restart=always redis:3.2.11-alpine <br></code></pre></td></tr></table></figure><h3 id="4、部署-MongoDB"><a href="#4、部署-MongoDB" class="headerlink" title="4、部署 MongoDB"></a>4、部署 MongoDB</h3><h4 id="1）环境准备-2"><a href="#1）环境准备-2" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-4-2-8-版本）"><a href="#1-拉取镜像-（官方推荐-4-2-8-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 4.2.8 版本）"></a>1. 拉取镜像 （官方推荐 4.2.8 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mongo:4.2.8<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-2"><a href="#2-创建持久化目录-2" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/mongodb/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-2"><a href="#2）编辑配置文件-2" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-2"><a href="#1-新建配置文件-2" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/mongodb/conf/mongod.conf.orig</code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">dbPath:</span> <span class="hljs-string">/data/db</span><br>  <span class="hljs-attr">journal:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#  engine:</span><br><span class="hljs-comment">#  mmapv1:</span><br><span class="hljs-comment">#  wiredTiger:</span><br><br><span class="hljs-comment"># where to write logging data.</span><br><span class="hljs-comment">#systemLog:</span><br><span class="hljs-comment">#  destination: file</span><br><span class="hljs-comment">#  logAppend: true</span><br><span class="hljs-comment">#  path: /var/log/mongodb/mongod.log</span><br><br><span class="hljs-comment"># network interfaces</span><br><span class="hljs-attr">net:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">27017</span><br><span class="hljs-comment">#开启远程访问</span><br>  <span class="hljs-attr">bindIp:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><br><br><span class="hljs-comment"># how the process runs</span><br><span class="hljs-attr">processManagement:</span><br>  <span class="hljs-attr">timeZoneInfo:</span> <span class="hljs-string">/usr/share/zoneinfo</span><br><br><span class="hljs-attr">setParameter:</span><br>   <span class="hljs-attr">enableLocalhostAuthBypass:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment">#security:</span><br><span class="hljs-comment">#  authorization: enable</span><br>  <br><span class="hljs-comment">#operationProfiling:</span><br><span class="hljs-comment">#副本集配置内容。</span><br><span class="hljs-attr">replication:</span><br>  <span class="hljs-attr">replSetName:</span> <span class="hljs-string">es</span><br>  <span class="hljs-attr">oplogSizeMB:</span> <span class="hljs-number">10240</span><br></code></pre></td></tr></table></figure><h5 id="2-参数说明-2"><a href="#2-参数说明-2" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>storage.dbPath</td><td>mongodb数据文件保存路径</td></tr><tr><td>storage.journal.enabled</td><td>记录操作日志，防止数据丢失</td></tr><tr><td>systemLog.destination</td><td>日志输出目标，file 或 syslog; 不配置则标准输出（容器推荐）</td></tr><tr><td>net.port</td><td>监听端口</td></tr><tr><td>net.bindIp</td><td>监听IP地址</td></tr><tr><td>processManagement.timeZoneInfo</td><td>时区配置</td></tr><tr><td>security.authorization</td><td>开启 auth 认证</td></tr><tr><td>replication.replSetName</td><td>副本集配置，副本集名称</td></tr><tr><td>replication.oplogSizeMB</td><td>副本集配置，指定oplog的最大尺寸</td></tr><tr><td>enableLocalhostAuthBypass</td><td>限制第一个用户也受 auth 认证控制</td></tr></tbody></table><h4 id="3）启动容器-1"><a href="#3）启动容器-1" class="headerlink" title="3）启动容器"></a>3）启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name mongodb -p 27017:27017 -e &quot;TZ=Asia/Shanghai&quot; -v /data/bk-cmdb/mongodb/conf/mongod.conf.orig:/etc/mongod.conf.orig -v /data/bk-cmdb/mongodb/data:/data/db -v /etc/localtime:/etc/localtime --restart=always mongo:4.2.8 --config /etc/mongod.conf.orig<br></code></pre></td></tr></table></figure><h3 id="5、配置数据库"><a href="#5、配置数据库" class="headerlink" title="5、配置数据库"></a>5、配置数据库</h3><h4 id="1）创建管理用户"><a href="#1）创建管理用户" class="headerlink" title="1）创建管理用户"></a>1）创建管理用户</h4><h5 id="1-进入容器"><a href="#1-进入容器" class="headerlink" title="1. 进入容器"></a>1. 进入容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mongodb /bin/bash<br></code></pre></td></tr></table></figure><h5 id="2-连接-mongo"><a href="#2-连接-mongo" class="headerlink" title="2. 连接 mongo"></a>2. 连接 mongo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mongo<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826165034092.png" alt="image-20210826165034092"></p><blockquote><p>⚠️ <strong>注意:</strong> </p><p>在启动 mongo 容器中，我们注释掉了 auth 认证，这是为了创建管理用户，否则我们无法进行认证，但是这种情况会导致风险报警，所以在创建完管理用户后，要将认证配置打开。</p></blockquote><h5 id="3-创建管理员用户"><a href="#3-创建管理员用户" class="headerlink" title="3. 创建管理员用户"></a>3. 创建管理员用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接 mongo 后，执行</span><br>use admin<br>db.createUser(&#123;user:&#x27;admin&#x27;, pwd:&#x27;admin&#x27;, roles:[&#123;role:&#x27;root&#x27;,db:&#x27;admin&#x27;&#125;]&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826165251592.png" alt="image-20210826165251592"></p><h5 id="4-打开-auth-配置"><a href="#4-打开-auth-配置" class="headerlink" title="4. 打开 auth 配置"></a>4. 打开 auth 配置</h5><p>文件路径: <code>/data/bk-cmdb/mongodb/conf/mongod.conf.orig</code>，取消 auth 的注释:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ...</span><br><br>security:<br>  authorization: enabled<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> ...</span><br></code></pre></td></tr></table></figure><h5 id="5-重启mongo容器"><a href="#5-重启mongo容器" class="headerlink" title="5. 重启mongo容器"></a>5. 重启mongo容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart mongodb<br></code></pre></td></tr></table></figure><h5 id="6-再次进入容器并连接-mongo，并认证"><a href="#6-再次进入容器并连接-mongo，并认证" class="headerlink" title="6. 再次进入容器并连接 mongo，并认证"></a>6. 再次进入容器并连接 mongo，并认证</h5><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826161721885.png" alt="image-20210826161721885"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">use admin<br>db.auth(&#x27;admin&#x27;,&#x27;admin&#x27;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826165917027.png" alt="image-20210826165917027"></p><h4 id="2）配置-mongo-副本集"><a href="#2）配置-mongo-副本集" class="headerlink" title="2）配置 mongo 副本集"></a>2）配置 mongo 副本集</h4><blockquote><p>⚠️ <strong>注意:</strong></p><p>如果 mongo 是以副本集的方式启动的，需要对副本集进行初始化</p><p><code>replSetName</code> 即副本集的名称 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接mongo，并认证后执行</span><br><span class="hljs-meta">#</span><span class="bash"> _id 即使用 replSetName, host 为实例的 IP:Port</span><br>rs.initiate(&#123; _id : &quot;es&quot;,members: [&#123; _id: 0, host: &quot;192.168.3.206:27017&quot; &#125;]&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826171334054.png" alt="image-20210826171334054"></p><h4 id="3）创建-cmdb-库和用户"><a href="#3）创建-cmdb-库和用户" class="headerlink" title="3）创建 cmdb 库和用户"></a>3）创建 cmdb 库和用户</h4><h5 id="1-不使用-es-做全文检索"><a href="#1-不使用-es-做全文检索" class="headerlink" title="1. 不使用 es 做全文检索"></a>1. 不使用 es 做全文检索</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接mongo，并认证后执行</span><br>use cmdb<br>db.createUser(&#123;user: &quot;cc&quot;,pwd: &quot;cc&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;cmdb&quot; &#125; ]&#125;)<br></code></pre></td></tr></table></figure><h5 id="2-使用-mongo-monstache-es-做全文检索（本文选择）"><a href="#2-使用-mongo-monstache-es-做全文检索（本文选择）" class="headerlink" title="2. 使用 mongo + monstache + es 做全文检索（本文选择）"></a>2. 使用 mongo + monstache + es 做全文检索（本文选择）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器并连接mongo，并认证后执行</span><br>use cmdb<br>db.createUser(&#123;user: &quot;cc&quot;,pwd: &quot;cc&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;cmdb&quot; &#125;,&#123; role: &quot;readWrite&quot;, db: &quot;monstache&quot; &#125; ]&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826170838042.png" alt="image-20210826170838042"></p><h3 id="6、部署-Elasticsearch（可选）"><a href="#6、部署-Elasticsearch（可选）" class="headerlink" title="6、部署 Elasticsearch（可选）"></a>6、部署 Elasticsearch（可选）</h3><h4 id="1）环境准备-3"><a href="#1）环境准备-3" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="1-拉取镜像-（官方推荐-7-0-0-版本）"><a href="#1-拉取镜像-（官方推荐-7-0-0-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 7.0.0 版本）"></a>1. 拉取镜像 （官方推荐 7.0.0 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.0.0<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-3"><a href="#2-创建持久化目录-3" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/elasticsearch/&#123;conf,data,log,plugins&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-3"><a href="#2）编辑配置文件-3" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-3"><a href="#1-新建配置文件-3" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/elasticsearch/conf/elasticsearch.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;network.host: 0.0.0.0&quot; &gt;&gt; /data/bk-cmdb/elasticsearch/conf/elasticsearch.yml<br></code></pre></td></tr></table></figure><h5 id="2-参数说明-3"><a href="#2-参数说明-3" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>network.host</td><td>es 监听端口</td></tr></tbody></table><h4 id="3）运行容器"><a href="#3）运行容器" class="headerlink" title="3）运行容器"></a>3）运行容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name elasticsearch -p 9200:9200 -p 9300:9300  -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -v /data/bk-cmdb/elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /data/bk-cmdb/elasticsearch/data:/usr/share/elasticsearch/data -v /data/bk-cmdb/elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /etc/localtime:/etc/localtime  elasticsearch:7.0.0 <br></code></pre></td></tr></table></figure><h3 id="7、部署-Monstache（可选）"><a href="#7、部署-Monstache（可选）" class="headerlink" title="7、部署 Monstache（可选）"></a>7、部署 Monstache（可选）</h3><h4 id="1）环境准备-4"><a href="#1）环境准备-4" class="headerlink" title="1）环境准备"></a>1）环境准备</h4><h5 id="Monstache-Mongodb-Es-版本选择"><a href="#Monstache-Mongodb-Es-版本选择" class="headerlink" title="Monstache-Mongodb-Es 版本选择:"></a><strong>Monstache-Mongodb-Es 版本选择:</strong></h5><table><thead><tr><th>Monstache version</th><th>Git branch (used to build plugin)</th><th>Docker tag</th><th>Description</th><th>Elasticsearch</th><th>MongoDB</th></tr></thead><tbody><tr><td>3</td><td>rel3</td><td>rel3</td><td>mgo community go driver</td><td>Versions 2 and 5</td><td>Version 3</td></tr><tr><td>4</td><td>master</td><td>rel4 (note this used to be latest)</td><td>mgo community go driver</td><td>Version 6</td><td>Version 3</td></tr><tr><td>5</td><td>rel5</td><td>rel5</td><td>MongoDB, Inc. go driver</td><td>Version 6</td><td>Version 4</td></tr><tr><td>6</td><td>rel6</td><td>rel6, latest</td><td>MongoDB, Inc. go driver</td><td>Version 7</td><td>Version 4</td></tr></tbody></table><h5 id="1-拉取镜像-（官方推荐-rel6-版本）"><a href="#1-拉取镜像-（官方推荐-rel6-版本）" class="headerlink" title="1. 拉取镜像 （官方推荐 rel6 版本）"></a>1. 拉取镜像 （官方推荐 rel6 版本）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull rwynn/monstache:rel6<br></code></pre></td></tr></table></figure><h5 id="2-创建持久化目录-4"><a href="#2-创建持久化目录-4" class="headerlink" title="2. 创建持久化目录"></a>2. 创建持久化目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/bk-cmdb/monstache/&#123;conf,data,log&#125;<br></code></pre></td></tr></table></figure><h4 id="2）编辑配置文件-4"><a href="#2）编辑配置文件-4" class="headerlink" title="2）编辑配置文件"></a>2）编辑配置文件</h4><h5 id="1-新建配置文件-4"><a href="#1-新建配置文件-4" class="headerlink" title="1. 新建配置文件"></a>1. 新建配置文件</h5><p>文件路径: <code>/data/bk-cmdb/monstache/conf/config.toml</code>，文件内容如下:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># cmdb connection settings</span><br><br><span class="hljs-comment"># connect to MongoDB using the following URL</span><br><span class="hljs-attr">mongo-url</span> =  <span class="hljs-string">&quot;mongodb://cc:cc@192.168.3.206:27017/cmdb&quot;</span><br><span class="hljs-comment"># connect to the Elasticsearch REST API at the following node URLs</span><br><span class="hljs-attr">elasticsearch-urls</span> = [<span class="hljs-string">&quot;http://192.168.3.206:9200&quot;</span>]<br><br><span class="hljs-comment"># frequently required settings</span><br><br><span class="hljs-comment"># if you need to seed an index from a collection and not just listen and sync changes events</span><br><span class="hljs-comment"># you can copy entire collections or views from MongoDB to Elasticsearch</span><br><span class="hljs-attr">direct-read-namespaces</span> = [<span class="hljs-string">&quot;cmdb.cc_ApplicationBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_HostBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjectBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjDes&quot;</span>]<br><br><span class="hljs-comment"># if you want to use MongoDB change streams instead of legacy oplog tailing use change-stream-namespaces</span><br><span class="hljs-comment"># change streams require at least MongoDB API 3.6+</span><br><span class="hljs-comment"># if you have MongoDB 4+ you can listen for changes to an entire database or entire deployment</span><br><span class="hljs-comment"># in this case you usually don&#x27;t need regexes in your config to filter collections unless you target the deployment.</span><br><span class="hljs-comment"># to listen to an entire db use only the database name.  For a deployment use an empty string.</span><br><span class="hljs-attr">change-stream-namespaces</span> = [<span class="hljs-string">&quot;cmdb.cc_ApplicationBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_HostBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjectBase&quot;</span>,<span class="hljs-string">&quot;cmdb.cc_ObjDes&quot;</span>]<br><br><span class="hljs-comment"># additional settings</span><br><br><span class="hljs-comment"># compress requests to Elasticsearch</span><br><span class="hljs-attr">gzip</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># use the following user name for Elasticsearch basic auth</span><br><span class="hljs-attr">elasticsearch-user</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># use the following password for Elasticsearch basic auth</span><br><span class="hljs-attr">elasticsearch-password</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># use 4 go routines concurrently pushing documents to Elasticsearch</span><br><span class="hljs-attr">elasticsearch-max-conns</span> = <span class="hljs-number">4</span> <br><span class="hljs-comment"># propagate dropped collections in MongoDB as index deletes in Elasticsearch</span><br><span class="hljs-attr">dropped-collections</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># propagate dropped databases in MongoDB as index deletes in Elasticsearch</span><br><span class="hljs-attr">dropped-databases</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># resume processing from a timestamp saved in a previous run</span><br><span class="hljs-attr">resume</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># do not validate that progress timestamps have been saved</span><br><span class="hljs-attr">resume-write-unsafe</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment"># override the name under which resume state is saved</span><br><span class="hljs-attr">resume-name</span> = <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-comment"># use a custom resume strategy (tokens) instead of the default strategy (timestamps)</span><br><span class="hljs-comment"># tokens work with MongoDB API 3.6+ while timestamps work only with MongoDB API 4.0+</span><br><span class="hljs-attr">resume-strategy</span> = <span class="hljs-number">0</span><br><span class="hljs-comment"># print detailed information including request traces</span><br><span class="hljs-attr">verbose</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># mapping settings</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_ApplicationBase&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_applicationbase&quot;</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_HostBase&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_hostbase&quot;</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_ObjectBase&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_objectbase&quot;</span><br><br><span class="hljs-section">[[mapping]]</span><br><span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;cmdb.cc_ObjDes&quot;</span><br><span class="hljs-attr">index</span> = <span class="hljs-string">&quot;cmdb.cc_objdes&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-参数说明-4"><a href="#2-参数说明-4" class="headerlink" title="2. 参数说明"></a>2. 参数说明</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>mongo-url</td><td>MongoDB实例的主节点访问地址。详情请参见。<a href="https://rwynn.github.io/monstache-site/config/#mongo-url">mongo-url</a>，开启认证后配置为 <code>mongodb://user:password@host/dbname</code></td></tr><tr><td>elasticsearch-urls</td><td>Elasticsearch的访问地址。详情请参见 <a href="https://rwynn.github.io/monstache-site/config/#elasticsearch-urls">elasticsearch-urls</a></td></tr><tr><td>direct-read-namespaces</td><td>指定待同步的集合，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#direct-read-namespaces">direct-read-namespaces</a>。</td></tr><tr><td>change-stream-namespaces</td><td>如果要使用MongoDB变更流功能，需要指定此参数。启用此参数后，oplog追踪会被设置为无效，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#change-stream-namespaces">change-stream-namespaces</a>。</td></tr><tr><td>namespace-regex</td><td>通过正则表达式指定需要监听的集合。此设置可以用来监控符合正则表达式的集合中数据的变化。</td></tr><tr><td>elasticsearch-user</td><td>访问Elasticsearch的用户名。</td></tr><tr><td>elasticsearch-password</td><td>访问Elasticsearch的用户密码。</td></tr><tr><td>elasticsearch-max-conns</td><td>定义连接ES的线程数。默认为4，即使用4个Go线程同时将数据同步到ES。</td></tr><tr><td>dropped-collections</td><td>默认为true，表示当删除MongoDB集合时，会同时删除ES中对应的索引。</td></tr><tr><td>dropped-databases</td><td>默认为true，表示当删除MongoDB数据库时，会同时删除ES中对应的索引。</td></tr><tr><td>resume</td><td>默认为false。设置为true，Monstache会将已成功同步到ES的MongoDB操作的时间戳写入monstache.monstache集合中。当Monstache因为意外停止时，可通过该时间戳恢复同步任务，避免数据丢失。如果指定了cluster-name，该参数将自动开启，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#resume">resume</a>。</td></tr><tr><td>resume-strategy</td><td>指定恢复策略。仅当resume为true时生效，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#resume-strategy">resume-strategy</a>。</td></tr><tr><td>verbose</td><td>默认为false，表示不启用调试日志。</td></tr><tr><td>cluster-name</td><td>指定集群名称。指定后，Monstache将进入高可用模式，集群名称相同的进程将进行协调，详情请参见<a href="https://rwynn.github.io/monstache-site/config/#cluster-name">cluster-name</a>。</td></tr><tr><td>mapping</td><td>指定ES索引映射。默认情况下，数据从MongoDB同步到ES时，索引会自动映射为<code>数据库名.集合名</code>。如果需要修改索引名称，可通过该参数设置，详情请参见<a href="https://rwynn.github.io/monstache-site/advanced/#index-mapping">Index Mapping</a>。</td></tr></tbody></table><h4 id="3）启动容器-2"><a href="#3）启动容器-2" class="headerlink" title="3）启动容器"></a>3）启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name monstache -v /data/bk-cmdb/monstache/conf/config.toml:/app/monstache.config.toml -v /etc/localtime:/etc/localtime --restart=always rwynn/monstache:rel6 -f /app/monstache.config.toml<br></code></pre></td></tr></table></figure><h3 id="8、部署蓝鲸"><a href="#8、部署蓝鲸" class="headerlink" title="8、部署蓝鲸"></a>8、部署蓝鲸</h3><h4 id="1）解压编译后的-cmdb-tar-gz"><a href="#1）解压编译后的-cmdb-tar-gz" class="headerlink" title="1）解压编译后的 cmdb.tar.gz"></a>1）解压编译后的 <code>cmdb.tar.gz</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf ~/go/src/configcenter/src/bin/pub/cmdb.tar.gz -C /data/softwares &amp;&amp; \<br>cd /data/softwares/cmdb<br></code></pre></td></tr></table></figure><h4 id="2）初始化配置"><a href="#2）初始化配置" class="headerlink" title="2）初始化配置"></a>2）初始化配置</h4><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">python init.py  \<br>      --discovery          192.168.3.206:2181 \<br>      --database           cmdb \<br>      --redis_ip           192.168.3.206 \<br>      --redis_port         6379 \<br>      --redis_pass         PassWord@123 \<br>      --mongo_ip           192.168.3.206 \<br>      --mongo_port         27017 \<br>      --mongo_user         cc \<br>      --mongo_pass         cc \<br>      --rs_name            es \<br>      --blueking_cmdb_url  http://bk-cmdb.example.com:80 \<br>      --listen_port        8083 \<br>      --auth_scheme        internal \<br>      --auth_enabled       false \<br>      --auth_sync_workers  1 \<br>      --auth_sync_interval_minutes  45 \<br>      --full_text_search   on \<br>      --es_url             http://192.168.3.206:9200 \<br>      --es_user            cc \<br>      --es_pass            cc \<br>      --log_level          3 \<br>      --register_ip        192.168.3.206 \<br>      --user_info          admin:admin<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826175509596.png" alt="image-20210826175509596"></p><p>生成的配置文件如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210826175651688.png" alt="image-20210826175651688"></p><h5 id="2-init-py-参数详解："><a href="#2-init-py-参数详解：" class="headerlink" title="2. init.py 参数详解："></a>2. init.py 参数详解：</h5><table><thead><tr><th>参数</th><th>用途说明</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>–discovery</td><td>服务发现组件，ZooKeeper 服务地址</td><td>是</td><td>无</td></tr><tr><td>–database</td><td>数据库名字</td><td>mongodb 中数据库名</td><td>否</td></tr><tr><td>–redis_ip</td><td>Redis监听的IP</td><td>是</td><td>无</td></tr><tr><td>–redis_port</td><td>Redis监听的端口</td><td>否</td><td>6379</td></tr><tr><td>–redis_pass</td><td>Redis登陆密码</td><td>是</td><td>无</td></tr><tr><td>–mongo_ip</td><td>MongoDB服务监听的IP</td><td>是</td><td>无</td></tr><tr><td>–mongo_port</td><td>MongoDB端口</td><td>否</td><td>27017</td></tr><tr><td>–mongo_user</td><td>MongoDB中CMDB数据库用户名</td><td>是</td><td>无</td></tr><tr><td>–mongo_pass</td><td>MongoDB中CMDB数据库用户名密码</td><td>是</td><td>无</td></tr><tr><td>–blueking_cmdb_url</td><td>该值表示部署完成后,输入到浏览器中访问的cmdb 网址, 格式: <a href="http://xx.xxx.com/">http://xx.xxx.com:80</a>, 用户自定义填写;在没有配置 DNS 解析的情况下, 填写服务器的 IP:PORT。端口为当前cmdb_webserver监听的端口。</td><td>是</td><td>无</td></tr><tr><td>–blueking_paas_url</td><td>蓝鲸PAAS 平台的地址，对于独立部署的CC版本可以不配置</td><td>否</td><td>无</td></tr><tr><td>–listen_port</td><td>cmdb_webserver服务监听的端口，默认是8083</td><td>是</td><td>8083</td></tr><tr><td>–full_text_search</td><td>全文检索功能开关(取值：off/on)，默认是off，开启是on</td><td>否</td><td>off</td></tr><tr><td>–es_url</td><td>elasticsearch服务监听url，默认是<a href="http://192.168.3.206:9200/">http://192.168.3.206:9200</a></td><td>否</td><td><a href="http://192.168.3.206:9200/">http://192.168.3.206:9200</a></td></tr><tr><td>–auth_scheme</td><td>权限模式，web页面使用，可选值: internal, iam</td><td>否</td><td>internal</td></tr><tr><td>–auth_enabled</td><td>是否采用蓝鲸权限中心鉴权</td><td>否</td><td>false</td></tr><tr><td>–auth_address</td><td>蓝鲸权限中心地址</td><td>auth_enabled 为真时必填</td><td><a href="https://iam.domain.com/">https://iam.domain.com/</a></td></tr><tr><td>–auth_app_code</td><td>cmdb项目在蓝鲸权限中心的应用编码</td><td>auth_enabled 为真时必填</td><td>bk_cmdb</td></tr><tr><td>–auth_app_secret</td><td>cmdb项目在蓝鲸权限中心的应用密钥</td><td>auth_enabled 为真时必填</td><td>xxxxxxx</td></tr><tr><td>–log_level</td><td>日志级别0-9, 9日志最详细</td><td>否</td><td>3</td></tr><tr><td>–register_ip</td><td>进程注册到zookeeper上的IP地址，可以是域名</td><td>否</td><td>无</td></tr><tr><td>–user_info</td><td>登陆 web 页面的账号密码</td><td>否</td><td>无</td></tr></tbody></table><blockquote><p>🚩 init.py 执行成功后会自动生成cmdb各服务进程所需要的配置。</p></blockquote><h4 id="3）启动服务"><a href="#3）启动服务" class="headerlink" title="3）启动服务"></a>3）启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/cmdb &amp;&amp; \<br>./start.sh<br></code></pre></td></tr></table></figure><h5 id="问题记录-adminserver-redis-认证问题"><a href="#问题记录-adminserver-redis-认证问题" class="headerlink" title="问题记录: adminserver redis 认证问题"></a>问题记录: adminserver redis 认证问题</h5><h6 id="错误信息-1"><a href="#错误信息-1" class="headerlink" title="错误信息:"></a>错误信息:</h6><p>启动服务时，部分服务无法正常启动，特别是管理配置的 adminserver</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827130549678.png" alt="image-20210827130549678"></p><p>查看日志后，问题的原因在于 redis 的认证上</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827130612873.png" alt="image-20210827130612873"></p><h6 id="问题原因-2"><a href="#问题原因-2" class="headerlink" title="问题原因:"></a>问题原因:</h6><p>redis 开启认证后，在内存中并没有确实的生成对应的key，导致程序在加载配置时，无法正确加载认证配置（程序读取的是本地 redis 的 config 中的 key <code>requirepass</code>）</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827130902618.png" alt="image-20210827130902618"></p><h6 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案:"></a>解决方案:</h6><p>因此只要将 key 对应的值（也就是我们设置的密码） set 到 redis 中，即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG SET requirepass myPassword<br></code></pre></td></tr></table></figure><h4 id="4）初始化数据库"><a href="#4）初始化数据库" class="headerlink" title="4）初始化数据库"></a>4）初始化数据库</h4><blockquote><p>⚠️ <strong>注意:</strong>  <strong>此步骤必需要所有cmdb进程成功启动后执行。</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/cmdb &amp;&amp; \<br>./init_db.sh<br></code></pre></td></tr></table></figure><p>返回值中返回 <code>migrate_success</code>，即数据库初始化成功</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827131349118.png" alt="image-20210827131349118"></p><h4 id="5）停止服务"><a href="#5）停止服务" class="headerlink" title="5）停止服务"></a>5）停止服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/cmdb &amp;&amp; \<br>./stop.sh<br></code></pre></td></tr></table></figure><h2 id="四、效果展示"><a href="#四、效果展示" class="headerlink" title="四、效果展示"></a>四、效果展示</h2><p><strong>打开浏览器:</strong> 输入 cmdb_webserver 监听的地址，如本文档中示例服务监听的地址: <a href="http://bk-cmdb.example.com/">http://bk-cmdb.example.com</a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210827141908936.png" alt="image-20210827141908936"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将配置文件反向持久化至 Kubernetes Configmap 解决方案</title>
    <link href="/2021/08/30/%E5%B0%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8D%E5%90%91%E6%8C%81%E4%B9%85%E5%8C%96%E8%87%B3-Kubernetes-Configmap-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/30/%E5%B0%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8D%E5%90%91%E6%8C%81%E4%B9%85%E5%8C%96%E8%87%B3-Kubernetes-Configmap-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="将配置文件反向持久化至-Kubernetes-Configmap-解决方案"><a href="#将配置文件反向持久化至-Kubernetes-Configmap-解决方案" class="headerlink" title="将配置文件反向持久化至 Kubernetes Configmap 解决方案"></a>将配置文件反向持久化至 Kubernetes Configmap 解决方案</h1><span id="more"></span><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>近期产线环境发生的一起程序导致的离奇问题，相应模块由 PHP 开发，使用 consul 作为配管中心，统一管理一些通用性配置，公司研发自己造轮子二开的 swoole 框架，会以循环的方式读取 consul 的公共配置（主要是一些连接数据库、中间件信息的配置），并结合本地源码中的配置信息生成最终使用版本的配置，记录在一个临时文件中，并最终加载至内存。</p><p>也就是说，这个临时文件中记录着当前服务进程实际使用的配置，是否存在问题，一定程度上是可以从中了解到的。但是也存在一个问题，该文件仅为一临时文件并不永久性保留，且程序启动设定为一旦重启就会重新拉取 consul 的配置并生成新的临时文件覆盖掉原来的文件（实际上是一种减少代码发布，讨巧取懒的方法，因为之前对公司的版本发布做了较严格的规范，但是也算是一种配置管理方式，当然个人比较推荐将业务相关配置作为数据库配置项，而非以配管这类并算不上安全的方式进行）。</p><p>回归正题，我们之前说过，临时文件记录这服务进程当前实际在使用的配置信息，这在排查问题的时候有一定的帮助，但是临时文件又没有持久化，一旦重启就会被覆盖（无论是自愈还是发版），这也导致实际在使用的配置信息并不存在版本概念，那么一旦出现要追溯版本的情况就只能抓瞎了。</p><p>实际上，目前产线出现的问题就是出现了这样的情况，因此出于 SRE 的需求，提出了本方案，对后续类似的问题，可以能有一个追溯问题的机会。</p><h2 id="二、原因追溯"><a href="#二、原因追溯" class="headerlink" title="二、原因追溯"></a>二、原因追溯</h2><h3 id="1、配置记录"><a href="#1、配置记录" class="headerlink" title="1、配置记录"></a>1、配置记录</h3><h4 id="1）consul-中对应的项目配置"><a href="#1）consul-中对应的项目配置" class="headerlink" title="1）consul 中对应的项目配置"></a>1）consul 中对应的项目配置</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830104627124.png" alt="image-20210830104627124"></p><h4 id="2）consul-中-redis-相关的通用配置（PHP用）"><a href="#2）consul-中-redis-相关的通用配置（PHP用）" class="headerlink" title="2）consul 中 redis 相关的通用配置（PHP用）"></a>2）consul 中 redis 相关的通用配置（PHP用）</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830103827383.png" alt="image-20210830103827383"></p><h4 id="3）项目生成临时文件中-redis-相关配置（实际使用）"><a href="#3）项目生成临时文件中-redis-相关配置（实际使用）" class="headerlink" title="3）项目生成临时文件中 redis 相关配置（实际使用）"></a>3）项目生成临时文件中 redis 相关配置（实际使用）</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830103639172.png" alt="image-20210830103639172"></p><h3 id="2、问题说明"><a href="#2、问题说明" class="headerlink" title="2、问题说明"></a>2、问题说明</h3><p>前面我们说过，公司的 php 项目实际加载进内存的配置，为结合和 consul global 配置和本地代码配置所生成的临时文件的配置，上面本地主要出现问题的 redis 的配置，我们可以明显发现在 json 结构体中，实际上存在了2 种 redis 的配置，一个是 <code>value</code> 中直接由本地代码生成的 redis 配置信息，可以看到，里面设置了 redis 用 14 库（<code>&quot;index&quot;: 14</code>），如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"># ...<br><span class="hljs-string">&quot;auth&quot;</span>: xxx,<br><span class="hljs-string">&quot;host&quot;</span>: xxx,<br><span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">14</span>,<br><span class="hljs-string">&quot;lock&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;retryCount&quot;</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">&quot;retryDelay&quot;</span>: <span class="hljs-number">1000</span><br>&#125;<br># ...<br></code></pre></td></tr></table></figure><p>另一个 redis 的配置是 <code>options</code> 中读取 consul global 配置生成的配置信息，其中没有定义分片，默认就会使用 0 库。</p><p>本次的问题点就是指定了 14库，但是数据被写到了 0 库，由于服务实际使用的配置文件是通过这种拼接的方式形成的，是否会发生覆盖效果不可而知，并且由于临时文件没有记录版本，当出现问题时，连溯源的根本都没有。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="1、原理讲解"><a href="#1、原理讲解" class="headerlink" title="1、原理讲解"></a>1、原理讲解</h3><p>可以看之前的文章: <a href="https://tareya.github.io/2021/08/30/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%80%9A%E8%BF%87-http-%E8%B0%83%E7%94%A8-k8s-api/">通过 http 调用 k8s api</a>，里面简单说明了 K8S API 的访问控制机制和 HTTP REST 访问方法，是最基本的原理。</p><p>当然本文使用的是 client-go 自制的插件反向创建 configmap 资源的方法，原理是类似的，但是需要对 client-go 有一定的了解，下文会简单介绍插件的实现基本原理。</p><h3 id="2、方案实施"><a href="#2、方案实施" class="headerlink" title="2、方案实施"></a>2、方案实施</h3><h4 id="1）创建-ServiceAccount，并进行-RBAC-授权"><a href="#1）创建-ServiceAccount，并进行-RBAC-授权" class="headerlink" title="1）创建 ServiceAccount，并进行 RBAC 授权"></a>1）创建 ServiceAccount，并进行 RBAC 授权</h4><h5 id="1-新建-rbac-声明文件，内容如下："><a href="#1-新建-rbac-声明文件，内容如下：" class="headerlink" title="1. 新建 rbac 声明文件，内容如下："></a>1. 新建 rbac 声明文件，内容如下：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-clusterrole</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>, <span class="hljs-string">&quot;secrets&quot;</span>, <span class="hljs-string">&quot;nodes&quot;</span>, <span class="hljs-string">&quot;pods&quot;</span>, <span class="hljs-string">&quot;services&quot;</span>, <span class="hljs-string">&quot;resourcequotas&quot;</span>, <span class="hljs-string">&quot;replicationcontrollers&quot;</span>, <span class="hljs-string">&quot;limitranges&quot;</span>, <span class="hljs-string">&quot;persistentvolumeclaims&quot;</span>, <span class="hljs-string">&quot;persistentvolumes&quot;</span>, <span class="hljs-string">&quot;namespaces&quot;</span>, <span class="hljs-string">&quot;endpoints&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;daemonsets&quot;</span>, <span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;replicasets&quot;</span>, <span class="hljs-string">&quot;ingresses&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;statefulsets&quot;</span>, <span class="hljs-string">&quot;daemonsets&quot;</span>, <span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;replicasets&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;cronjobs&quot;</span>, <span class="hljs-string">&quot;jobs&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-clusterrole-binding</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin-clusterrole</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h5 id="2-创建资源"><a href="#2-创建资源" class="headerlink" title="2. 创建资源"></a>2. 创建资源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f apiadmin-rbac.yaml<br></code></pre></td></tr></table></figure><h5 id="3-审计权限"><a href="#3-审计权限" class="headerlink" title="3. 审计权限"></a>3. 审计权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl auth can-i create configmaps --as=system:serviceaccount:default:apiadmin -n testing-app<br></code></pre></td></tr></table></figure><h4 id="2）管理-kubeconfig"><a href="#2）管理-kubeconfig" class="headerlink" title="2）管理 kubeconfig"></a>2）管理 kubeconfig</h4><h5 id="1-基础文件讲解"><a href="#1-基础文件讲解" class="headerlink" title="1. 基础文件讲解"></a>1. 基础文件讲解</h5><p>本文使用的 k8s 集群为二进制包方式部署，目录机构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/application/kubernetes<br>├── bin<br>│   ├── kube-apiserver<br>│   ├── kube-controller-manager<br>│   ├── kubectl<br>│   ├── kubelet<br>│   ├── kube-proxy<br>│   └── kube-scheduler<br>├── cfg<br>│   ├── bootstrap.kubeconfig<br>│   ├── kube-apiserver.conf<br>│   ├── kube-controller-manager.conf<br>│   ├── kubelet.conf<br>│   ├── kubelet-config.yml<br>│   ├── kubelet.kubeconfig<br>│   ├── kube-proxy.conf<br>│   ├── kube-proxy-config.yml<br>│   ├── kube-proxy.kubeconfig<br>│   ├── kube-scheduler.conf<br>│   └── token.csv<br>├── logs<br>└── ssl<br>    ├── ca-key.pem<br>    ├── ca.pem<br>    ├── kubelet-client-2021-07-20-21-52-21.pem<br>    ├── kubelet-client-current.pem -&gt; /data/application/kubernetes/ssl/kubelet-client-2021-07-20-21-52-21.pem<br>    ├── kubelet-server-2021-07-20-21-53-06.pem<br>    ├── kubelet-server-current.pem -&gt; /data/application/kubernetes/ssl/kubelet-server-2021-07-20-21-53-06.pem<br>    ├── kube-proxy-key.pem<br>    ├── kube-proxy.pem<br>    ├── metrics-server-key.pem<br>    ├── metrics-server.pem<br>    ├── server-key.pem<br>    └── server.pem<br><br></code></pre></td></tr></table></figure><p>本集群是采用 bootstrap 方式管理，bootstrap.kubeconfig 内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority:</span> <span class="hljs-string">/data/application/kubernetes/ssl/ca.pem</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://172.16.84.140:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">kubelet-bootstrap</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubelet-bootstrap</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">c47ffb939f5ca36231d9e3121a252940</span><br></code></pre></td></tr></table></figure><blockquote><p>🚩 <strong>可以看出，这是一个标准的 kubeconfig 的模板，cluster、context、user的信息都有了，但是他是通过 ca 证书文件进行认证的，但是我们的插件是运行在容器内的，当然不可能有 ca 文件，所以需要用解码出的 <code>certificate-authority-data</code> 的方式来进行认证。</strong></p></blockquote><h5 id="2-生成-kubeconfig-基础通信信息"><a href="#2-生成-kubeconfig-基础通信信息" class="headerlink" title="2. 生成 kubeconfig 基础通信信息"></a>2. 生成 kubeconfig 基础通信信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl config set-cluster kubernetes --certificate-authority=/data/application/kubernetes/ssl/ca.pem --embed-certs=true --server=https://$&#123;MASTER_IP&#125;:6443<br></code></pre></td></tr></table></figure><p>生产文件路径: <code>~/.kube/config</code>，文件内容类似下面的形式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVSXpFZW1aNVFwMG5ZT3h3LzdlVG02ckcwdG5vd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEl3TURRd016QTNNemt3TUZvWERUSTFNRFF3TWpBM016a3dNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbGFXcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdVZBcDZ2NWVFOGZHTTZ3SEtheTgKZFJZZnp5NVdRZjlnczlqZ3JxMjBCUkxDNTlUclJaWjlaNGRhb1RJRWtISityZDRGTENDaTVnNXNudklTeU1NTQpENW15M3RLZElQM3l4dWx1Y3hnS1RlSXdWdXFXa3Rlc0hoWWo5blBtWmM4dDJMNUlqYjhaVVU5dlJHbEpmNmhjCkRPR1VjaWwvOUhNaEtXN3ZGeEhPQit4TUtBeDloaDNkT1dmTFFYTE9mcitEbm51M0ZyQzJXRUpOQm8xNjA3a2wKMEJncUZCaEQzdUlqQnlZNG5HYWFJazBSaHgycmRWaEhXY0NualNndExia05tWDV4VThPWXVFSjVlckl1VzA1agprMUYyeXlIOGVFc3U4OXhHTzZPZVVybHNndWJjNWZHQkN0S0U3TGE1TEQ1bnFPeGNJUWFPeVd0UlBUaFFsOEMyCndRSURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVK0krZHlXU014TU5mbzlrYzVHODFUb0JEcWF3d0h3WURWUjBqQkJnd0ZvQVUrSStkeVdTTQp4TU5mbzlrYzVHODFUb0JEcWF3d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIYXBsdFhEVHJBVHJhR2FyU2xvCnJzT3dybUtzN3l5elkyNDFHc0RETFM3Vldhc3VSY3VYUGpaaUcxN2kxb3kyRHBnNzJNWXRGS0lMVmtmTjhBVmkKZ21WclY4ZkRlUjE3eldGMHM2YXRLUGVNRDg2OE1ISWhHdUNjbVJYVk0rSFBUNzBYTkl4REpmMk9NdEQ5ZGRIVApIMlVIQkhQTUJhaVpOa2VjOUNjV1hZQlVLYUJHL3Nab1dILzhWSktKK3JNT1Y3NjFObzkxa2VRQnNWalFtQ211CkI3UUJJYlFFaWUzUGdTazlYR3RWV2ZxVmVYSHM1ck5DZGJsSzdkT08zTXZxcTRtMTBDbDlZd2lUZjZ0cFlreFcKS2l2WjZ0ZkJqR2g5aFRIZ09ka3pTcitHKzF1azFJSDRlNWVGZForYVVVRkFpSVEzU2dzZ2x6S2VkckkrMFloZApZcnM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://172.16.84.140:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> []<br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span> []<br></code></pre></td></tr></table></figure><blockquote><p>接下来，作为一个 kubeconfig 文件，我们还需要 <code>context</code>  和 <code>user</code> 的信息才能实现管理功能</p></blockquote><h5 id="3-编写-kubeconfig"><a href="#3-编写-kubeconfig" class="headerlink" title="3. 编写 kubeconfig"></a>3. 编写 kubeconfig</h5><p>修改文件，文件路径 <code>~/.kube/config</code>，修改内容如下: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVSXpFZW1aNVFwMG5ZT3h3LzdlVG02ckcwdG5vd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEl3TURRd016QTNNemt3TUZvWERUSTFNRFF3TWpBM016a3dNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbGFXcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdVZBcDZ2NWVFOGZHTTZ3SEtheTgKZFJZZnp5NVdRZjlnczlqZ3JxMjBCUkxDNTlUclJaWjlaNGRhb1RJRWtISityZDRGTENDaTVnNXNudklTeU1NTQpENW15M3RLZElQM3l4dWx1Y3hnS1RlSXdWdXFXa3Rlc0hoWWo5blBtWmM4dDJMNUlqYjhaVVU5dlJHbEpmNmhjCkRPR1VjaWwvOUhNaEtXN3ZGeEhPQit4TUtBeDloaDNkT1dmTFFYTE9mcitEbm51M0ZyQzJXRUpOQm8xNjA3a2wKMEJncUZCaEQzdUlqQnlZNG5HYWFJazBSaHgycmRWaEhXY0NualNndExia05tWDV4VThPWXVFSjVlckl1VzA1agprMUYyeXlIOGVFc3U4OXhHTzZPZVVybHNndWJjNWZHQkN0S0U3TGE1TEQ1bnFPeGNJUWFPeVd0UlBUaFFsOEMyCndRSURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVK0krZHlXU014TU5mbzlrYzVHODFUb0JEcWF3d0h3WURWUjBqQkJnd0ZvQVUrSStkeVdTTQp4TU5mbzlrYzVHODFUb0JEcWF3d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIYXBsdFhEVHJBVHJhR2FyU2xvCnJzT3dybUtzN3l5elkyNDFHc0RETFM3Vldhc3VSY3VYUGpaaUcxN2kxb3kyRHBnNzJNWXRGS0lMVmtmTjhBVmkKZ21WclY4ZkRlUjE3eldGMHM2YXRLUGVNRDg2OE1ISWhHdUNjbVJYVk0rSFBUNzBYTkl4REpmMk9NdEQ5ZGRIVApIMlVIQkhQTUJhaVpOa2VjOUNjV1hZQlVLYUJHL3Nab1dILzhWSktKK3JNT1Y3NjFObzkxa2VRQnNWalFtQ211CkI3UUJJYlFFaWUzUGdTazlYR3RWV2ZxVmVYSHM1ck5DZGJsSzdkT08zTXZxcTRtMTBDbDlZd2lUZjZ0cFlreFcKS2l2WjZ0ZkJqR2g5aFRIZ09ka3pTcitHKzF1azFJSDRlNWVGZForYVVVRkFpSVEzU2dzZ2x6S2VkckkrMFloZApZcnM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://172.16.84.140:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">apiadmin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;TOKEN&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>🌈 这里我们用我们之前创建的 ServiceAccount 作为认证对象（当然也可以使用 user 或者 group 的方式，可以根据实际需求更改）</p><p>认证对象的认证凭证我们采用之前 rbac 授权生成的 token 的方式，可以直接通过 kubectl 转换获得，获取方法如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">SECRET=$(kubectl get serviceaccount apiadmin -ojsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)<br>TOKEN=$(kubectl get secret $&#123;SECRET&#125; -ojsonpath=&#x27;&#123;.data.token&#125;&#x27;|base64 -d)<br></code></pre></td></tr></table></figure><p>当然在集群外也可以采用 kubelet client 的 crt 和 key 文件进行认证，形式就会变成类似下面这样的形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">minikube</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate:</span> <span class="hljs-string">/Users/shenlei/.minikube/profiles/minikube/client.crt</span><br>    <span class="hljs-attr">client-key:</span> <span class="hljs-string">/Users/shenlei/.minikube/profiles/minikube/client.key</span><br></code></pre></td></tr></table></figure><p>当然也可以将对应的文件进行如上述 ca 文件那样的转码，使用 <code>client-certificate-data</code> 和 <code>client-key-data</code>的方式，但是还是建议使用 rbac 授权的方式，因为这样可以精准的授权资源，而不会导致权限过剩。</p></blockquote><h4 id="3）client-go-读取-kubeconfig"><a href="#3）client-go-读取-kubeconfig" class="headerlink" title="3）client-go 读取 kubeconfig"></a>3）client-go 读取 kubeconfig</h4><h5 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// load the kubeconfig file</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadConfig</span><span class="hljs-params">()</span> *<span class="hljs-title">rest</span>.<span class="hljs-title">Config</span></span> &#123;<br><br>config, err := clientcmd.BuildConfigFromFlags(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;./config&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>  <span class="hljs-keyword">return</span> config<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4）创建-clientset"><a href="#4）创建-clientset" class="headerlink" title="4）创建 clientset"></a>4）创建 clientset</h4><h5 id="代码示例：-1"><a href="#代码示例：-1" class="headerlink" title="代码示例："></a>代码示例：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// init the rest client</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitClient</span><span class="hljs-params">()</span> *<span class="hljs-title">kubernetes</span>.<span class="hljs-title">Clientset</span></span> &#123;<br><span class="hljs-comment">// create a kubeconfig instance</span><br>c := LoadConfig()<br><br><span class="hljs-comment">// init the rest client</span><br>clientset, err := kubernetes.NewForConfig(c)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-keyword">return</span> clientset<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5）读取文件转换-configmap-的数据结构"><a href="#5）读取文件转换-configmap-的数据结构" class="headerlink" title="5）读取文件转换 configmap 的数据结构"></a>5）读取文件转换 configmap 的数据结构</h4><h5 id="代码示例：-2"><a href="#代码示例：-2" class="headerlink" title="代码示例："></a>代码示例：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// generate the configmap struct body</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConfigmapGenerate</span><span class="hljs-params">(namespace <span class="hljs-keyword">string</span>, name <span class="hljs-keyword">string</span>, filepath <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">corev1</span>.<span class="hljs-title">ConfigMap</span></span> &#123;<br><br><span class="hljs-comment">// define the configmap necessary metadata</span><br><span class="hljs-keyword">type</span> ConfigMap <span class="hljs-keyword">struct</span> &#123;<br>Metadata <span class="hljs-keyword">interface</span>&#123;&#125;<br>Data     <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span><br>&#125; <span class="hljs-comment">// *corev1.ConfigMap</span><br><br><span class="hljs-keyword">type</span> ObjectMeta <span class="hljs-keyword">struct</span> &#123;<br>Name      <span class="hljs-keyword">string</span><br>Namespace <span class="hljs-keyword">string</span><br>&#125; <span class="hljs-comment">// *metav1.ObjectMeta</span><br><br><span class="hljs-comment">// read the tmp json config file</span><br>f, e := ioutil.ReadFile(filepath)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(e)<br>&#125;<br><br>jsonStr := <span class="hljs-keyword">string</span>(f)<br><br><span class="hljs-comment">// convert the json string to map</span><br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)<br>m[<span class="hljs-string">&quot;config.json&quot;</span>] = jsonStr<br><br>metadata := ObjectMeta&#123;<br>Name:      name,<br>Namespace: namespace,<br>&#125;<br><br><span class="hljs-comment">// generate the k8s configmap data</span><br>result := &amp;corev1.ConfigMap&#123;<br>ObjectMeta: metav1.ObjectMeta&#123;<br>Name:      metadata.Name,<br>Namespace: metadata.Namespace,<br>&#125;,<br>Data: m,<br>&#125;<br><br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6）创建-configmap-对象"><a href="#6）创建-configmap-对象" class="headerlink" title="6）创建 configmap 对象"></a>6）创建 configmap 对象</h4><h5 id="代码示例：-3"><a href="#代码示例：-3" class="headerlink" title="代码示例："></a>代码示例：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// create the configmap</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConfigmapCreate</span><span class="hljs-params">(namespace <span class="hljs-keyword">string</span>, c *corev1.ConfigMap)</span> *<span class="hljs-title">corev1</span>.<span class="hljs-title">ConfigMap</span></span> &#123;<br><span class="hljs-comment">// init the clientset instance</span><br>client := InitClient()<br><br><span class="hljs-comment">// define the api interface</span><br>api := client.CoreV1()<br>opts := metav1.CreateOptions&#123;&#125;<br><br><span class="hljs-comment">// create configmap operation</span><br>configmapCreate, err := api.ConfigMaps(namespace).Create(context.TODO(), c, opts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-keyword">return</span> configmapCreate<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、项目管理基础</title>
    <link href="/2021/08/27/%E7%AC%AC2%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/08/27/%E7%AC%AC2%E7%AB%A0%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、项目管理基础"><a href="#第2章、项目管理基础" class="headerlink" title="第2章、项目管理基础"></a>第2章、项目管理基础</h1><span id="more"></span><h2 id="一、项目管理基础理论"><a href="#一、项目管理基础理论" class="headerlink" title="一、项目管理基础理论"></a>一、项目管理基础理论</h2><h3 id="1、什么是项目？"><a href="#1、什么是项目？" class="headerlink" title="1、什么是项目？"></a>1、什么是项目？</h3><h4 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h4><p>项目是为创建某一项独特产品、服务或成果所做的临时性（一次性）努力，有特定的环境和要求</p><h4 id="2）特点"><a href="#2）特点" class="headerlink" title="2）特点"></a>2）特点</h4><h5 id="1-临时性（一次性）"><a href="#1-临时性（一次性）" class="headerlink" title="1. 临时性（一次性）"></a>1. 临时性（一次性）</h5><ul><li>临时性并不表示时间短</li><li>项目有明确的开始时间和结束时间</li></ul><h5 id="2-独特性"><a href="#2-独特性" class="headerlink" title="2. 独特性"></a>2. 独特性</h5><ul><li>可能有一样的产品，但不可能有一样的项目</li><li>不可能有两栋完全一样的楼</li></ul><h5 id="3-目的性"><a href="#3-目的性" class="headerlink" title="3. 目的性"></a>3. 目的性</h5><p>项目需要有明确的目的性</p><h5 id="4-资源约束"><a href="#4-资源约束" class="headerlink" title="4. 资源约束"></a>4. 资源约束</h5><ul><li>进度、成本、质量</li><li>三者相辅相成又互相制约</li></ul><h4 id="3）目标、约束、变量、核心"><a href="#3）目标、约束、变量、核心" class="headerlink" title="3）目标、约束、变量、核心"></a>3）目标、约束、变量、核心</h4><h5 id="1-三大目标"><a href="#1-三大目标" class="headerlink" title="1. 三大目标"></a>1. 三大目标</h5><ul><li>时间（进度）、成本（投资）、质量</li></ul><h5 id="2-四大约束"><a href="#2-四大约束" class="headerlink" title="2. 四大约束"></a>2. 四大约束</h5><p>范围、质量、进度、投资</p><h5 id="3-五大变量"><a href="#3-五大变量" class="headerlink" title="3. 五大变量"></a>3. 五大变量</h5><p>范围、质量、进度、投资、安全</p><h5 id="4-六大核心"><a href="#4-六大核心" class="headerlink" title="4. 六大核心"></a>4. 六大核心</h5><p>范围、质量、进度、投资、安全、整体</p><h4 id="3）项目管理过程"><a href="#3）项目管理过程" class="headerlink" title="3）项目管理过程"></a>3）项目管理过程</h4><h5 id="1-核心知识域"><a href="#1-核心知识域" class="headerlink" title="1. 核心知识域"></a>1. 核心知识域</h5><ul><li>范围管理</li><li>质量管理</li><li>进度管理</li><li>成本管理</li><li>信息安全管理</li><li>整体管理</li></ul><h5 id="2-过程域"><a href="#2-过程域" class="headerlink" title="2. 过程域"></a>2. 过程域</h5><ul><li>可研与立项</li><li>启动</li><li>计划</li><li>实施</li><li>监控</li><li>收尾</li></ul><h5 id="3-伴随域"><a href="#3-伴随域" class="headerlink" title="3. 伴随域"></a>3. 伴随域</h5><ul><li>变更管理</li><li>沟通管理</li></ul><h5 id="4-保障域"><a href="#4-保障域" class="headerlink" title="4. 保障域"></a>4. 保障域</h5><ul><li>人力资源管理</li><li>合同管理</li><li>采购管理</li><li>风险管理</li><li>信息与配置管理</li><li>知识产权管理</li><li>法律法规、标准规范和职业道德规范</li></ul><h4 id="4）项目和日常运作的区别"><a href="#4）项目和日常运作的区别" class="headerlink" title="4）项目和日常运作的区别"></a>4）项目和日常运作的区别</h4><h2 id="二、十大知识领域和五大过程组"><a href="#二、十大知识领域和五大过程组" class="headerlink" title="二、十大知识领域和五大过程组"></a>二、十大知识领域和五大过程组</h2><h3 id="1、十大知识领域"><a href="#1、十大知识领域" class="headerlink" title="1、十大知识领域"></a>1、十大知识领域</h3><blockquote><p>🌈 <strong>速记词：</strong></p></blockquote><table><thead><tr><th>速记词</th><th>知识点</th><th>解释说明</th></tr></thead><tbody><tr><td>范</td><td>范围管理</td><td>哪些工作必须做（WBS）</td></tr><tr><td>进</td><td>进度管理</td><td>什么时候做（进度基准）</td></tr><tr><td>整</td><td>整体管理</td><td>统一并协调（战略）</td></tr><tr><td>狗</td><td>沟通管理</td><td>如何传递信息（组织）</td></tr><tr><td>子</td><td>质量管理</td><td>做到什么程度（战术指导）</td></tr><tr><td>成</td><td>成本管理</td><td>花多少钱做（成本基准）</td></tr><tr><td>人</td><td>人力资源管理</td><td>用什么人做（组织）</td></tr><tr><td>风</td><td>风险管理</td><td>威胁和机会（例外）</td></tr><tr><td>采</td><td>采购管理</td><td>买什么资源（外包人或物）</td></tr><tr><td>干杯</td><td>干系人管理</td><td>如何获得支持（影响干系人）</td></tr></tbody></table><p>–</p><h3 id="2、五大过程组"><a href="#2、五大过程组" class="headerlink" title="2、五大过程组"></a>2、五大过程组</h3><table><thead><tr><th>过程</th><th>描述</th><th>要求</th></tr></thead><tbody><tr><td>启动</td><td>确定目标</td><td>千里之行，始于足下</td></tr><tr><td>规划</td><td>制定计划</td><td>运筹帷幄，决胜千里</td></tr><tr><td>执行</td><td>实施计划</td><td>言出必行，行必结果</td></tr><tr><td>监控</td><td>优化迭代计划</td><td>审时度势，沉着应对</td></tr><tr><td>收尾</td><td>交付成果，总结回顾</td><td>有始有终，如履薄冰</td></tr></tbody></table><h3 id="3、汇总表"><a href="#3、汇总表" class="headerlink" title="3、汇总表"></a>3、汇总表</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210903124206118.png" alt="image-20210903124206118"></p><h3 id="4、过程图"><a href="#4、过程图" class="headerlink" title="4、过程图"></a>4、过程图</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830231327420.png" alt="image-20210830231327420"></p><h3 id="5、可交付成果的时间线"><a href="#5、可交付成果的时间线" class="headerlink" title="5、可交付成果的时间线"></a>5、可交付成果的时间线</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830232525128.png" alt="image-20210830232525128"></p><h3 id="6、成果线"><a href="#6、成果线" class="headerlink" title="6、成果线"></a>6、成果线</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830232851574.png" alt="image-20210830232851574"></p><h3 id="7、数据线"><a href="#7、数据线" class="headerlink" title="7、数据线"></a>7、数据线</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210830232954544.png" alt="image-20210830232954544"> </p>]]></content>
    
    
    <categories>
      
      <category>软考高项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node 编译 JavaScript heap out of memory 内存溢出问题解决方案</title>
    <link href="/2021/08/26/node-%E7%BC%96%E8%AF%91-JavaScript-heap-out-of-memory-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/26/node-%E7%BC%96%E8%AF%91-JavaScript-heap-out-of-memory-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="node-编译-JavaScript-heap-out-of-memory-内存溢出问题解决方案"><a href="#node-编译-JavaScript-heap-out-of-memory-内存溢出问题解决方案" class="headerlink" title="node 编译 JavaScript heap out of memory 内存溢出问题解决方案"></a>node 编译 JavaScript heap out of memory 内存溢出问题解决方案</h1><span id="more"></span><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>最近在使用node编译项目时，遇到了这样的错误，按照字面意思理解，就是内存溢出了。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825172156810.png" alt="image-20210825172156810"></p><h2 id="二、根因追溯"><a href="#二、根因追溯" class="headerlink" title="二、根因追溯"></a>二、根因追溯</h2><blockquote><p><a href="https://github.com/nodejs/node/wiki/FAQ">官方FAQ</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the memory <span class="hljs-keyword">limit</span> <span class="hljs-keyword">on</span> a node process?Currently, <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> v8 has a memory <span class="hljs-keyword">limit</span> <span class="hljs-keyword">of</span> <span class="hljs-number">512</span>MB <span class="hljs-keyword">on</span> <span class="hljs-number">32</span>-<span class="hljs-type">bit</span> systems, <span class="hljs-keyword">and</span> <span class="hljs-number">1.4</span>GB <span class="hljs-keyword">on</span> <span class="hljs-number">64</span>-<span class="hljs-type">bit</span> systems. The <span class="hljs-keyword">limit</span> can be raised <span class="hljs-keyword">by</span> setting <span class="hljs-comment">--max_old_space_size to a maximum of ~1024 (~1 GB) (32-bit) and ~4096 (~4GB) (64-bit), but it is recommended that you split your single process into several workers if you are hitting memory limits.</span><br></code></pre></td></tr></table></figure></blockquote><p>在官方给出的介绍中可以了解到，nodejs 的 v8 引擎默认给的内存配置比较小（64位系统：1.4 GB，32位系统：0.7 GB）并且内存大小最大为 4g，也就是说，如果前端项目非常的庞大，Webpack编译时就会占用很多的系统资源，如果超出了V8引擎对Node默认的内存限制大小时，就会产生内存泄露(JavaScript heap out of memory)的错误。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>既然问题已经非常明确了，那么解决起来也就比较容易了，解决的方案有以下三种:</p><h3 id="1、修改-bin-下的命令"><a href="#1、修改-bin-下的命令" class="headerlink" title="1、修改 ./bin 下的命令"></a>1、修改 ./bin 下的命令</h3><p><a href="https://www.cnblogs.com/liugang-vip/p/6857595.html">方案参考</a></p><h3 id="2、修改-node-参数-–max-old-space-size"><a href="#2、修改-node-参数-–max-old-space-size" class="headerlink" title="2、修改 node 参数 –max-old-space-size"></a>2、修改 node 参数 –max-old-space-size</h3><p>在项目的 package.json 文件的 script 模块中的 build 指令中添加 <code>--max-old-space-size=8192</code>，意思是将内存可使用内存调整到 8G，足够使用了（虽然官方建议如果使用较大内存的话则需要分成多个子 worker 这样来规避大内存的使用）</p><p>如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;node --max-old-space-size=8192 build/build.js&quot;</span>,<br>   <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、使用-increase-memory-limit"><a href="#3、使用-increase-memory-limit" class="headerlink" title="3、使用 increase-memory-limit"></a>3、使用 increase-memory-limit</h3><h4 id="1）下载-increase-memory-limit"><a href="#1）下载-increase-memory-limit" class="headerlink" title="1）下载 increase-memory-limit"></a>1）下载 <code>increase-memory-limit</code></h4><p><a href="https://www.npmjs.com/package/increase-memory-limit">npm包地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install increase-memory-limit<br></code></pre></td></tr></table></figure><h4 id="2）修改前端项目的-package-josn"><a href="#2）修改前端项目的-package-josn" class="headerlink" title="2）修改前端项目的 package.josn"></a>2）修改前端项目的 <code>package.josn</code></h4><p>文件路径: <code>~/go/src/configcenter/src/ui/package.json</code>，修改以下内容:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// ...</span><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;fix-memory-limit&quot;</span>: <span class="hljs-string">&quot;cross-env LIMIT=16384 increase-memory-limit&quot;</span>,<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br><span class="hljs-comment">// ...</span><br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;increase-memory-limit&quot;</span>: <span class="hljs-string">&quot;^1.0.3&quot;</span>,<br>    <span class="hljs-attr">&quot;cross-env&quot;</span>: <span class="hljs-string">&quot;^5.0.5&quot;</span><br>  &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="3）运行修复内存限制任务"><a href="#3）运行修复内存限制任务" class="headerlink" title="3）运行修复内存限制任务"></a>3）运行修复内存限制任务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run fix-memory-limit<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825171914179.png" alt="image-20210825171914179"></p><p>可以看出，这个包实际上就是自动处理方案一的过程。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 多版本管理工具 — g</title>
    <link href="/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/"/>
    <url>/2021/08/25/golang-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E2%80%94-g/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-多版本管理工具-—-g"><a href="#golang-多版本管理工具-—-g" class="headerlink" title="golang 多版本管理工具 — g"></a>golang 多版本管理工具 — g</h1><span id="more"></span><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1、什么是-g-？"><a href="#1、什么是-g-？" class="headerlink" title="1、什么是 g ？"></a>1、什么是 g ？</h3><p>GVM是一个golang虚拟环境配置工具，其允许一台机器上安装多个golang版本，gvm是第三方开发的Go多版本管理工具，类似ruby里面的rvm工具，或者nodejs的版本管理工具nvm。它是以shell脚本开发的工具，同时兼容bash和zsh，用法和ruby的rvm很像，能做到Go语言版本的切换以及GOPATH的修改。</p><h3 id="2、g-的特性"><a href="#2、g-的特性" class="headerlink" title="2、g 的特性"></a>2、g 的特性</h3><ul><li>支持列出可供安装的go版本号</li><li>支持列出已安装的go版本号</li><li>支持在本地安装多个go版本</li><li>支持卸载已安装的go版本</li><li>支持在已安装的go版本之间自由切换</li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1、Linux-macOS-下自动安装（使用于-bash、zsh-终端）"><a href="#1、Linux-macOS-下自动安装（使用于-bash、zsh-终端）" class="headerlink" title="1、Linux / macOS 下自动安装（使用于 bash、zsh 终端）"></a>1、Linux / macOS 下自动安装（使用于 bash、zsh 终端）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 建议安装前清空`GOROOT`、`GOBIN`等环境变量</span><br>wget -qO- https://raw.githubusercontent.com/voidint/g/master/install.sh | bash<br></code></pre></td></tr></table></figure><blockquote><p>🚩 如果有其他程序的别名占用了 <code>g</code>，比如 git，执行以下操作清除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unalias g<br></code></pre></td></tr></table></figure></blockquote><h3 id="2、手动安装-（可选）"><a href="#2、手动安装-（可选）" class="headerlink" title="2、手动安装 （可选）"></a>2、手动安装 （可选）</h3><h4 id="1）下载对应平台的二进制压缩包"><a href="#1）下载对应平台的二进制压缩包" class="headerlink" title="1）下载对应平台的二进制压缩包"></a>1）下载对应平台的二进制压缩包</h4><p><a href="https://github.com/voidint/g/releases">下载地址</a></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825160732431.png" alt="image-20210825160732431"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 以当前最新版本为例</span><br>wget -c https://github.com/voidint/g/releases/download/v1.2.0/g1.2.0.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h4 id="2）解压缩"><a href="#2）解压缩" class="headerlink" title="2）解压缩"></a>2）解压缩</h4><p>将压缩包解压至<code>PATH</code>环境变量目录下，如<code>/usr/local/bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf g1.2.0.linux-amd64.tar.gz -C /usr/local/bin/<br></code></pre></td></tr></table></figure><h4 id="3）验证"><a href="#3）验证" class="headerlink" title="3）验证"></a>3）验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g -h<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825162431942.png" alt="image-20210825162431942"></p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><h4 id="1）编辑环境变量配置文件"><a href="#1）编辑环境变量配置文件" class="headerlink" title="1）编辑环境变量配置文件"></a>1）编辑环境变量配置文件</h4><p>新建文件，文件路径: <code>/etc/profile.d/g.sh</code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export G_MIRROR=https://golang.google.cn/dl/<br>export G_HOME=~/.g<br>export GOROOT=$G_HOME/go<br>export PATH=$GOROOT/bin:$PATH<br></code></pre></td></tr></table></figure><h4 id="2）加载环境变量配置"><a href="#2）加载环境变量配置" class="headerlink" title="2）加载环境变量配置"></a>2）加载环境变量配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/g.sh<br></code></pre></td></tr></table></figure><blockquote><p>🌈 <code>G_MIRROR</code> 的作用:</p><p>由于中国大陆无法自由访问 Golang官网，导致查询及下载go版本都变得困难，因此可以通过该环境变量指定一个镜像站点（如<code>https://golang.google.cn/dl/</code>），g将从该站点查询、下载可用的go版本，其作用相当于 <code>GOPROXY</code> 之于 Go 的依赖包。</p></blockquote><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="1、安装-go-版本"><a href="#1、安装-go-版本" class="headerlink" title="1、安装 go 版本"></a>1、安装 go 版本</h3><h4 id="1）查询当前稳定版本的-go"><a href="#1）查询当前稳定版本的-go" class="headerlink" title="1）查询当前稳定版本的 go"></a>1）查询当前稳定版本的 go</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g ls-remote stable<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825162918755.png" alt="image-20210825162918755"></p><h4 id="2）安装目标-go-版本-1-16-7"><a href="#2）安装目标-go-版本-1-16-7" class="headerlink" title="2）安装目标 go 版本 1.16.7"></a>2）安装目标 go 版本 <code>1.16.7</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g install 1.16.7<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210825163148164.png" alt="image-20210825163148164"></p><h4 id="3）验证-1"><a href="#3）验证-1" class="headerlink" title="3）验证"></a>3）验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g ls<br></code></pre></td></tr></table></figure><blockquote><p>🚩 带 <code>*</code> 的就表示当前正在使用的版本</p></blockquote><h3 id="2、常用命令详解"><a href="#2、常用命令详解" class="headerlink" title="2、常用命令详解"></a>2、常用命令详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">g ls # 查询已安装的go版本<br>g ls-remote # 查询可供安装的所有go版本<br>g ls-remote stable # 查询当前可供安装的stable状态的go版本<br>g install 1.16.7# 安装目标go版本1.16.7<br>g use 1.15.15 # 切换至1.15.15版本<br>g uninstall 1.15.15 # 卸载一个已安装的go版本<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、初识 GoAdmin</title>
    <link href="/2021/08/24/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-GoAdmin/"/>
    <url>/2021/08/24/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-GoAdmin/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、初识-GoAdmin"><a href="#第1章、初识-GoAdmin" class="headerlink" title="第1章、初识 GoAdmin"></a>第1章、初识 GoAdmin</h1><span id="more"></span><h2 id="一、GoAdmin-简介"><a href="#一、GoAdmin-简介" class="headerlink" title="一、GoAdmin 简介"></a>一、GoAdmin 简介</h2><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210824171658211.png" alt="GoAdmin Logo"></p><p><a href="https://github.com/go-admin-team/go-admin">GoAdmin 官方github</a></p><p><a href="https://doc.zhangwj.com/">GoAdmin 官网文档</a></p><h3 id="1、GoAdmin-是什么？"><a href="#1、GoAdmin-是什么？" class="headerlink" title="1、GoAdmin 是什么？"></a>1、GoAdmin 是什么？</h3><h4 id="1）项目特性"><a href="#1）项目特性" class="headerlink" title="1）项目特性"></a>1）项目特性</h4><h4 id="2）内置功能"><a href="#2）内置功能" class="headerlink" title="2）内置功能"></a>2）内置功能</h4><h3 id="2、GoAdmin-可以实现什么？"><a href="#2、GoAdmin-可以实现什么？" class="headerlink" title="2、GoAdmin 可以实现什么？"></a>2、GoAdmin 可以实现什么？</h3><h2 id="二、本地开发环境调试"><a href="#二、本地开发环境调试" class="headerlink" title="二、本地开发环境调试"></a>二、本地开发环境调试</h2><h3 id="1、实现准备"><a href="#1、实现准备" class="headerlink" title="1、实现准备"></a>1、实现准备</h3><h3 id="2、本地调试"><a href="#2、本地调试" class="headerlink" title="2、本地调试"></a>2、本地调试</h3>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GoAdmin 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab SSL 证书自动化续期解决方案</title>
    <link href="/2021/08/24/Gitlab-SSL-%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/24/Gitlab-SSL-%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitlab-SSL-证书自动续期解决方案"><a href="#Gitlab-SSL-证书自动续期解决方案" class="headerlink" title="Gitlab SSL 证书自动续期解决方案"></a>Gitlab SSL 证书自动续期解决方案</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、初识 Golang</title>
    <link href="/2021/08/21/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Golang/"/>
    <url>/2021/08/21/%E7%AC%AC1%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Golang/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、初识-Golang"><a href="#第1章、初识-Golang" class="headerlink" title="第1章、初识 Golang"></a>第1章、初识 Golang</h1><span id="more"></span><h2 id="一-、Golang-简介"><a href="#一-、Golang-简介" class="headerlink" title="一 、Golang  简介"></a>一 、Golang  简介</h2><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/golang.jpeg" alt="golang"></p><h3 id="1、什么是-Golang-？"><a href="#1、什么是-Golang-？" class="headerlink" title="1、什么是 Golang ？"></a>1、什么是 Golang ？</h3><p>Golang 是一门高并发支持、垃圾回收的<strong>编译型</strong>系统编程语言，旨在创造一门即具有 C/C++ 这类静态编译语言的<strong>高性能</strong>，又具备 Python 这类动态语言的<strong>开发效率</strong>，并在两者之间获得良好平衡的编程语言。</p><p>相较于其他编程语言，Go 无疑是非常年轻的，它诞生于 2006年1月2日下午15点4份5秒，由Google公司开发，并于 2009年11月开源，2012年发布了第一个稳定版本。</p><p>它在多核并发上拥有原生的设计优势，将多线程并发、线程间通信的能力内置在语法层面，无需像 C/C++ 或者 java 那般借助各种第三方框架或者库去实现，大大减轻了分布式系统开发人员在实现底层功能上的负担。</p><p>目前世界上很多公司，特别是中国的互联网公司，即将或者已经完成了使用 Go 语言改造旧系统的过程（没错，和 Java 一样，Go 在中国可能相交于其出身地美国更火）。经过 Go 语言重构的系统能使用更少的硬件资源获得更高的并发和I/O吞吐表现。尤其是目前广泛运用的容器技术，诸如 docker、Kubernetes 等皆是基于 Golang 开发，这一类技术可以充分挖掘硬件设备的潜力，以更小的成本，实现同样的性能需求，这更加能都满足当前精细化运营的市场大环境。</p><h3 id="2、Golang-的主要特性介绍"><a href="#2、Golang-的主要特性介绍" class="headerlink" title="2、Golang  的主要特性介绍"></a>2、Golang  的主要特性介绍</h3><ul><li>数据类型安全  和 内存安全</li><li>高效率的垃圾回收机制</li><li>以非常直观和极低代价的方案实现高并发</li><li>快速编译（同时解决 C语言中头文件太多的问题）</li><li>跨平台性，支持交叉编译</li><li>为多核计算机提供高性能提升的方案</li><li>支持 UTF-8 编码</li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go 编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、部署 prometheus-operator</title>
    <link href="/2021/08/17/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%83%A8%E7%BD%B2-prometheus-operator/"/>
    <url>/2021/08/17/%E7%AC%AC1%E7%AB%A0%E3%80%81%E9%83%A8%E7%BD%B2-prometheus-operator/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、部署-prometheus-operator"><a href="#第1章、部署-prometheus-operator" class="headerlink" title="第1章、部署 prometheus-operator"></a>第1章、部署 prometheus-operator</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、k8s 部署 prometheus</title>
    <link href="/2021/08/17/%E7%AC%AC2%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-prometheus/"/>
    <url>/2021/08/17/%E7%AC%AC2%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-prometheus/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、k8s-部署-prometheus"><a href="#第2章、k8s-部署-prometheus" class="headerlink" title="第2章、k8s 部署 prometheus"></a>第2章、k8s 部署 prometheus</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、k8s 部署 metrics-server</title>
    <link href="/2021/08/17/%E7%AC%AC4%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-metrics-server/"/>
    <url>/2021/08/17/%E7%AC%AC4%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-metrics-server/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、k8s-部署-metrics-server"><a href="#第4章、k8s-部署-metrics-server" class="headerlink" title="第4章、k8s 部署 metrics-server"></a>第4章、k8s 部署 metrics-server</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、k8s 部署 kube-state-metrics</title>
    <link href="/2021/08/16/%E7%AC%AC3%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-kube-state-metrics/"/>
    <url>/2021/08/16/%E7%AC%AC3%E7%AB%A0%E3%80%81k8s-%E9%83%A8%E7%BD%B2-kube-state-metrics/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、k8s-部署-kube-state-metrics"><a href="#第3章、k8s-部署-kube-state-metrics" class="headerlink" title="第3章、k8s 部署 kube-state-metrics"></a>第3章、k8s 部署 kube-state-metrics</h1><span id="more"></span><h2 id="一、K8s-yaml-安装-kube-state-metrics"><a href="#一、K8s-yaml-安装-kube-state-metrics" class="headerlink" title="一、K8s yaml 安装 kube-state-metrics"></a>一、K8s yaml 安装 kube-state-metrics</h2><h3 id="1、版本选择"><a href="#1、版本选择" class="headerlink" title="1、版本选择"></a>1、版本选择</h3><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210816153327662.png" alt="image-20210816153327662"></p><blockquote><p>⚠️ <strong>注意:</strong></p><p>根据官方版本的提示，当前最新版的 metrics 版本<code>(v2.0.0+)</code>支持的为 <code>V1.17</code> 和 <code>V1.18</code> 以后的 k8s 版本，如果是之前的 k8s 版本则选用 <code>v1.9.8</code> 的 metrics 版本，并且当前 1.9.x 的发布版本已经升级到了最新的 v1.9.8 的最新版本了。</p><p><a href="https://github.com/kubernetes/kube-state-metrics/tree/release-1.9/examples/standard">yaml 文件下载地址</a></p><p>由于本文所属 k8s 版本为 <code>V1.15</code> ， <code>v1.9.8</code> 的 kube-state-metrics，对于其并不能兼容，因为 v1.15 版本中使用的某些 API 尚属于 Beta 版本，例如: <strong><code>admissionregistration</code></strong> </p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823162144898.png" alt="v1.9.7版本的概念"></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823145521128.png" alt="image-20210823145521128"></p><p>而 v1.9.8 调用时使用的是正式版本，因此就就会导致问题，因此需要对该API进行一定的修改，以兼容 1.15 老版本的 K8S API。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823145901994.png" alt="kube-state-metrics 1.9.8 源码"></p><p><strong>笔者修改完后的docker 镜像地址:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tareya/kube-state-metrics:v1.9.8-for-k8s1.15<br></code></pre></td></tr></table></figure></blockquote><h3 id="2、下载-yaml"><a href="#2、下载-yaml" class="headerlink" title="2、下载 yaml"></a>2、下载 yaml</h3><h4 id="1）创建目录"><a href="#1）创建目录" class="headerlink" title="1）创建目录"></a>1）创建目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/sofeware/kube-state-metrics<br></code></pre></td></tr></table></figure><h4 id="2）批量下载"><a href="#2）批量下载" class="headerlink" title="2）批量下载"></a>2）批量下载</h4><blockquote><p>🚩 使用 cdn 加速地址下载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for file in cluster-role-binding.yaml cluster-role.yaml deployment.yaml service-account.yaml service.yaml;do wget -c https://cdn.jsdelivr.net/gh/kubernetes/kube-state-metrics@release-1.9/examples/standard/$file -O /data/softwares/kube-state-metrics/$file;done<br></code></pre></td></tr></table></figure><p>下载下来的文件目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/softwares/kube-state-metrics/<br>├── cluster-role-binding.yaml<br>├── cluster-role.yaml<br>├── deployment.yaml<br>├── service-account.yaml<br>└── service.yaml<br></code></pre></td></tr></table></figure><h3 id="3、具体配置"><a href="#3、具体配置" class="headerlink" title="3、具体配置"></a>3、具体配置</h3><h4 id="1）service-account-yaml"><a href="#1）service-account-yaml" class="headerlink" title="1）service-account.yaml"></a>1）service-account.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/service-account.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br></code></pre></td></tr></table></figure><h4 id="2）cluster-role-yaml"><a href="#2）cluster-role-yaml" class="headerlink" title="2）cluster-role.yaml"></a>2）cluster-role.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/cluster-role.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limitranges</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apps</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">batch</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cronjobs</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jobs</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">autoscaling</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">horizontalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authentication.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tokenreviews</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authorization.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">subjectaccessreviews</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">policy</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">poddisruptionbudgets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificates.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificatesigningrequests</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">storage.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">storageclasses</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">volumeattachments</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">admissionregistration.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mutatingwebhookconfigurations</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">validatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networking.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networkpolicies</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br></code></pre></td></tr></table></figure><h4 id="3）cluster-role-binding-yaml"><a href="#3）cluster-role-binding-yaml" class="headerlink" title="3）cluster-role-binding.yaml"></a>3）cluster-role-binding.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/cluster-role-binding.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><h4 id="4）service-yaml"><a href="#4）service-yaml" class="headerlink" title="4）service.yaml"></a>4）service.yaml</h4><blockquote><p>🚩 如果 prometheus 部署在 k8s 内部，则需要开启 prometheus 自动发现功能。</p></blockquote><p>文件路径: <code>/data/softwares/kube-state-metrics/service.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br>  <span class="hljs-attr">annotations:</span>  <br>   <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span>       <span class="hljs-comment">##添加此参数，允许prometheus自动发现</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">telemetry</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">telemetry</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br></code></pre></td></tr></table></figure><h4 id="5）deployment-yaml"><a href="#5）deployment-yaml" class="headerlink" title="5）deployment.yaml"></a>5）deployment.yaml</h4><p>文件路径:<code> /data/softwares/kube-state-metrics/deployment.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.9.8</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-state-metrics</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-state-metrics</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">tareya/kube-state-metrics:v1.9.8-for-k8s1.15</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8081</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">telemetry</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">2048m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">2048Mim</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2048MiMi</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kube-state-metrics</span><br></code></pre></td></tr></table></figure><h3 id="4、发布应用"><a href="#4、发布应用" class="headerlink" title="4、发布应用"></a>4、发布应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/sofeware/kube-state-metrics &amp;&amp; \<br>kubectl apply -f ./<br></code></pre></td></tr></table></figure><h3 id="5、grafana-面板集成"><a href="#5、grafana-面板集成" class="headerlink" title="5、grafana 面板集成"></a>5、grafana 面板集成</h3><blockquote><p>Create ==&gt; Import ==&gt; 8588</p></blockquote><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823152852054.png" alt="image-20210823152852054"></p><h4 id="1）整体使用率和-node、pod-CPU-使用情况"><a href="#1）整体使用率和-node、pod-CPU-使用情况" class="headerlink" title="1）整体使用率和 node、pod CPU 使用情况"></a>1）整体使用率和 node、pod CPU 使用情况</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823153053012.png" alt="image-20210823153053012"></p><h4 id="2）node、pod-内存使用情况"><a href="#2）node、pod-内存使用情况" class="headerlink" title="2）node、pod 内存使用情况"></a>2）node、pod 内存使用情况</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823153252971.png" alt="image-20210823153252971"></p><h4 id="3）node、pod-网络-I-O-使用情况"><a href="#3）node、pod-网络-I-O-使用情况" class="headerlink" title="3）node、pod 网络 I/O 使用情况"></a>3）node、pod 网络 I/O 使用情况</h4><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210823155409078.png" alt="image-20210823155409078"></p><h2 id="二、Helm3-安装-kube-state-metrics"><a href="#二、Helm3-安装-kube-state-metrics" class="headerlink" title="二、Helm3 安装 kube-state-metrics"></a>二、Helm3 安装 kube-state-metrics</h2><p><a href="https://github.com/Tareya/kube-state-metrics-helm">chart github地址</a></p><h3 id="1、自定义-chart"><a href="#1、自定义-chart" class="headerlink" title="1、自定义 chart"></a>1、自定义 chart</h3><h4 id="1）创建-chart"><a href="#1）创建-chart" class="headerlink" title="1）创建 chart"></a>1）创建 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares &amp;&amp; \<br>helm create kube-state-metrics<br></code></pre></td></tr></table></figure><h4 id="2）删除无用模版"><a href="#2）删除无用模版" class="headerlink" title="2）删除无用模版"></a>2）删除无用模版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/softwares/kube-state-metrics &amp;&amp; \<br>rm templates/&#123;hpa.yaml,ingress.yaml&#125;<br></code></pre></td></tr></table></figure><h4 id="3）自定义模版文件"><a href="#3）自定义模版文件" class="headerlink" title="3）自定义模版文件"></a>3）自定义模版文件</h4><h5 id="1-ServiceAccount"><a href="#1-ServiceAccount" class="headerlink" title="1. ServiceAccount"></a>1. ServiceAccount</h5><p>修改文件，文件路径: <code>/data/softwares/kube-state-metrics/templates/serviceaccount.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.serviceAccount.create</span> <span class="hljs-string">-</span>&#125;&#125;<br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.serviceAccountName&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.serviceAccount.annotations</span> &#125;&#125;<br>  <span class="hljs-attr">annotations:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-ClusterRole"><a href="#2-ClusterRole" class="headerlink" title="2. ClusterRole"></a>2. ClusterRole</h5><p>新建文件，文件路径: <code>/data/softwares/kube-state-metrics/templates/clusterrole.yaml</code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span>&#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">rules:</span><br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.certificatesigningrequests</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">certificatesigningrequests</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.configmaps</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.cronjobs</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cronjobs</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.daemonsets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.deployments</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.endpoints</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.horizontalpodautoscalers</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;autoscaling&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">horizontalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.ingresses</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;networking.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.jobs</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jobs</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.limitranges</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limitranges</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.mutatingwebhookconfigurations</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;admissionregistration.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mutatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.namespaces</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.networkpolicies</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;networking.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">networkpolicies</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.nodes</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumeclaims</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumes</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumes</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.poddisruptionbudgets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;policy&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">poddisruptionbudgets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.pods</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicasets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicationcontrollers</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.resourcequotas</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.secrets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.services</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.statefulsets</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.storageclasses</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;storage.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">storageclasses</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.validatingwebhookconfigurations</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;admissionregistration.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">validatingwebhookconfigurations</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.volumeattachments</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;storage.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">volumeattachments</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.verticalpodautoscalers</span> &#125;&#125;<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;autoscaling.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">verticalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>&#123;&#123; <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-ClusterRoleBinding"><a href="#3-ClusterRoleBinding" class="headerlink" title="3. ClusterRoleBinding"></a>3. ClusterRoleBinding</h5><p>新建文件，文件路径: <code>/data/softwares/kube-state-metrics/templates/clusterrolebinding.yaml</code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">and</span> <span class="hljs-string">.Values.rbac.create</span> <span class="hljs-string">.Values.rbac.useClusterRole</span> <span class="hljs-string">-</span>&#125;&#125;<br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span>&#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.rbac.useExistingRole</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.rbac.useExistingRole</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">else</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> <span class="hljs-string">-</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="4-Service"><a href="#4-Service" class="headerlink" title="4. Service"></a>4. Service</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/templates/service.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.service.annotations</span> &#125;&#125;<br>  <span class="hljs-attr">annotations:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> &#123;&#123; <span class="hljs-string">.Values.service.type</span> &#125;&#125;<br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>      <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>      <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.port</span> &#125;&#125;<br>      <span class="hljs-attr">targetPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="5-Deployment"><a href="#5-Deployment" class="headerlink" title="5. Deployment"></a>5. Deployment</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/templates/deployment.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">else</span> &#125;&#125;<br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">namespace:</span> &#123;&#123; <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.labels</span> &#125;&#125;<br>  <span class="hljs-attr">labels:</span><br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">4</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.customLabels</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.customLabels</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">4</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> &#123;&#123; <span class="hljs-string">.Values.replicas</span> &#125;&#125;<br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">template</span> <span class="hljs-string">&quot;kube-state-metrics.name&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br>  <span class="hljs-attr">serviceName:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.fullname&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>  <span class="hljs-attr">volumeClaimTemplates:</span> []<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.name&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.customLabels</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.customLabels</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.podAnnotations</span> &#125;&#125;<br>      <span class="hljs-attr">annotations:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.podAnnotations</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> &#123;&#123; <span class="hljs-string">include</span> <span class="hljs-string">&quot;kube-state-metrics.serviceAccountName&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.imagePullSecrets</span> &#125;&#125;<br>      <span class="hljs-attr">imagePullSecrets:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.imagePullSecrets</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;        <br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.securityContext.enabled</span> &#125;&#125;<br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">fsGroup:</span> &#123;&#123; <span class="hljs-string">.Values.securityContext.fsGroup</span> &#125;&#125;<br>        <span class="hljs-attr">runAsGroup:</span> &#123;&#123; <span class="hljs-string">.Values.securityContext.runAsGroup</span> &#125;&#125;<br>        <span class="hljs-attr">runAsUser:</span> &#123;&#123; <span class="hljs-string">.Values.securityContext.runAsUser</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.priorityClassName</span> &#125;&#125;<br>      <span class="hljs-attr">priorityClassName:</span> &#123;&#123; <span class="hljs-string">.Values.priorityClassName</span> &#125;&#125;<br>    &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">imagePullPolicy:</span> &#123;&#123; <span class="hljs-string">.Values.image.pullPolicy</span> &#125;&#125;<br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.port</span> &#125;&#125;<br>          <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.http.name</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.port</span> &#125;&#125;<br>          <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.service.telemetry.name</span> &#125;&#125;<br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span>      <br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAMESPACE</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>        <span class="hljs-attr">args:</span><br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.extraArgs</span>  &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">range</span> <span class="hljs-string">.Values.extraArgs</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">.</span> &#125;&#125;<br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.certificatesigningrequests</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=certificatesigningrequests</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.configmaps</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=configmaps</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.cronjobs</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=cronjobs</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.daemonsets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=daemonsets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.deployments</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=deployments</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.endpoints</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=endpoints</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.horizontalpodautoscalers</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=horizontalpodautoscalers</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.ingresses</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=ingresses</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.jobs</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=jobs</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.limitranges</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=limitranges</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.mutatingwebhookconfigurations</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=mutatingwebhookconfigurations</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.namespaces</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=namespaces</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.networkpolicies</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=networkpolicies</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.nodes</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=nodes</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumeclaims</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=persistentvolumeclaims</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.persistentvolumes</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=persistentvolumes</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.poddisruptionbudgets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=poddisruptionbudgets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.pods</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=pods</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicasets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=replicasets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.replicationcontrollers</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=replicationcontrollers</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.resourcequotas</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=resourcequotas</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.secrets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=secrets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.services</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=services</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.statefulsets</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=statefulsets</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.storageclasses</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=storageclasses</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.validatingwebhookconfigurations</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=validatingwebhookconfigurations</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.verticalpodautoscalers</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=verticalpodautoscalers</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123;  <span class="hljs-string">if</span> <span class="hljs-string">.Values.collectors.volumeattachments</span>  &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--collectors=volumeattachments</span><br>&#123;&#123;  <span class="hljs-string">end</span>  &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.namespace</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=&#123;&#123;</span> <span class="hljs-string">.Values.namespace</span> <span class="hljs-string">|</span> <span class="hljs-string">join</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#125;&#125;</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.autosharding.enabled</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--pod=$(POD_NAME)</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--pod-namespace=$(POD_NAMESPACE)</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.kubeconfig.enabled</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubeconfig=/opt/k8s/.kube/config</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">.Values.selfMonitor.telemetryHost</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--telemetry-host=&#123;&#123;</span> <span class="hljs-string">.Values.selfMonitor.telemetryHost</span> <span class="hljs-string">&#125;&#125;</span><br>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--telemetry-port=8081</span><br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.resources</span> &#125;&#125;<br>        <span class="hljs-attr">resources:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.resources</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">10</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.affinity</span> &#125;&#125;<br>      <span class="hljs-attr">affinity:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.affinity</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br><br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">.Values.tolerations</span> &#125;&#125;<br>      <span class="hljs-attr">tolerations:</span><br>&#123;&#123; <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.tolerations</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span> &#125;&#125;<br>&#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="6-Chart-yaml"><a href="#6-Chart-yaml" class="headerlink" title="6. Chart.yaml"></a>6. Chart.yaml</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/Chart.yaml </code>，文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v2<br>name: kube-state-metrics<br>type: application<br>version: 1.0.0<br>appVersion: &quot;1.9.8&quot;<br></code></pre></td></tr></table></figure><h5 id="7-values-yaml"><a href="#7-values-yaml" class="headerlink" title="7. values.yaml"></a>7. values.yaml</h5><p>修改文件，文件路径:  <code>/data/softwares/kube-state-metrics/values.yaml </code>，文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">tareya/kube-state-metrics</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-comment"># Overrides the image tag whose default is the chart appVersion.</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;v1.9.8-for-k8s1.15&quot;</span><br><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;kube-system&quot;</span><br><br><span class="hljs-attr">labels:</span> &#123;<br>  <span class="hljs-attr">&quot;k8s-app&quot;:</span> <span class="hljs-string">&quot;kube-state-metrics&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;:</span> <span class="hljs-string">&quot;v1.9.8&quot;</span><br>&#125;<br><br><span class="hljs-attr">imagePullSecrets:</span> []<br><span class="hljs-attr">nameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">fullnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">serviceAccount:</span><br>  <span class="hljs-comment"># Specifies whether a service account should be created</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Annotations to add to the service account</span><br>  <span class="hljs-attr">annotations:</span> &#123;&#125;<br>  <span class="hljs-comment"># The name of the service account to use.</span><br>  <span class="hljs-comment"># If not set and create is true, a name is generated using the fullname template</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;kube-state-metrics&quot;</span><br><br><br><span class="hljs-attr">rbac:</span><br>  <span class="hljs-comment"># If true, create &amp; use RBAC resources</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">useClusterRole:</span> <span class="hljs-literal">true</span><br>  <br><span class="hljs-attr">podAnnotations:</span> &#123;&#125;<br><br><span class="hljs-attr">podSecurityContext:</span> &#123;&#125;<br>  <span class="hljs-comment"># fsGroup: 2000</span><br><br><span class="hljs-attr">securityContext:</span> &#123;&#125;<br>  <span class="hljs-comment"># capabilities:</span><br>  <span class="hljs-comment">#   drop:</span><br>  <span class="hljs-comment">#   - ALL</span><br>  <span class="hljs-comment"># readOnlyRootFilesystem: true</span><br>  <span class="hljs-comment"># runAsNonRoot: true</span><br>  <span class="hljs-comment"># runAsUser: 1000</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><br>  <span class="hljs-attr">http:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;http-metrics&quot;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">telemetry:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;telemetry&quot;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><br>  <span class="hljs-attr">annotations:</span> &#123;<br>    <span class="hljs-attr">&quot;prometheus.io/scrape&quot;:</span> <span class="hljs-string">&quot;true&quot;</span><br>  &#125;<br><br><span class="hljs-attr">customLabels:</span> &#123;&#125;<br><br><span class="hljs-attr">resources:</span> <br>  <span class="hljs-comment"># We usually recommend not to specify default resources and to leave this as a conscious</span><br>  <span class="hljs-comment"># choice for the user. This also increases chances charts run on environments with little</span><br>  <span class="hljs-comment"># resources, such as Minikube. If you do want to specify resources, uncomment the following</span><br>  <span class="hljs-comment"># lines, adjust them as necessary, and remove the curly braces after &#x27;resources:&#x27;.</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1024m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1024m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br><br><span class="hljs-attr">autosharding:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">ingress:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">kubeconfig:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">selfMonitor:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-attr">affinity:</span><br>  <span class="hljs-attr">podAntiAffinity:</span><br>    <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>        <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">exterior-gateway</span><br>      <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br><br><span class="hljs-attr">collectors:</span><br>  <span class="hljs-attr">certificatesigningrequests:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">configmaps:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">cronjobs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">daemonsets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">deployments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">endpoints:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">horizontalpodautoscalers:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ingresses:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">jobs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">limitranges:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mutatingwebhookconfigurations:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">namespaces:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">networkpolicies:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">nodes:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">persistentvolumeclaims:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">persistentvolumes:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">poddisruptionbudgets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">pods:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">replicasets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">replicationcontrollers:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">resourcequotas:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">secrets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">services:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">statefulsets:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">storageclasses:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">validatingwebhookconfigurations:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">verticalpodautoscalers:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">volumeattachments:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="2、发布应用"><a href="#2、发布应用" class="headerlink" title="2、发布应用"></a>2、发布应用</h3><h4 id="1）部署"><a href="#1）部署" class="headerlink" title="1）部署"></a>1）部署</h4><blockquote><p>🚩 本文使用 helm3 进行管理，helm3 中会将 release 的名字独立在各个命名空间中，可以更清晰的进行管理，kube-state-metrics 是 K8S 组件，故将其放到 <code>kube-system</code> 这个 namespace 中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -n kube-system kube-state-metrics /data/softwares/kube-state-metrics<br></code></pre></td></tr></table></figure><h4 id="2）查看发布版本"><a href="#2）查看发布版本" class="headerlink" title="2）查看发布版本"></a>2）查看发布版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list -n kube-system<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210824141007622.png" alt="image-20210824141007622"></p><h4 id="3）检查容器情况"><a href="#3）检查容器情况" class="headerlink" title="3）检查容器情况"></a>3）检查容器情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl describe pod -n kube-system `kubectl get pod -n kube-system|awk &#x27;NR&gt;1&#123;print $1&#125;&#x27;|grep kube-state-metrics`<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210824141436622.png" alt="image-20210824141436622"></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8S 监控快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab(Runner)+Dokcerfile+K8S(MiniKube)实现自动化部署</title>
    <link href="/2021/08/10/Gitlab-Runner-Dokcerfile-K8S-MiniKube-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/08/10/Gitlab-Runner-Dokcerfile-K8S-MiniKube-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitlab-Runner-Dockerfile-K8S-Minikube-实现自动化部署"><a href="#Gitlab-Runner-Dockerfile-K8S-Minikube-实现自动化部署" class="headerlink" title="Gitlab(Runner) + Dockerfile + K8S(Minikube) 实现自动化部署"></a>Gitlab(Runner) + Dockerfile + K8S(Minikube) 实现自动化部署</h1><span id="more"></span><h2 id="一、Minikube-配置"><a href="#一、Minikube-配置" class="headerlink" title="一、Minikube 配置"></a>一、Minikube 配置</h2><blockquote><p>🌈 minikube 安装使用见<br><a href="">Minikube 快速入门手册</a></p></blockquote><p>默认情况下，minikube 的 apiserver 是无法通过外部访问的，所以我们的 gitlab 如果要访问 minikube 就需要开启代理，使 minikube 的 apiserver 可以被外部访问。</p><h3 id="1、配置-apiserver-代理"><a href="#1、配置-apiserver-代理" class="headerlink" title="1、配置 apiserver 代理"></a>1、配置 apiserver 代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl proxy --port=45396 --address=0.0.0.0 --accept-hosts=&quot;^.*&quot;<br></code></pre></td></tr></table></figure><p>参数说明:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–port</td><td>本地监听端口，默认 8001</td></tr><tr><td>–address</td><td>本地监听网卡地址，如果要外部访问，建议设为 0.0.0.0，即监听所有网卡地址</td></tr><tr><td>–accept-hosts</td><td>允许接受所有主机的请求，支持正则表达式</td></tr></tbody></table><h2 id="二、Gitlab-配置"><a href="#二、Gitlab-配置" class="headerlink" title="二、Gitlab 配置"></a>二、Gitlab 配置</h2><h3 id="1、添加-Kubernetes-集群"><a href="#1、添加-Kubernetes-集群" class="headerlink" title="1、添加 Kubernetes 集群"></a>1、添加 Kubernetes 集群</h3><p>![image-20210810170140628](/Users/shenlei/Library/Application Support/typora-user-images/image-20210810170140628.png)</p><h3 id="2、配置-CI-CD"><a href="#2、配置-CI-CD" class="headerlink" title="2、配置 CI/CD"></a>2、配置 CI/CD</h3><h2 id="三、Dockerfile"><a href="#三、Dockerfile" class="headerlink" title="三、Dockerfile"></a>三、Dockerfile</h2>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MiniKube 快速入门手册</title>
    <link href="/2021/08/10/MiniKube-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/08/10/MiniKube-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="MiniKube-快速入门手册"><a href="#MiniKube-快速入门手册" class="headerlink" title="MiniKube 快速入门手册"></a>MiniKube 快速入门手册</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minikube 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第8章、Helm 私有仓库搭建</title>
    <link href="/2021/08/10/%E7%AC%AC8%E7%AB%A0%E3%80%81Helm-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/08/10/%E7%AC%AC8%E7%AB%A0%E3%80%81Helm-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第7章、Helm2 迁移 Helm3</title>
    <link href="/2021/08/10/%E7%AC%AC7%E7%AB%A0%E3%80%81Helm2-%E8%BF%81%E7%A7%BB-Helm3/"/>
    <url>/2021/08/10/%E7%AC%AC7%E7%AB%A0%E3%80%81Helm2-%E8%BF%81%E7%A7%BB-Helm3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第5章、Chart 模版进阶</title>
    <link href="/2021/08/10/%E7%AC%AC5%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%BF%9B%E9%98%B6/"/>
    <url>/2021/08/10/%E7%AC%AC5%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第6章、初识 Release</title>
    <link href="/2021/08/10/%E7%AC%AC6%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Release/"/>
    <url>/2021/08/10/%E7%AC%AC6%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Release/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第4章、Chart 模版详解</title>
    <link href="/2021/07/24/%E7%AC%AC4%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/07/24/%E7%AC%AC4%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Chart-模版详解"><a href="#第4章、Chart-模版详解" class="headerlink" title="第4章、Chart 模版详解"></a>第4章、Chart 模版详解</h1><span id="more"></span><h2 id="一、编写第一个模版"><a href="#一、编写第一个模版" class="headerlink" title="一、编写第一个模版"></a>一、编写第一个模版</h2><h3 id="1、前期准备"><a href="#1、前期准备" class="headerlink" title="1、前期准备"></a>1、前期准备</h3><blockquote><p>🚩 <strong>写在开始之前</strong></p><p>上一章中我们说到过，Helm 出来可以安装官方或者三方提供的 <em>chart</em> 包外，更重要的是支持创建自己的 <code>chart</code>，就行 <em>docker image</em> 和 <em>dockerfile</em>，通过自定义编排，方能实现通过 Helm 来管理我们自己的应用。</p><p>从之前的学习中，我们不难得出 <code>chart</code> 的核心是资源模版 <code>templates</code> 和渲染 <code>.Values</code>，而其中的关键，则是如何写资源模版，虽然其整体声明式和 K8s 的 <em>yaml</em> 表达式是一样的，但是既然模版，自然就要为需要渲染的地方保留变量，并通过语法去获取对应的值，最终才能发生渲染的效果。这个章节我们就来学习如何通过 <code>Chart 模版</code> 的语法来写我们自己的模版。</p></blockquote><h4 id="1）创建一个空的-chart"><a href="#1）创建一个空的-chart" class="headerlink" title="1）创建一个空的 chart"></a>1）创建一个空的 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm create mychart<br></code></pre></td></tr></table></figure><h4 id="2）删除所有默认生成的模版"><a href="#2）删除所有默认生成的模版" class="headerlink" title="2）删除所有默认生成的模版"></a>2）删除所有默认生成的模版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">\rm -rf mychart/templates/*<br></code></pre></td></tr></table></figure><p>然后，我们就可以开始这一章的学习之旅了！！</p><h3 id="2、创建-ConfigMap-模版"><a href="#2、创建-ConfigMap-模版" class="headerlink" title="2、创建 ConfigMap 模版"></a>2、创建 ConfigMap 模版</h3><h4 id="1）创建文件"><a href="#1）创建文件" class="headerlink" title="1）创建文件"></a>1）创建文件</h4><p>文件路径: <code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h5 id="表达式说明"><a href="#表达式说明" class="headerlink" title="表达式说明"></a>表达式说明</h5><p>1⃣️ <code>&#123;&#123; &#125;&#125;</code> 和 <code>.</code> 是什么？</p><p>相较于经典的 yaml 声明式，我们可以发现，最大的变化在于 <code>&#123;&#123; .Release.Name &#125;&#125;</code>。<code>&#123;&#123; &#125;&#125;</code> 就是模版调用的方法，其中加上要引用的元素，模版命令就会将其对用的值作为一个对象注入模版之中，其中 <code>.</code> 用于分割每个命令空间内需要搜索元素，最前面的 <code>.</code>表示从作用域的最顶层搜索对象。模版会从最顶层的命令空间开始搜索 <code>.</code> 指定的对象。</p><p>由此，<code>&#123;&#123; .Release.Name &#125;&#125;</code> 就应当解读为 “<strong>从最顶层的命名空间开始搜索 <code>Release</code> 对象，然后在其中搜索 <code>Name</code> 对象</strong>“。<code>Relase</code> 是 Helm 的内置对象，表示发布本身。</p><p>2⃣️ 为什么要这么处理？</p><p>模版的意义在于复用。通过传入不同的值来渲染出不同的结果，才是模版存在的意义，因此针对模版我们应当坚持 “<strong>可变量化</strong>“的原则，将非通用性的字段进行变量化处理，这样才能使得我们的模版更具备泛用性，增加复用的可能。</p><blockquote><p>⚠️ <strong>注意: Release 名称的长度限制</strong>  </p><p>DNS 系统限制 <code>name</code> 字段的长度不能超过 <strong>63</strong> 个字符，因此 Helm 对 <code>Release</code> 的名称是有长度限制的，<strong>Helm3 对于其长度限制为 53 个字符</strong>。</p></blockquote><h4 id="2）发布-chart"><a href="#2）发布-chart" class="headerlink" title="2）发布 chart"></a>2）发布 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回值如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705160256966.png" alt="image-20210705160256966"></p><p>查看发布:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705161041080.png" alt="image-20210705161041080"></p><h4 id="3）查看-manifest"><a href="#3）查看-manifest" class="headerlink" title="3）查看 manifest"></a>3）查看 manifest</h4><blockquote><p>执行 <code>helm get manifest</code> 可以打印出 <code>release</code> 已经上传到 <code>api server</code> 的资源。每个文件都会以 <code>---</code> `开头，并自动生成注释。</p></blockquote><p>我们可以发现模版中的 <code>&#123;&#123; .Release.Name &#125;&#125;</code> 调用已经渲染成了 Release 的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm get manifest &lt;release_name&gt;</span><br>helm get manifest test-chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705160402893.png" alt="image-20210705160402893"></p><h4 id="4）查看渲染效果（不发布）"><a href="#4）查看渲染效果（不发布）" class="headerlink" title="4）查看渲染效果（不发布）"></a>4）查看渲染效果（不发布）</h4><h5 id="1-卸载应用"><a href="#1-卸载应用" class="headerlink" title="1. 卸载应用"></a>1. 卸载应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm uninstall test-chart<br></code></pre></td></tr></table></figure><h5 id="2-渲染测试"><a href="#2-渲染测试" class="headerlink" title="2. 渲染测试"></a>2. 渲染测试</h5><h6 id="1⃣️-dry-run"><a href="#1⃣️-dry-run" class="headerlink" title="1⃣️ --dry-run"></a>1⃣️ <code>--dry-run</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705162015141.png" alt="image-20210705162015141"></p><h6 id="2⃣️-debug"><a href="#2⃣️-debug" class="headerlink" title="2⃣️ --debug"></a>2⃣️ <code>--debug</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run --debug test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705161728732.png" alt="image-20210705161728732"></p><h3 id="3、Values-的使用"><a href="#3、Values-的使用" class="headerlink" title="3、Values 的使用"></a>3、Values 的使用</h3><p>确切的说，<code>Values</code> 是一个对象，它提供了对于传递到 chart 模版的值的访问方法。其内容的主要来源如下:</p><blockquote><ul><li>chart 中默认的 <code>values.yaml</code> 文件</li><li>如果是<em>子 chart</em>，则为<em>父 chart</em> 的 <code>values.yaml</code> 文件</li><li>命令行使用 <code>-f</code> 指定的 values 文件</li><li>命令行使用 <code>--set</code> 传入的单个参数</li></ul><p>🚩其优先级顺序按照上述列表自下而上，依次减弱。</p></blockquote><h4 id="1）删除默认的-values-yaml"><a href="#1）删除默认的-values-yaml" class="headerlink" title="1）删除默认的 values.yaml"></a>1）删除默认的 values.yaml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f mychart/values.yaml <br></code></pre></td></tr></table></figure><h4 id="2）基本使用"><a href="#2）基本使用" class="headerlink" title="2）基本使用"></a>2）基本使用</h4><h5 id="1-创建-values-yaml"><a href="#1-创建-values-yaml" class="headerlink" title="1. 创建 values.yaml"></a>1. 创建 values.yaml</h5><p>文件路径: <code>mychart/values.yaml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aaa:</span> <span class="hljs-string">bbb</span><br></code></pre></td></tr></table></figure><h5 id="2-在-ConfigMap-模版中引用"><a href="#2-在-ConfigMap-模版中引用" class="headerlink" title="2. 在 ConfigMap 模版中引用"></a>2. 在 <code>ConfigMap</code> 模版中引用</h5><p>文件路径: <code>mychart/templates/configmap.yaml </code>，内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<span class="hljs-comment"># 追加内容</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版"><a href="#3-渲染模版" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染结果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707143605000.png" alt="image-20210707143605000"></p><h4 id="3）多结构化表达式"><a href="#3）多结构化表达式" class="headerlink" title="3）多结构化表达式"></a>3）多结构化表达式</h4><h5 id="1-创建-values-yaml-1"><a href="#1-创建-values-yaml-1" class="headerlink" title="1. 创建 values.yaml"></a>1. 创建 values.yaml</h5><p>文件路径：<code>mychart/other_values.yaml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Tareya</span><br>  <span class="hljs-attr">gender:</span> <span class="hljs-string">male</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h5 id="2-在模版中引用"><a href="#2-在模版中引用" class="headerlink" title="2. 在模版中引用"></a>2. 在模版中引用</h5><p>文件路径：<code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.person.name</span> &#125;&#125;<span class="hljs-comment"># 追加内容</span><br>  <span class="hljs-attr">gender:</span> &#123;&#123; <span class="hljs-string">.Values.person.gender</span> &#125;&#125;<br>  <span class="hljs-attr">age:</span> &#123;&#123; <span class="hljs-string">.Values.person.age</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-1"><a href="#3-渲染模版-1" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><p>你可以发现我们创建的文件名并非默认的 <code>values.yaml</code>。还记得我们之前说过，可以通过 <code>-f</code> 的方式指定 <code>Values</code> 的配置文件吗？这边我们来试验下，执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -f mychart/other_values.yaml --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染结果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707145708150.png" alt="image-20210707145708150"></p><p>可以发现，渲染结果不但读取了默认的 <code>values.yaml</code> ，还读取了我们指定的 <code>other_values.yaml</code>。</p><h4 id="4）使用-set-指定配置参数"><a href="#4）使用-set-指定配置参数" class="headerlink" title="4）使用 --set 指定配置参数"></a>4）使用 <code>--set</code> 指定配置参数</h4><p>还记得我们上面说的 Values 的优先级吗？我们在这边做个简单的验证，上面我们已经在 <code>values.yaml</code> 中设置了 <code>aaa</code> 的值为 <code>bbb</code>，接下来，让我们执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set aaa=abcdefg --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p>渲染结果如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707144128673.png" alt="image-20210707144128673"></p><p>可以发现，原本 <code>values.yaml</code> 中的默认配置被我们命令行指定的配置覆盖了。</p><h4 id="5）通过设置-null-删除默认配置"><a href="#5）通过设置-null-删除默认配置" class="headerlink" title="5）通过设置 null 删除默认配置"></a>5）通过设置 <code>null</code> 删除默认配置</h4><p>我们知道 <code>Values</code> 的配置其实就是一个 Key:Vaule 对，所以如果要从默认的 <code>Values</code> 中删除配置，其实只要将 Key 设置为 <code>null</code>，Helm 在进行渲染的过程中，就会合并并删除对应的 Key。</p><h5 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h5><p>下面我们用一个示例来说明。比如，稳定的 <code>Drupal</code> chart 允许在配置自定义镜像时配置动态探针，默认值如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如果我们想用 <code>exec</code> 来代替 <code>httpGet</code> 重写动态探针，我们可以使用 <code>--set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt]</code> ，在进行最终渲染合并后，生产的 manifest 内容会如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">exec:</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>但是，由于同时存在2个动态探针句柄，所以 K8s 在部署时会报错，这个时候可以执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null<br></code></pre></td></tr></table></figure><p>这种情况下，最终生成的 manifest 如下，<code>httpGet</code> 句柄会被删除：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">exec:</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如此，K8s 才能够正常安装。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、初识 Chart</title>
    <link href="/2021/07/24/%E7%AC%AC3%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Chart%20/"/>
    <url>/2021/07/24/%E7%AC%AC3%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Chart%20/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、初识-Chart"><a href="#第3章、初识-Chart" class="headerlink" title="第3章、初识 Chart"></a>第3章、初识 Chart</h1><span id="more"></span><h2 id="一、Chart-是什么？"><a href="#一、Chart-是什么？" class="headerlink" title="一、Chart 是什么？"></a>一、Chart 是什么？</h2><p>还记得我们在第一章节时介绍 Helm 的三大概念时是如何介绍 <code>chart</code> 这个概念的吗？是的，<code>chart</code> 就像许多语言封装的源码包一样，它是 Helm 使用的封装包的总称。</p><p>我们知道，Kubernetes 将其管理的对象称为资源，例如 deployment、service、ingress 等。而 Helm 作为 K8s 的包管理器，其最大的作用就是通过 chart 的方式整合需要管理的 K8s 中的资源，再通过 Helm 客户端 <strong>统一交由</strong> K8s api server 去执行。</p><hr><h2 id="二、Chart-基础使用"><a href="#二、Chart-基础使用" class="headerlink" title="二、Chart 基础使用"></a>二、Chart 基础使用</h2><h3 id="1、查找-Chart"><a href="#1、查找-Chart" class="headerlink" title="1、查找 Chart"></a>1、查找 Chart</h3><blockquote><p>Helm 提供了2种搜索命令，可用用来从两种来源中进行搜索：</p><ul><li><code>helm search hub</code>：从 <a href="https://artifacthub.io/">Artifact Hub</a> 中查找并列出 helm charts。 Artifact Hub中存放了大量不同的仓库。</li><li><code>helm search repo</code>：从你添加（使用 <code>helm repo add</code>）到本地 helm 客户端中的仓库中进行查找。该命令基于本地数据进行搜索，无需连接互联网。</li></ul></blockquote><h4 id="1）搜索所有公开可用的-charts"><a href="#1）搜索所有公开可用的-charts" class="headerlink" title="1）搜索所有公开可用的 charts"></a>1）搜索所有公开可用的 <code>charts</code></h4><p>执行以下命令从 <code>Artifact Hub</code> 中搜索所有的 <code>wordpress</code> charts：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search hub &lt;chart_name&gt;</span> <br>helm search hub wordpress<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629102731888.png" alt="image-20210629102731888"></p><h4 id="2）搜索本地-stable-源中可用的-charts"><a href="#2）搜索本地-stable-源中可用的-charts" class="headerlink" title="2）搜索本地 stable 源中可用的 charts"></a>2）搜索本地 <code>stable</code> 源中可用的 <code>charts</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search repo &lt;repo_name&gt;</span><br>helm search repo stable<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210628152107519.png" alt="image-20210628152107519"></p><h4 id="3）模糊匹配搜索"><a href="#3）模糊匹配搜索" class="headerlink" title="3）模糊匹配搜索"></a>3）模糊匹配搜索</h4><p>Helm 的搜素使用模糊字符串匹配算法，只需要输入名字的一部分就可以从本地仓库记录中进行搜索，如下搜索 <code>word</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search repo &lt;string&gt;</span><br>helm search repo word<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629103454469.png" alt="image-20210629103454469"></p><h3 id="2、安装-Chart"><a href="#2、安装-Chart" class="headerlink" title="2、安装 Chart"></a>2、安装 Chart</h3><blockquote><p>使用 <code>helm search</code> 找到你想要安装的 helm包后，就可以使用 <code>helm install</code> 来进行安装。最简单使用方案只需要传入两个参数：<code>release的名字</code> 和 <code>chart的名称</code>。</p></blockquote><h4 id="1）安装helm包"><a href="#1）安装helm包" class="headerlink" title="1）安装helm包"></a>1）安装helm包</h4><p>执行以下命令，即创建了一个新的 <code>release</code> 对象，命名为 <code>happy-panda</code> ，如果想要自动生成一名名称，可以使用<code>--generate-name</code> 参数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm install &lt;release_name&gt; &lt;chart_name&gt; （chart名称须具体，如 bitnami/wordpress。不能只是关键字）</span><br>helm install happy-panda bitnami/wordpress<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629104631960.png" alt="image-20210629104631960"></p><h4 id="2）查看运行状态"><a href="#2）查看运行状态" class="headerlink" title="2）查看运行状态"></a>2）查看运行状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list<br></code></pre></td></tr></table></figure><p>返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME     NAMESPACEREVISIONUPDATED                                STATUS  CHART            APP VERSION<br>happy-pandadefault  1       2021-06-29 10:51:13.437131205 +0800 CSTdeployedwordpress-11.0.165.7.2  <br></code></pre></td></tr></table></figure><h4 id="3）查看发布状态"><a href="#3）查看发布状态" class="headerlink" title="3）查看发布状态"></a>3）查看发布状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm status &lt;release_name&gt;</span><br>helm status happy-panda<br></code></pre></td></tr></table></figure><p>返回值和安装时的返回一样。</p><h4 id="4）卸载helm包"><a href="#4）卸载helm包" class="headerlink" title="4）卸载helm包"></a>4）卸载helm包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm uninstall &lt;release_name&gt;</span><br>helm uninstall happy-panda<br></code></pre></td></tr></table></figure><h3 id="3、下载-Chart"><a href="#3、下载-Chart" class="headerlink" title="3、下载 Chart"></a>3、下载 Chart</h3><blockquote><p>Helm 的 chart 同时也支持下载，下载下来的是一个tar包，解压后即可获得官方的 chart 目录，基于目录中提供的文件，我们可以对其中的内容进行修改，进行自定义的发布，同时也可以学习其语法。</p></blockquote><h4 id="1）下载"><a href="#1）下载" class="headerlink" title="1）下载"></a>1）下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm pull &lt;chart_name&gt; （chart名称须具体，如 bitnami/kong。不能只是关键字）</span><br>helm pull bitnami/kong<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701103804465.png" alt="image-20210701103804465"></p><h4 id="2）解压"><a href="#2）解压" class="headerlink" title="2）解压"></a>2）解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf kong-3.7.5.tgz <br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701103958115.png" alt="image-20210701103958115"></p><h4 id="3）目录结构"><a href="#3）目录结构" class="headerlink" title="3）目录结构"></a>3）目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">kong<br>├── Chart.lock<br>├── charts# kong 的 chart 依赖的其他 chart，数据库<br>│   ├── cassandra<br>│   ├── common<br>│   └── postgresql<br>├── Chart.yaml# 包含了chart信息的YAML文件<br>├── ci<br>│   ├── values-editing-containers.yaml<br>│   ├── values-external-cassandra.yaml<br>│   ├── values-external-postgresql.yaml<br>│   ├── values-ingress.yaml<br>│   └── values-metrics-hpa-pdb.yaml<br>├── crds# 自定义资源<br>│   └── custom-resource-definitions.yaml<br>├── README.md<br>├── templates# 资源模版，配置 values 进行渲染，生产有效的 K8s manifest<br>│   ├── dep-ds.yaml<br>│   ├── external-database-secret.yaml<br>│   ├── extra-list.yaml<br>│   ├── _helpers.tpl<br>│   ├── hpa.yaml<br>│   ├── ingress-controller-rbac.yaml<br>│   ├── ingress.yaml<br>│   ├── kong-prometheus-rolebinding.yaml<br>│   ├── kong-prometheus-role.yaml<br>│   ├── kong-script-configmap.yaml<br>│   ├── metrics-exporter-configmap.yaml<br>│   ├── metrics-script-configmap.yaml<br>│   ├── metrics-service.yaml<br>│   ├── migrate-job.yaml<br>│   ├── NOTES.txt<br>│   ├── pdb.yaml<br>│   ├── servicemonitor.yaml<br>│   ├── service.yaml<br>│   └── tls-secrets.yaml<br>└── values.yaml# chart 默认的配置值<br><br></code></pre></td></tr></table></figure><h3 id="4、自建-Chart"><a href="#4、自建-Chart" class="headerlink" title="4、自建 Chart"></a>4、自建 Chart</h3><blockquote><p>除了从远程 helm 仓库中获取官方或三方的 chart 外，Helm 更加重要的功能在于自建 chart，它会创建一个 chart 需要的最小化目录结构以及各必要文件的模版。chart 的整体构造比较类似 ansible 的 roles。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm create &lt;chart_name&gt;</span><br>helm create test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701180328092.png" alt="image-20210701180328092"></p><h3 id="5、检查-Chart"><a href="#5、检查-Chart" class="headerlink" title="5、检查 Chart"></a>5、检查 Chart</h3><blockquote><p>Helm 自动了语法检查工具，其作用类似 <code>nginx -t</code>，会对 chart 的格式或者一些信息进行自检，并返回检查结果，在发布前，进行语法检查是很好的选择。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm lint &lt;chart_name&gt;</span><br>helm lint test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705142216832.png" alt="image-20210705142216832"></p><h3 id="6、上传-Chart"><a href="#6、上传-Chart" class="headerlink" title="6、上传 Chart"></a>6、上传 Chart</h3><h4 id="1）打包-Chart"><a href="#1）打包-Chart" class="headerlink" title="1）打包 Chart"></a>1）打包 Chart</h4><blockquote><p>在上面的一系列操作中我们知道，Helm 仓库中存放的是一个个的 tar 包，而不是目录，因此如果你想上传自建的 chart，就需要将其先行打包。Helm 提供了这样一个命名来将你自建的 chart 打包出 Helm 可识别的格式。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm package &lt;chart_name&gt;</span><br>helm package test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701111357599.png" alt="image-20210701111357599"></p><blockquote><p>🚩 <strong>为什么版本是 0.1.0？</strong></p><p>这是由 Chart.yaml 中的 <code>version</code> 字段决定的。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701111524833.png" alt="image-20210701111524833"></p></blockquote><h4 id="2）上传至私有仓库"><a href="#2）上传至私有仓库" class="headerlink" title="2）上传至私有仓库"></a>2）上传至私有仓库</h4><blockquote><p><strong>四个步骤：</strong></p><p>1）自建私有仓库</p><p>2）生成、更新 chart 索引文件</p><p>3）上传 chart 和索引文件</p><p>4）更新本地 chart 仓库</p></blockquote><h4 id="3）上传至-Helm-Hub"><a href="#3）上传至-Helm-Hub" class="headerlink" title="3）上传至 Helm Hub"></a>3）上传至 Helm Hub</h4><blockquote><p>🚩 <strong>参考文档:</strong></p><p><a href="https://blog.csdn.net/jeffzhesi/article/details/106565173">https://blog.csdn.net/jeffzhesi/article/details/106565173</a></p></blockquote><hr><h2 id="三、Chart-语法释义"><a href="#三、Chart-语法释义" class="headerlink" title="三、Chart 语法释义"></a>三、Chart 语法释义</h2><h3 id="1、chart-基本元素释义："><a href="#1、chart-基本元素释义：" class="headerlink" title="1、chart 基本元素释义："></a>1、chart 基本元素释义：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_chart<br>├── charts# 可选: 本 chart 依赖的其他 chart<br>├── Chart.yaml# 必需: 用于描述 chart 相关信息，包括名称、描述信息、api版本等<br>├── templates# 必需: 做用于 K8s 资源的 yaml 模版<br>│   ├── deployment.yaml# 用于生成 K8s deployment 资源的 yaml 模版，发布应用的基本元素<br>│   ├── _helpers.tpl# 用于定义一些可重用的模板片断，在此文件中的定义在任何资源定义模板中都可用<br>│   ├── hpa.yaml# 用于生成 K8s hpa 的 yaml 模版，如服务需要弹性伸缩策略，则在该模版中定义<br>│   ├── ingress.yaml# 用于生成 K8s ingress 的 yaml 模版，如果服务需要对外放出，则在该模版中定义 ingress<br>│   ├── NOTES.txt# 必需: 用于介绍 chart 部署后的一些信息，比如如何使用这个 chart、列出缺省设置等<br>│   ├── serviceaccount.yaml# 用于生成 K8s serviceaccount 资源的 yaml 模版，如需要创建特定认证对象，则在该模版中定义<br>│   ├── service.yaml# 用于生成 K8s service 资源的 yaml 模版，发布应用的基本元素<br>│   └── tests# helm 的测试钩子<br>│       └── test-connection.yaml<br>└── values.yaml# 必需: 用于存储要渲染至 templates/ 下模版文件中的值<br></code></pre></td></tr></table></figure><h3 id="2、Chart-yaml"><a href="#2、Chart-yaml" class="headerlink" title="2、Chart.yaml"></a>2、Chart.yaml</h3><p>一个标准的 Chart.yaml 包含以下字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-comment"># 必需: chart API 版本, v2 版本为 helm3 语法，v1 版本仍然保留使用</span><br><span class="hljs-attr">name:</span> <span class="hljs-comment"># 必需: chart名称</span><br><span class="hljs-attr">version:</span> <span class="hljs-comment"># 必需: chart 的版本控制标识</span><br><span class="hljs-attr">kubeVersion:</span> <span class="hljs-comment"># 可选: 兼容Kubernetes版本的语义化版本，可以使用运算符，形式如 &gt;= 1.13.0 &lt; 1.15.0</span><br><span class="hljs-attr">description:</span> <span class="hljs-comment"># 可选: 对于这个 chart 的描述信息</span><br><span class="hljs-attr">type:</span> <span class="hljs-comment"># 可选: chart类型, 支持2种类型，application 和 library，默认使用 application</span><br><span class="hljs-attr">keywords:</span><span class="hljs-comment"># 可选: 关于项目的一组关键字</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">home:</span> <span class="hljs-comment"># 可选: 项目home页面的URL</span><br><span class="hljs-attr">sources:</span><span class="hljs-comment"># 可选: 项目源码的URL列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">dependencies:</span> <span class="hljs-comment"># 可选: chart 的依赖项，执行 `helm dep up &lt;chart_name&gt;` 更新依赖，依赖的 chart包 会下载至 charts/ </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-comment"># chart名称, 如 nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-comment"># chart版本, 如 &quot;1.2.3&quot;</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-comment"># 可选: 仓库的完整URL (&quot;https://example.com/charts&quot;) 或别名 (&quot;@repo-name&quot;)</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-comment"># 可选: 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled )</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-comment"># 可选: 用于一次启用/禁用 一组chart的tag</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">import-values:</span>  <span class="hljs-comment"># 可选: 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ImportValue</span>  <br>    <span class="hljs-attr">alias:</span> <span class="hljs-comment"># 可选: 依赖 chart 的别名。当你要多次添加相同的chart时会很有用</span><br><span class="hljs-attr">maintainers:</span> <span class="hljs-comment"># 可选: 维护者信息</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-comment"># 维护者名字 （每个维护者都需要）</span><br>    <span class="hljs-attr">email:</span> <span class="hljs-comment"># 维护者邮箱 （每个维护者可选）</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-comment"># 维护者URL （每个维护者可选）</span><br><span class="hljs-attr">icon:</span> <span class="hljs-comment"># 可选: 用做icon的SVG或PNG图片URL</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-comment"># 可选: 与版本控制的 version 无关，用于指定应用的版本</span><br><span class="hljs-attr">deprecated:</span> <span class="hljs-comment"># 可选: 标记该 chart 已废弃，使用方法为布尔值</span><br><span class="hljs-attr">annotations:</span><br>  <span class="hljs-attr">example:</span> <span class="hljs-comment"># 可选: 按名称输入的批注列表</span><br></code></pre></td></tr></table></figure><h4 id="1）使用-dependencies-表达式管理依赖"><a href="#1）使用-dependencies-表达式管理依赖" class="headerlink" title="1）使用 dependencies 表达式管理依赖"></a>1）使用 dependencies 表达式管理依赖</h4><h5 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><p>Helm3 中，弃用了 <code>requeirements.yaml</code> ，<code>dependencies</code> 字段被合并至了 <code>Chart.yaml</code> 中，但是就语法表达式来说，和之前没有太大的变化。使用方式比较类似 ansible 的 playbook 或 docker compose，其表达式如下，是一个列表形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://example.com/charts</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">3.2</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://another.example.com/charts</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><p><code>name</code> 字段：所需依赖 chart 的名称</p></li><li><p><code>version</code> 字段：所需依赖 chart 的版本</p></li><li><p><code>repository</code> 字段：chart 仓库的完整 URL 或者 仓库的名称</p><p>使用 URL ：<code>https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</code></p><p>使用 仓库名称：<code>@stable</code></p></li></ul><p>🚩  仓库必须事先使用 <code>helm repo add</code> 添加，执行类似如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure></blockquote><h5 id="2-示例说明"><a href="#2-示例说明" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><h6 id="1⃣️-添加仓库"><a href="#1⃣️-添加仓库" class="headerlink" title="1⃣️ 添加仓库"></a>1⃣️ 添加仓库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add bitnami https://charts.bitnami.com/bitnami  <br></code></pre></td></tr></table></figure><h6 id="2⃣️-写依赖表达式"><a href="#2⃣️-写依赖表达式" class="headerlink" title="2⃣️ 写依赖表达式"></a>2⃣️ 写依赖表达式</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">9.3</span><span class="hljs-number">.3</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">&quot;@bitnami&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mariadb</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2.1</span><span class="hljs-number">.6</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">&quot;@bitnami&quot;</span><br></code></pre></td></tr></table></figure><h6 id="3⃣️-更新依赖"><a href="#3⃣️-更新依赖" class="headerlink" title="3⃣️ 更新依赖"></a>3⃣️ 更新依赖</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm dependency update<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210702105136710.png" alt="image-20210702105136710"></p><p>依赖的 chart 包 会被下载到 <code>charts/</code> 目录下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210702105157112.png" alt="image-20210702105157112"></p><h4 id="2）通过-charts-目录手动管理依赖"><a href="#2）通过-charts-目录手动管理依赖" class="headerlink" title="2）通过 charts/ 目录手动管理依赖"></a>2）通过 charts/ 目录手动管理依赖</h4><p>Helm 提供了两种管理依赖的方式，一种是如上所述的 <code>dependencies</code> 表达式，它会遵循语法原则，自动的管理依赖，依赖包会被下载到 <code>charts/</code> 中；另一种方式就是通过 <code>charts/</code> 目录来手动管理依赖，这种方式可以对依赖的 chart 做更多的自定义设置。</p><h5 id="1-基本原则-1"><a href="#1-基本原则-1" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><blockquote><ul><li><code>charts/</code> 下管理的依赖必须是一个 <strong>chart 包</strong> （<code>xxx-1.0.1.tgz</code>）或是一个解压的 <strong>chart 目录</strong></li><li><strong>依赖的名称不能以 <code>_</code> 或 <code>.</code> 开头</strong>，否则会被 chart 加载器忽略</li><li>可以使用 <code>helm pull</code> 将依赖下载到 <code>charts/</code>下</li></ul></blockquote><h5 id="2-示例说明-1"><a href="#2-示例说明-1" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><p>比如 WordPress 的 chart 依赖 Apache 和 mariadb，其目录形式应该如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">wordpress:<br>  Chart.yaml<br><span class="hljs-meta">  #</span><span class="bash"> ...</span><br>  charts/<br>    apache/<br>      Chart.yaml<br>      # ...<br>    mariadb/<br>      Chart.yaml<br>      # ...<br>    memcached/<br>    Chart.yaml<br>      # ...<br></code></pre></td></tr></table></figure><h4 id="3）dependencies-中-condition-和-tags-使用释义"><a href="#3）dependencies-中-condition-和-tags-使用释义" class="headerlink" title="3）dependencies 中 condition 和 tags 使用释义"></a>3）dependencies 中 condition 和 tags 使用释义</h4><h5 id="1-基本原则："><a href="#1-基本原则：" class="headerlink" title="1. 基本原则："></a>1. 基本原则：</h5><blockquote><ul><li><p>条件（condition）优先</p><p>当设置 value 时，如果同时存在 <code>condition</code> 和 <code>tags</code> 的值，那么 <code>condition</code> 的效果会覆盖 <code>tags</code> 的效果。</p></li><li><p>标签（tags）最小化元素</p><p>当 <code>tags</code> 中的任意一个元素的值被设置为 <code>true</code> 时，带有该 <code>tags</code> 的 chart 就会被启用。</p></li><li><p><code>condition</code> 和 <code>tags</code> 在 values.yaml 中必需在缩进的最顶层</p></li><li><p><code>tags</code> 在 values.yaml 中需以以下形式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-string">xxx</span><br>  <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="2-示例说明："><a href="#2-示例说明：" class="headerlink" title="2. 示例说明："></a>2. 示例说明：</h5><p>文件: <code>test_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-string">subchart1.enabled,</span> <span class="hljs-string">global.subchart1.enabled</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-end</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">subchart1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart2</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-string">subchart2.enabled,global.subchart2.enabled</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-end</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">subchart2</span><br></code></pre></td></tr></table></figure><p>文件: <code>test_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">subchart1:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式表示，<code>condition</code> 中带有 <code>subchart1</code> 的 chart 会被启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-attr">front-end:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">back-end:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式表示，<code>tags</code> 中带有 <code>back-end</code> 的 chart 会被启动，而带有 <code>front-end</code> 的则不会被启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">subchart1:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-attr">front-end:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">back-end:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式，当 <code>condition</code> 和 <code>tags</code> 一起使用时，是会发生效果覆盖的，比如，虽然 <code>front-end</code> 设置为了 <code>false</code>，但是由于 <code>subchart1.enabled</code> 设置为 <code>true</code>，条件发生覆盖，所以 chart <code>subchart1</code> 还是会被启用。</p><p>而当 <code>back-end</code> 设置为 <code>true</code> 的时候，条件读取的就是 <code>back-end: true</code> ，因此，即使没有设置 <code>subchart2.enabled</code> 为 <code>true</code>，chart <code>subchart2</code> 也会被启用。</p><h4 id="4）dependencies-中的-alias-使用释义（了解）"><a href="#4）dependencies-中的-alias-使用释义（了解）" class="headerlink" title="4）dependencies  中的 alias 使用释义（了解）"></a>4）dependencies  中的 alias 使用释义（了解）</h4><h5 id="1-基本原则-2"><a href="#1-基本原则-2" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><p>在 <code>dependencies</code> 的表达式中，可以使用 <code>alias</code> 对需求项添加别名，当存在依赖多次复用的时候就可以通过别名的方式来访问该需求项，以此加以区分。（比如 数据库的主从、集群等使用场景）</p><h5 id="2-示例说明-2"><a href="#2-示例说明-2" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><p>文件: <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">alias:</span> <span class="hljs-string">new-subchart-1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">alias:</span> <span class="hljs-string">new-subchart-2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>如上情况，<code>parent_chart</code> 中相当于有 3 个依赖项，<code>subchart</code>、<code>new-subchart-1</code> 、<code>new-subchart-2</code> ，虽然他们是基于同一个 chart 的，但是可以被区别对待。</p><h4 id="5）dependencies-中的-import-values-使用释义（了解）"><a href="#5）dependencies-中的-import-values-使用释义（了解）" class="headerlink" title="5）dependencies  中的 import-values 使用释义（了解）"></a>5）dependencies  中的 import-values 使用释义（了解）</h4><p>从上文中，我们知道，在 <code>charts/</code> 目录下面管理的其实也是 chart，那么它就会遵循 chart 的原则，那么这种情况下，目录结构就是一种  <code>父-子</code> 的关系。在某些场景中，我们可能会需要读取 <em>子 char</em> 的值，Helm 则提供了 <code>import-values</code> 这样一种实现方式。</p><h5 id="1-基本原则-3"><a href="#1-基本原则-3" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><blockquote><ul><li><p>目录结构和文件关系如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">parent_chart:# 父 chart<br>  Chart.yaml# dependencies - child_chart - import-values - Key<br><span class="hljs-meta">  #</span><span class="bash"> ...</span><br>  charts/<br>    child_chart/# 子 chart<br>      Chart.yaml<br>      values.yaml# exports - Key - value<br>      # ...<br></code></pre></td></tr></table></figure></li><li><p>加载器会根据 <code>dependencies - name</code> 找 <em>子 chart</em>，根据 <code>dependencies - import-values</code> 的 key 解析 <em>子 chart</em> 中对应的值</p></li><li><p>加载器默认识别 <code>exports</code></p></li><li><p>没有 <code>exports</code> ，需要以 <code>parent-child</code> 方式明确指明要注入的 <em>子 chart</em> 的值的 Key 和 要被注入的 <em>父 chart</em> 的值的名称</p></li><li><p>import <em>子 chart</em> 所得的值最终会被合并入 <em>父 chart</em> 的 values 中，并会覆盖原有键值</p></li></ul></blockquote><h5 id="2-示例说明-3"><a href="#2-示例说明-3" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><h6 id="1⃣️-使用-exports-的方式"><a href="#1⃣️-使用-exports-的方式" class="headerlink" title="1⃣️ 使用 exports 的方式"></a>1⃣️ 使用 <code>exports</code> 的方式</h6><p>文件:  <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">child_chart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">import-values:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data</span><span class="hljs-comment"># 引用子 chart 的变量 - data</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/charts/child_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">exports:</span><span class="hljs-comment"># 声明变量 data</span><br><span class="hljs-attr">data:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>Helm 会在 <code>import-values</code> 的列表到入内容时，将其中的元素作为 Key，并以此到 <em>子 chart</em> 的 <code>exports</code> 字段查找对应的 Key，并将对应的 value 注入 <em>父 chart</em>  的 values 中，所以最终我们可以在 <em>父 chart</em> 中可获取到的值为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><h6 id="2⃣️-使用-parent-—-child-的方式"><a href="#2⃣️-使用-parent-—-child-的方式" class="headerlink" title="2⃣️ 使用 parent — child 的方式"></a>2⃣️ 使用 <code>parent — child</code> 的方式</h6><blockquote><p>⚠️ <strong>注意:</strong></p><p>如果在 <em>子 chart</em> 的 values.yaml 中没有使用 <code>exports</code> ，就必须指定要注入的 <em>子 chart</em> 值的 源Key 以及 被注入的 <em>父 chart</em> 的值的名称。</p></blockquote><p>文件: <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">child_chart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-attr">import-values:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">child:</span> <span class="hljs-string">default.data</span><br>        <span class="hljs-attr">parent:</span> <span class="hljs-string">myimports</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/charts/child_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">default:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">myint:</span> <span class="hljs-number">999</span><br>    <span class="hljs-attr">mybool:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">myimports:</span><br>  <span class="hljs-attr">myint:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">mybool:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mystring:</span> <span class="hljs-string">&quot;helm tests!&quot;</span><br></code></pre></td></tr></table></figure><p>如上述示例，<code>import-values</code> 的加载器，根据 <code>child</code> 去 child_chart 的 values.yaml 中找 <code>default - data</code> ，并解析出其值，并将其注入到 <em>父 chart</em> 中，并会覆盖原有的键值，由此 <em>父 chart</em> 最终的 values 会合并如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">myimports:</span><br>  <span class="hljs-attr">myint:</span> <span class="hljs-number">999</span><br>  <span class="hljs-attr">mybool:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mystring:</span> <span class="hljs-string">&quot;helm tests!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3、templates-和-values-yaml"><a href="#3、templates-和-values-yaml" class="headerlink" title="3、templates/ 和 values.yaml"></a>3、templates/ 和 values.yaml</h3><h4 id="1）Values-的生效机制"><a href="#1）Values-的生效机制" class="headerlink" title="1）Values 的生效机制"></a>1）Values 的生效机制</h4><p>Values 通过模板中<code>.Values</code>对象可访问的<code>values.yaml</code>文件，也可以通过 <code>.Chart</code> 对象可访问的 <code>Chart.yaml</code> ，以此类推。另外 ，Helm 中有一些预定义的 values，可以将其视为环境变量，具体如下:</p><blockquote><ul><li><p><strong>Release</strong></p><p>该对象描述了版本发布本身。</p><p>使用方法如，<code>&#123;&#123; .Release.Name &#125;&#125;</code> (获取 release 的名称)</p></li><li><p><strong>.Values</strong></p><p>访问 <code>values.yaml</code> 的内容。</p><p>使用方法如，<code>&#123;&#123; .Values.image.repository &#125;&#125;</code> (获取 values.yaml 中 <code>image - repository</code> 的值)</p></li><li><p><strong>.Chart</strong></p><p>访问 <code>Chart.yaml</code> 的内容。</p><p>使用方法如， <code>&#123;&#123; .Chart.Version &#125;&#125;</code> (获得 chart 的版本)、<code>&#123;&#123; .Chart.Maintainers &#125;&#125;</code> (获取 chart 的维护者) </p><p>语法风格遵循 go 模版规则，类似 jinja2。是一种层级检索的方式，<code>.</code> 表示层级，最顶层的 <code>.</code> 即 <code>根</code> 。</p></li><li><p><strong>.Files</strong></p><p>访问 chart 中存在的文件的内容 (<code>.helmignore</code> 除外)。</p><p>使用方法如，<code>&#123;&#123; index .Files "file.name" &#125;&#125;</code> (获取该文件中 <code>name</code>的值)，它等效于 <code>&#123;&#123; .Files.Get name &#125;&#125;</code> 方法。</p><p><code>&#123;&#123; .Files.GetBytes &#125;&#125;</code> 方法等效于访问文件中的 <code>[]byte</code> 对象</p></li><li><p><strong>.Capabilities</strong></p><p>访问 K8s 的 <code>Capabilities</code> 对象。</p><p>使用方法如，<code>&#123;&#123; .Capabilities.KubeVersion &#125;&#125;</code> (获取 K8s 版本)、<code>&#123;&#123; .Capabilities.APIVersions.Has "batch/v1" &#125;&#125;</code>(获取支持的 K8s API 版本)</p></li></ul></blockquote><h4 id="2）templates-中的模版"><a href="#2）templates-中的模版" class="headerlink" title="2）templates/ 中的模版"></a>2）templates/ 中的模版</h4><p>模板文件遵守书写Go模板的标准惯例（查看 <a href="https://golang.org/pkg/text/template/">文本/模板 Go 包文档</a>了解更多）。以发布一个 nginx 的 <code>templates/deployment.yaml</code> 的示例模版为例，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">not</span> <span class="hljs-string">.Values.autoscaling.enabled</span> &#125;&#125;<br>  <span class="hljs-attr">replicas:</span> &#123;&#123; <span class="hljs-string">.Values.replicaCount</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> &#123;&#123; <span class="hljs-string">.Values.image.pullPolicy</span> &#125;&#125;<br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.port</span> &#125;&#125;<br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.resources</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">12</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.nodeSelector</span> &#125;&#125;<br>      <span class="hljs-attr">nodeSelector:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.affinity</span> &#125;&#125;<br>      <span class="hljs-attr">affinity:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.tolerations</span> &#125;&#125;<br>      <span class="hljs-attr">tolerations:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="3）取值-values-yaml-渲染模版"><a href="#3）取值-values-yaml-渲染模版" class="headerlink" title="3）取值 values.yaml 渲染模版"></a>3）取值 values.yaml 渲染模版</h4><p>根据如上模版的变量关系，进行对应文件 value 的配置，涉及到 <code>Chart.yaml</code> 和 <code>values.yaml</code> 两个文件：</p><h5 id="1-Chart-yaml-的必要值"><a href="#1-Chart-yaml-的必要值" class="headerlink" title="1. Chart.yaml 的必要值"></a>1. <code>Chart.yaml</code> 的必要值</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Helm</span> <span class="hljs-string">chart</span> <span class="hljs-string">for</span> <span class="hljs-string">Kubernetes</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">application</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-string">&quot;1.16.0&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-values-yaml-的必要值"><a href="#2-values-yaml-的必要值" class="headerlink" title="2. values.yaml 的必要值"></a>2. <code>values.yaml</code> 的必要值</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;stable&quot;</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br>  <span class="hljs-comment"># targetMemoryUtilizationPercentage: 80</span><br><br><span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br><br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-attr">affinity:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-验证渲染效果"><a href="#3-验证渲染效果" class="headerlink" title="3. 验证渲染效果"></a>3. 验证渲染效果</h5><p>我们可以通过在 <code>helm install</code> 时使用 <code>--dry-run</code> 参数来只渲染模版，而不进行直接部署，这样我们就可以验证效果了。执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run demo test_chart/<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;nginx:stable&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><h4 id="4）-set-指定参数渲染"><a href="#4）-set-指定参数渲染" class="headerlink" title="4）--set 指定参数渲染"></a>4）<code>--set</code> 指定参数渲染</h4><p>当我们在执行 <code>helm install</code> 或者 <code>helm upgrade</code> 时，除了直接通过 <em>values.yaml</em> 渲染外，也支持直接在命令行通过 <code>--set</code> 参数传参，<strong>传入的参数会覆盖 <em>values.yaml</em> 中的预设值</strong>。</p><h5 id="示例：通过-set-修改-镜像版本-和-端口"><a href="#示例：通过-set-修改-镜像版本-和-端口" class="headerlink" title="示例：通过 --set 修改 镜像版本 和 端口"></a>示例：通过 <code>--set</code> 修改 <code>镜像版本</code> 和 <code>端口</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set image.tag=&quot;1.16.0&quot; --set service.port=9999 --dry-run demo test_chart/<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;nginx:1.16.0&quot;</span><span class="hljs-comment"># 镜像版本由原来的 stable 更改为 1.16.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9999</span><span class="hljs-comment"># 端口由原来的 80 更改为 9999</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><h4 id="5）通过-f-指定-Values-文件"><a href="#5）通过-f-指定-Values-文件" class="headerlink" title="5）通过 -f 指定 Values 文件"></a>5）通过 <code>-f</code> 指定 Values 文件</h4><p>chart 默认的 Values 文件命名为 <code>values.yaml</code>，当你在执行 <code>helm install</code> 或 <code>helm upgrade</code> 时，如果名称不是 <code>values.yaml</code>，执行就会出错。<strong>通过命令行 <code>-f</code> 参数，可以指定 Values 文件</strong>，这样文件的名称就不受限制了。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>创建文件 <code>test_chart/demo.yaml</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">replicaCount: 1<br><br>image:<br>  repository: mysql<br>  tag: &quot;8.7.0&quot;<br>  pullPolicy: IfNotPresent<br><br>service:<br>  type: ClusterIP<br>  port: 3306<br><br>resources:<br>  limits:<br>    cpu: 100m<br>    memory: 128Mi<br>  requests:<br>    cpu: 100m<br>    memory: 128Mi<br><br>autoscaling:<br>  enabled: false<br>  minReplicas: 1<br>  maxReplicas: 100<br>  targetCPUUtilizationPercentage: 80<br><span class="hljs-meta">  #</span><span class="bash"> targetMemoryUtilizationPercentage: 80</span><br><br>nodeSelector: &#123;&#125;<br><br>tolerations: []<br><br>affinity: &#123;&#125;<br></code></pre></td></tr></table></figure><p>执行如下命令，进行渲染测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -f test_chart/demo.yaml --dry-run demo test_chart<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;mysql:8.7.0&quot;</span><span class="hljs-comment"># 镜像已更改</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><span class="hljs-comment"># 端口已更改</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br><br></code></pre></td></tr></table></figure><h3 id="4、架构文件-values-schema-json"><a href="#4、架构文件-values-schema-json" class="headerlink" title="4、架构文件 values.schema.json"></a>4、架构文件 <code>values.schema.json</code></h3><p>是否还记得，在第1章中我们介绍过 Helm3 的新功能中增加了 <code>使用JSON Schema</code> 来验证 Chart 的 Values 的机制？事实上，它在 Chart 的表现就是 <code>values.schema.json</code> 文件。在其中<code>required</code> 可以用于定义哪些字段是必须的，<code>type</code> 可用用于定义哪些字段需要是什么字段类型等。</p><blockquote><p>🚩 <strong>当我们在执行如下命令时，Helm 将会以该 Json 定义的架构格式去验证 .Values 对象是否符合规格，只有当验证通过后，才能正常发送给 K8s 执行。</strong></p><ul><li>helm install</li><li>helm upgrade</li><li>helm lint</li><li>helm template</li></ul></blockquote><h4 id="1）格式示例"><a href="#1）格式示例" class="headerlink" title="1）格式示例"></a>1）格式示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://json-schema.org/draft-07/schema#&quot;</span>,<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;image&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Container Image&quot;</span>,<br>      <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;repo&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;tag&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Service name&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;port&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Port&quot;</span>,<br>      <span class="hljs-attr">&quot;minimum&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;required&quot;</span>: [<br>    <span class="hljs-string">&quot;protocol&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;Values&quot;</span>,<br>  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）示例说明"><a href="#2）示例说明" class="headerlink" title="2）示例说明"></a>2）示例说明</h4><p><code>required</code> 字段定义了 Values 中必要的字段，如上例所示，即 <code>protocol</code> 和 <code>port</code> 。另外，<code>name</code> 默也是必须的，因为 <code>service name</code> 是一个 <code>Release</code> 的必要元素，因此，一个符合该架构要求的最精简 <em>values.yaml</em> 应该如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">http</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>上面有提到过，架构文件验证的对象是 <code>.Values 对象</code>，而不是 <em>values.yaml</em> ，也就是说，使用 <code>--set</code> 指定的参数也属于其检测的范畴，因此，如下这种情况也是可以的通过检查的：</p><p><strong>values.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">fronend</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">https</span><br></code></pre></td></tr></table></figure><p><strong>命令行指定 port</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set port=443<br></code></pre></td></tr></table></figure></blockquote><h3 id="5、用户自定义资源-——-CRD"><a href="#5、用户自定义资源-——-CRD" class="headerlink" title="5、用户自定义资源 —— CRD"></a>5、用户自定义资源 —— CRD</h3><p><strong>CRD</strong>（<code>Custom Resource Definition</code>）是 K8s 提供的一种自定义资源对象的机制。在 Helm3 中，使用 <code>crds/</code> 目录来对其进行管理，Helm3 会在安装 <em>chart</em> 之前检查该目录是否存在 CRD 的 yaml 文件，如果存在，则会先加载该目录下的 <strong>所有yaml文件</strong>至 K8s，然后再进行 <em>chart</em> 的发布。</p><blockquote><p>⚠️ <strong>注意以下几点:</strong></p><ul><li>多个 CRD 的表达式可以写在一个 yaml 文件中，但需要以 <strong>开始结束符 “ <code>---</code> “</strong> 进行分割</li><li>CRD文件<strong>无法套用 Helm 模版</strong>，必须是普通的 yaml 格式文件</li><li>安装 chart 时，会先上传 CRD（如有），并同时暂停安装，直到 CRD 被 api server 调用，才会开始后续 chart 渲染步骤。</li></ul></blockquote><h4 id="1）使用示例"><a href="#1）使用示例" class="headerlink" title="1）使用示例"></a>1）使用示例</h4><p>如果要创建一个针对 <code>crontab</code> 的 CRD，需要遵循以下目录结构和语法规则：</p><h5 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_chart/<br>  Chart.yaml<br>  crds/<br>    crontab.yaml<br>  templates/<br>    mycrontab.yaml<br></code></pre></td></tr></table></figure><h5 id="2-crontab-yaml-的写法"><a href="#2-crontab-yaml-的写法" class="headerlink" title="2. crontab.yaml 的写法"></a>2. crontab.yaml 的写法</h5><blockquote><p>⚠️ <strong>注意:</strong> CRD 不支持 Helm 模版指令，所以 crontab.yaml 只能使用 K8s 经典声明表达式。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">crontabs.stable.example.com</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">stable.example.com</span><br>  <span class="hljs-attr">versions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attr">served:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">crontabs</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">crontab</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">CronTab</span><br></code></pre></td></tr></table></figure><h5 id="3-mycrontab-yaml-模版文件"><a href="#3-mycrontab-yaml-模版文件" class="headerlink" title="3. mycrontab.yaml 模版文件"></a>3. mycrontab.yaml 模版文件</h5><p>CRD 的信息在被加载至 K8s 后，就会在 Helm 模版的 <code>.Capabilities</code> 中生效，指定 <code>apiVersion</code> 就可以引用。和其他资源对象一样，你需要通过创建模版，并通过 Values 渲染来创建实例。CRD 的模版文件同其他 template 文件一样。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">stable.example.com</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronTab</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.name</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>   <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h4 id="2）CRD-的限制"><a href="#2）CRD-的限制" class="headerlink" title="2）CRD 的限制"></a>2）CRD 的限制</h4><p>和大部分的 K8s 资源对象不同，CRD 是全局性的，故 Helm 对其的管理较为慎重，并对其设置了一下限制：</p><blockquote><ul><li><p><strong>不会重复安装</strong></p><p>如果 <code>crds/</code> 目录下的 CRD已存在，无论是否有版本区别，都不会重新安装覆盖，不会自动升级</p></li><li><p><strong>不会在升级、回滚时安装</strong></p><p>只有在第一次 <code>helm install</code> 时才会被安装</p></li><li><p><strong>不会被自动删除</strong></p><p>自动删除 CRD 会删除所有 <code>namespace</code> 中的所有 <code>CRD</code> ，故不能通过 Helm 删除</p><p>希望升级或删除 CRD，需要进行手动操作，操作需谨慎</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Helm3 安装部署</title>
    <link href="/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Helm3-安装部署"><a href="#第2章、Helm3-安装部署" class="headerlink" title="第2章、Helm3 安装部署"></a>第2章、Helm3 安装部署</h1><span id="more"></span><h2 id="一、各环境安装部署"><a href="#一、各环境安装部署" class="headerlink" title="一、各环境安装部署"></a>一、各环境安装部署</h2><h3 id="1、Linux"><a href="#1、Linux" class="headerlink" title="1、Linux"></a>1、Linux</h3><h4 id="1）二进制包安装"><a href="#1）二进制包安装" class="headerlink" title="1）二进制包安装"></a>1）二进制包安装</h4><h5 id="1⃣️-下载二进制包"><a href="#1⃣️-下载二进制包" class="headerlink" title="1⃣️ 下载二进制包"></a>1⃣️ 下载二进制包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2⃣️-下载校验文件"><a href="#2⃣️-下载校验文件" class="headerlink" title="2⃣️ 下载校验文件"></a>2⃣️ 下载校验文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://github.com/helm/helm/releases#:~:text=Linux%20amd64%20(-,checksum,-/%20a8ddb4e30435b5fd45308ecce5eaad676d64a5de9c89660b56face3fe990b318)<br></code></pre></td></tr></table></figure><h5 id="3⃣️-md5校验"><a href="#3⃣️-md5校验" class="headerlink" title="3⃣️ md5校验"></a>3⃣️ md5校验</h5><blockquote><p>如果没有<code>shasum</code>命令，需先行安装，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y perl-Digest-SHA <br></code></pre></td></tr></table></figure><p>安装完成后，进行校验</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shasum -a 256 -c helm-v3.5.4-linux-amd64.tar.gz.sha256sum <br></code></pre></td></tr></table></figure><p>如果验证通过，返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm-v3.5.4-linux-amd64.tar.gz: OK<br></code></pre></td></tr></table></figure><p>如果验证失败，返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm-v3.5.4-linux-amd64.tar.gz: FAILED<br>shasum: WARNING: 1 computed checksum did NOT match<br></code></pre></td></tr></table></figure><h5 id="4⃣️-解压安装"><a href="#4⃣️-解压安装" class="headerlink" title="4⃣️ 解压安装"></a>4⃣️ 解压安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf helm-v3.5.4-linux-amd64.tar.gz &amp;&amp; \<br>cd linux-amd64 &amp;&amp; \<br>install -o root -g root -m 0755 helm /usr/local/bin/helm<br></code></pre></td></tr></table></figure><h5 id="5⃣️-验证版本"><a href="#5⃣️-验证版本" class="headerlink" title="5⃣️ 验证版本"></a>5⃣️ 验证版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm version<br></code></pre></td></tr></table></figure><p>正常返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">version.BuildInfo&#123;Version:&quot;v3.5.4&quot;, GitCommit:&quot;1b5edb69df3d3a08df77c9902dc17af864ff05d1&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.15.11&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="2）Apt-安装（Debian-Ubuntu）"><a href="#2）Apt-安装（Debian-Ubuntu）" class="headerlink" title="2）Apt 安装（Debian/Ubuntu）"></a>2）Apt 安装（Debian/Ubuntu）</h4><blockquote><p>官方提供了针对Apt的一个 <code>Helm包</code>，可以使用 <code>Apt命令</code> 自动安装最新版本的 helm。</p></blockquote><h5 id="1⃣️-添加镜像源"><a href="#1⃣️-添加镜像源" class="headerlink" title="1⃣️ 添加镜像源"></a>1⃣️ 添加镜像源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -<br>sudo apt-get install apt-transport-https --yes<br>echo &quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list<br></code></pre></td></tr></table></figure><h5 id="2⃣️-更新缓存"><a href="#2⃣️-更新缓存" class="headerlink" title="2⃣️ 更新缓存"></a>2⃣️ 更新缓存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><h5 id="3⃣️-安装"><a href="#3⃣️-安装" class="headerlink" title="3⃣️ 安装"></a>3⃣️ 安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install helm<br></code></pre></td></tr></table></figure><h4 id="3）自动脚本安装"><a href="#3）自动脚本安装" class="headerlink" title="3）自动脚本安装"></a>3）自动脚本安装</h4><blockquote><p>官方提供了一个可以自动在本地安装最新版本 Helm 的脚本，在版本库的 <code>helm/scripts</code> 下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210628144033780.png" alt="image-20210628144033780"></p><p>🚩 <strong>该脚本会自动识别系统环境，进行下载安装，其他系统环境也可以使用。</strong></p></blockquote><p>执行如下命令，直接自动安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash<br></code></pre></td></tr></table></figure><h4 id="4）添加命令补全"><a href="#4）添加命令补全" class="headerlink" title="4）添加命令补全"></a>4）添加命令补全</h4><p>安装命令补全功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y bash-completion<br></code></pre></td></tr></table></figure><p>新增文件 <code>/etc/profile.d/helm.sh</code>，编辑以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source &lt;(helm completion bash)<br></code></pre></td></tr></table></figure><p>生效环境变量配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/helm.sh<br></code></pre></td></tr></table></figure><h3 id="2、macOS"><a href="#2、macOS" class="headerlink" title="2、macOS"></a>2、macOS</h3><h4 id="使用-Homebrew-安装"><a href="#使用-Homebrew-安装" class="headerlink" title="使用 Homebrew 安装"></a>使用 Homebrew 安装</h4><blockquote><p>官方提供了针对 <code>Homebrew</code> 构建 Helm 的方案，可以使用 <code>brew命令</code> 自动安装最新版本的 helm。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install helm<br></code></pre></td></tr></table></figure><h3 id="3、Windows"><a href="#3、Windows" class="headerlink" title="3、Windows"></a>3、Windows</h3><h4 id="使用-Chocolatey-安装"><a href="#使用-Chocolatey-安装" class="headerlink" title="使用 Chocolatey 安装"></a>使用 Chocolatey 安装</h4><blockquote><p>官方提供了针对 <code>Chocolatey</code> 的一个 <code>Helm包</code>，可以使用 <code>choco命令</code> 自动安装最新版本的 helm。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">choco install kubernetes-helm<br></code></pre></td></tr></table></figure><hr><h2 id="二、添加公共仓库"><a href="#二、添加公共仓库" class="headerlink" title="二、添加公共仓库"></a>二、添加公共仓库</h2><blockquote><p>⚠️ <strong>注意:</strong></p><p>首次安装 Helm3 是没有指定默认仓库的，需要手动添加仓库才可以正常使用。</p></blockquote><h3 id="1、添加常用仓库"><a href="#1、添加常用仓库" class="headerlink" title="1、添加常用仓库"></a>1、添加常用仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> helm repo add stable https://charts.helm.sh/stable<span class="hljs-comment"># Helm 官方源</span></span><br>helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts# 阿里云国内源(用于加速)<br>helm repo add bitnami https://charts.bitnami.com/bitnami# Helm 官方源（Helm3默认使用）<br>helm repo add incubator https://charts.helm.sh/incubator<br>helm repo add jetstack https://charts.jetstack.io<br></code></pre></td></tr></table></figure><blockquote><p>微软也提供了 stable 的镜像仓库，地址为 <code>http://mirror.azure.cn/kubernetes/charts/</code></p></blockquote><h3 id="2、删除仓库"><a href="#2、删除仓库" class="headerlink" title="2、删除仓库"></a>2、删除仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo remove stable<br></code></pre></td></tr></table></figure><h3 id="3、更新仓库"><a href="#3、更新仓库" class="headerlink" title="3、更新仓库"></a>3、更新仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo update<br></code></pre></td></tr></table></figure><h3 id="4、查看仓库"><a href="#4、查看仓库" class="headerlink" title="4、查看仓库"></a>4、查看仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo list<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210630154956853.png" alt="image-20210630154956853"></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、Helm 简介</title>
    <link href="/2021/07/24/%E7%AC%AC1%E7%AB%A0%E3%80%81Helm-%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/07/24/%E7%AC%AC1%E7%AB%A0%E3%80%81Helm-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、Helm-简介"><a href="#第1章、Helm-简介" class="headerlink" title="第1章、Helm 简介"></a>第1章、Helm 简介</h1><span id="more"></span><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/helm3.jpg" alt="helm logo"></p><p><a href="https://helm.sh/">Helm 官网</a></p><p><a href="https://github.com/helm/helm">Helm 官方GitHub</a></p><h2 id="一、什么是-Helm？"><a href="#一、什么是-Helm？" class="headerlink" title="一、什么是 Helm？"></a>一、什么是 Helm？</h2><p>就像 Java 使用 maven；node 使用 npm；python 使用 pip；Linux 使用 yum 或 Apt 一样，不管是什么样的工作，技术人员都会希望有一种资源管理器/包管理器，以此来方便得查找、下载、安装、使用和分发软件包。</p><p>所以 Helm 即可以说是 <code>K8S的包管理器</code>，它使得我们对于 K8S 的操作不再需要细化到资源对象，而是可以作为一个实例进行管理。不再需要去写 <code>deployment</code> 、<code>service</code> 、<code>ingress</code> 的 yaml，而是可以直接通过 <code>install</code> 命令实现服务实例的安装。</p><h3 id="Helm-的主要功能总结："><a href="#Helm-的主要功能总结：" class="headerlink" title="Helm 的主要功能总结："></a>Helm 的主要功能总结：</h3><blockquote><ul><li>查找要安装和使用的预打包软件</li><li>轻松创建和托管自己的软件包</li><li>将软件包安装到任何 K8S 集群中</li><li>查询集群以查看已安装和正在运行的程序包</li><li>更新、删除、回滚或查看已安装软件包的历史记录</li></ul></blockquote><hr><h2 id="二、Helm-中的基本概念"><a href="#二、Helm-中的基本概念" class="headerlink" title="二、Helm 中的基本概念"></a>二、Helm 中的基本概念</h2><h3 id="1、Chart"><a href="#1、Chart" class="headerlink" title="1、Chart"></a>1、<em>Chart</em></h3><p>Helm 使用的包格式称为 <code>chart</code>，它是一个描述 Kubernetes 相关资源对象的文件集合。它的技术特点类似 jinja模版，以渲染模版的方式，生成运行一个服务实例所需的一系列资源对象文件，并以此进行服务的发布。通过这种方式，我们也可以十分简单的制作自定义的 chart。</p><p>Chart 有自已特定的目录布局，我们以官方提供的 <code>wordpress</code>为例说明，chart 的文件目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">wordpress/<br>  Chart.yaml          # 包含了chart信息的YAML文件<br>  LICENSE             # 可选: 包含chart许可证的纯文本文件<br>  README.md           # 可选: 可读的README文件<br>  values.yaml         # chart 默认的配置值<br>  values.schema.json  # 可选: 一个使用JSON结构的values.yaml文件<br>  charts/             # 包含chart依赖的其他chart<br>  crds/               # 自定义资源的定义<br>  templates/          # 模板目录， 当和values 结合时，可生成有效的Kubernetes manifest文件<br>  templates/NOTES.txt # 可选: 包含简要使用说明的纯文本文件<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>Helm Chart 基本元素为 <code>charts/</code>、<code>Chart.yaml </code>、<code>templates/</code>、<code>values.yaml</code>，并保留 <code>crds/</code> ，要正确的使用 chart 进行发布，该元素是必不可少的。</p></blockquote><h3 id="2、Repos"><a href="#2、Repos" class="headerlink" title="2、Repos"></a>2、<em>Repos</em></h3><p>Helm chart 可以被存储在专用的 HTTP 服务器上，称为 <code>chart 仓库（repositories)</code>，和 <code>yum repository</code>类似，chart 仓库提供了一个 <code>index.yaml</code> 来描述一批 chart，并且提供了每个 chart 的下载地址信息。</p><p>Helm 客户端可以指向多个 chart 仓库，默认情况下是没有配置仓库的，需要使用 <code>helm repo add</code> 来进行添加。helm3 中对于一些常用服务的下载安装，用 <code>bitnami 仓库</code>  取代了原来的<code>stable 仓库</code>，但是仍保留了 <code>stable 仓库</code>的使用。</p><h3 id="3、Release"><a href="#3、Release" class="headerlink" title="3、Release"></a>3、<em>Release</em></h3><p>当 chart 被发布后，Helm 库会创建一个 <code>release</code> 来跟踪这个发布的对象，它的实质是在 Kubernetes 中运行的各种资源，<code>service</code>、<code>deployment</code>、<code>configmap</code>、<code>secret</code> 等，在 K8S 集群中的直接的表现就是一个或多个 pod。</p><blockquote><p>⚠️ <strong>注意:</strong>  </p><p>Helm 的 release 是允许启动多个不同服务的，且每个服务之间遵循依赖关系，这点就比较类似 docker compose。</p></blockquote><hr><h2 id="三、从-Helm2-到-Helm3-的变化"><a href="#三、从-Helm2-到-Helm3-的变化" class="headerlink" title="三、从 Helm2 到 Helm3 的变化"></a>三、从 Helm2 到 Helm3 的变化</h2><h3 id="1、Helm3-新增的功能"><a href="#1、Helm3-新增的功能" class="headerlink" title="1、Helm3 新增的功能"></a>1、Helm3 新增的功能</h3><p>Helm3 有很多新的功能，有个重要功能需要特别指出：</p><blockquote><ul><li>release 的信息以新的形式存储</li><li>移除了 Tiller 组件</li><li>Helm3 包含了对新版本 Helm charts （Charts v2）的支持</li><li>Helm3 支持 <code>library charts</code> —— 一种作为其他 charts 元素的 charts</li><li>将 Chart 推送保存到 OCI 注册中心（类似 DockerRegistry ），以进行复用</li><li>升级Kubernetes资源时将应用3向战略合并补丁</li><li>支持使用 JSON Schema 对 charts 的 values 进行校验</li><li>为了使Helm更安全，可用和健壮，已进行了许多小的改进。</li></ul></blockquote><h3 id="2、重要变化概述"><a href="#2、重要变化概述" class="headerlink" title="2、重要变化概述"></a>2、重要变化概述</h3><h4 id="1）移除-Tiller"><a href="#1）移除-Tiller" class="headerlink" title="1）移除 Tiller"></a>1）移除 Tiller</h4><p><code>Tiller</code> 在 Helm2 中是一个重要的组成部分。Helm2 使用它和 <code>GRPC</code> 来处理 <code>Helm chart</code> 的安装和管理，呈现 <code>chart</code> 并将其推送到 Kubernetes API Server。<code>Tiller</code> 允许团队共享一个 Kubernetes 集群，多个 operator 可以使用同一组发行版，团队成员通过它就可以在一个共享的 Kubernetes 集群中管理复杂的应用发布。</p><p>但是从 Kubernetes 1.6 开始，考虑到安全性，集群默认会开启角色访问控制（<code>RBAC</code>），这使得管理和配置Tiller会变得非常复杂，因为可能的安全策略数量太多了。为了简化安全模型实现方式，并使管理员/SRE不需要去深入研究 Kubernetes 的安全组件，helm 提供了一个不需要太过关注安全规则的默认配置，但是这又会使得授权变得宽松，这反而会导致安全隐患。</p><p>因此在 Helm3 中干脆移除了 Tiller，而是选择从 Kubernetes API Server 中获取信息来渲染 Charts 客户端，并在 Kubernetes 中存在安装记录，这些过程既是没有 Tiller 也可以实现。</p><p>Helm3 可以支持所有的 Kubernetes 认证及鉴权等全部安全特性。Helm和本地的 kubeconfig flie 中的配置使用一致的权限。管理员可以按照自己认为合适的粒度来管理用户权限。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/helm3%E5%8F%98%E5%8C%96.png" alt="helm3变化"></p><h4 id="2）Chart-仓库升级"><a href="#2）Chart-仓库升级" class="headerlink" title="2）Chart 仓库升级"></a>2）Chart 仓库升级</h4><p>在 Helm3 中，<code>helm search</code> 除了支持本地 repository 搜索外，还支持 <code>helm search hub</code> 搜索 Artifact Hub 中所有公开的 charts。</p><h4 id="3）改进升级策略：使用三路策略合并补丁"><a href="#3）改进升级策略：使用三路策略合并补丁" class="headerlink" title="3）改进升级策略：使用三路策略合并补丁"></a>3）改进升级策略：使用三路策略合并补丁</h4><p>在 Helm2 中，使用了双路策略合并补丁，简单来说就是在使用 <code>helm upgrade</code> 更新过程中，会比对本次发布的 chart manifest 和 最近一次发布的 chart manifest  的差异，以此来决定哪些更改被应用到 Kubernetes 的资源中去。并且，Helm 只会将最后一次应用的 chart manifest 作为 release 的当前状态，如果 chart 状态没有更改，资源的活动状态就不会更改，也就是说使用诸如 <code>kubectl edit</code> 、<code>kubectl scale</code> 这种外部方式进行的修改不会被 Helm 识别的，这种情况下如果发生回滚操作，Helm 会由于 chart 并没有发生变化而导致回滚失败。</p><p>而在 Helm3 中，这种策略被升级成了三路策略合并，Helm 在生成一个补丁时，也会考虑之前老的 manifest 的活动状态。也就是说，在使用老的 chart manifest 生成新的补丁时，Helm 还会考虑当前的活动状态，并将其与之前老的 manifest 进行比对，并再比对新的 manifest 是否有改动，并进行自动补全，以此来生成最终的更新补丁。</p><h6 id="示例说明："><a href="#示例说明：" class="headerlink" title="示例说明："></a>示例说明：</h6><p>用 Chart 渲染生成的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.0.0</span><br></code></pre></td></tr></table></figure><p>通过非 Helm 的方式将应用的活动状态修改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.0.0</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sidecar</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">dump_handler:1.0.0</span><br></code></pre></td></tr></table></figure><p>而现在我们想要将应用的镜像升级到 <code>2.1.0</code>，通过 chart 进行升级操作。</p><p>在 Helm2 中，由于不会考虑 chart 之外的修改，而是检测 chart 生成的 manifest 之间的区别，因此修改后的状态如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.1.0</span><br></code></pre></td></tr></table></figure><p>而在 Helm3 中，通过三路合并策略，会检查到除了 chart 的修改外，还多了一个 sidecar 容器，因此会进行补全，最终修改状态如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.1.0</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sidecar</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">dump_handler:1.0.0</span><br></code></pre></td></tr></table></figure><h4 id="4）release-名称存储位置改变"><a href="#4）release-名称存储位置改变" class="headerlink" title="4）release 名称存储位置改变"></a>4）release 名称存储位置改变</h4><p>在 Helm2 中，release 的相关信息都被保存在 Tiller 的 namespace下，所以 release 的名称必须是唯一的；而随着 Tiller 组件的移除， Helm3 中release 相关的信息都被保存在了应用自己相对应的 namespace 下，因此根据 namespace 的隔离性质，在不同的 ns 下，release 的名称可以重复。</p><blockquote><p>⚠️ <strong>注意:</strong></p><p>Helm3 中，在执行 <code>helm list</code> 时需要添加 <code>--all-namespaces</code> 参数才能获取到 Helm2 中同样的结果</p></blockquote><h4 id="5）默认存储驱动程序更改为-Secrets"><a href="#5）默认存储驱动程序更改为-Secrets" class="headerlink" title="5）默认存储驱动程序更改为 Secrets"></a>5）默认存储驱动程序更改为 Secrets</h4><p>Helm 2 默认情况下使用 ConfigMaps 存储发行信息，直到 Helm 2.7.0 中，才使用 Secrets 用作存储驱动程序。而在 Helm 3 中默认就使用 Secrets。</p><p><a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/">静态加密密钥</a> 在Kubernetes 1.7中作为alpha特性可以使用了，在Kubernetes 1.13中变成了稳定特性。 这允许用户静态加密Helm的发布元数据，同时也是一个类似Vault的以后可扩展的良好起点。</p><h4 id="6）Go-导入路径更改"><a href="#6）Go-导入路径更改" class="headerlink" title="6）Go 导入路径更改"></a>6）Go 导入路径更改</h4><p>在 Helm3 中，Go 导入路径从<code>k8s.io/helm</code> 切换为 <code>helm.sh/helm/v3</code>。 如果打算升级到Helm 3 Go客户端库，请确保更改导入路径。</p><h4 id="7）使用-JSONSchema-验证-Chart-的-values"><a href="#7）使用-JSONSchema-验证-Chart-的-values" class="headerlink" title="7）使用 JSONSchema 验证 Chart 的 values"></a>7）使用 JSONSchema 验证 Chart 的 values</h4><p>Helm3 支持用<code> JSONSchema</code>  来校验 Chart 的 values，它会自动检查所有输入的变量格式。这样可以确保用户提供的值遵循 Chart 维护者设计的架构，当用户为 Chart 提供一组错误值时，也能提供更好的错误报告。</p><p>当调用一下命令时会进行 JSON 格式验证：</p><blockquote><ul><li>helm install</li><li>helm upgrade</li><li>helm template</li><li>helm lint</li></ul></blockquote><h4 id="8）requirements-yaml合并入-Chart-yaml"><a href="#8）requirements-yaml合并入-Chart-yaml" class="headerlink" title="8）requirements.yaml合并入 Chart.yaml"></a>8）requirements.yaml合并入 Chart.yaml</h4><p>动态依赖关系的chart 依赖从 <code>requirements.yaml</code> 和 <code>requirements.lock</code> 移至 <code>Chart.yaml</code> 和 <code>Chart.lock</code>。 推荐在 Helm3 的新 chart 中使用 Chart API v2 的新格式，但是 Helm3 中依然可以识别 v1 版本，并且会自动加载已有的 <code>requirements.yaml</code> 文件。</p><p>在 Helm2 中，<code>requirements.yaml</code> 的表达式类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mariadb</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">5.</span><span class="hljs-string">x.x</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://charts.helm.sh/stable</span><br>  <span class="hljs-attr">condition:</span> <span class="hljs-string">mariadb.enabled</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">database</span><br></code></pre></td></tr></table></figure><p>而在 Helm3 中，表达式的形式并没有变化，但是现在需要写在 <code>Chart.yaml</code> 中。Chart 依然会下载和放置在 <code>charts/</code> 目录，所以 <code>charts/</code> 目录中的子 chart 不需要做任何修改，可以沿用 Helm2 的。</p><h4 id="9）指定名称和命名空间"><a href="#9）指定名称和命名空间" class="headerlink" title="9）指定名称和命名空间"></a>9）指定名称和命名空间</h4><h5 id="1⃣️-发布时必须指定-release-名称"><a href="#1⃣️-发布时必须指定-release-名称" class="headerlink" title="1⃣️ 发布时必须指定 release 名称"></a>1⃣️ 发布时必须指定 release 名称</h5><p>在 Helm2 中，在发布时如果未提供 release 的名称，Helm 会自动生成一个，但是在 Helm3 中，如果未指定 release 名称，安装就会报错，如果仍然希望 Helm 能够自动生成 release 名称，可以使用 <code>--generate-name</code> 参数。</p><h5 id="2⃣️-不再自动创建-namespace"><a href="#2⃣️-不再自动创建-namespace" class="headerlink" title="2⃣️ 不再自动创建 namespace"></a>2⃣️ 不再自动创建 namespace</h5><p>在 Helm2 中，如果在创建版本时，命名空间不存在，Helm2 会自动创建一个命名空间，但是在 Helm3 中，如果命名空间不存在就会报错，需要明确指定 <code>--create-namespace</code> 参数，Helm3 才会自动创建一个命名空间。</p><h4 id="10）将-Chart-推送到-OCI-注册中心"><a href="#10）将-Chart-推送到-OCI-注册中心" class="headerlink" title="10）将 Chart 推送到 OCI 注册中心"></a>10）将 Chart 推送到 OCI 注册中心</h4><p>这是一个 Helm3 中的试验性特性，使用时需要设置环境变量 <code>HELM_EXPERIMENTAL_OCI=1</code>。</p><p>查看 <code>helm help chart</code> 和 <code>helm help registry</code> 了解如何打包chart并推送到Docker注册中心的更多信息。</p><h4 id="11）移除-helm-serve"><a href="#11）移除-helm-serve" class="headerlink" title="11）移除 helm serve"></a>11）移除 <code>helm serve</code></h4><p>在 Helm2 中，可以通过 <code>helm serve</code> 命令在本地临时搭建 <code>Chart Repository </code>，但是由于并没有被开发工具接受，且在设计方面存在较多问题，故在 Helm3 中被删除了。</p><h4 id="12）支持-library-chart"><a href="#12）支持-library-chart" class="headerlink" title="12）支持 library chart"></a>12）支持 library chart</h4><p>Helm3 支持一类称为 <code>library chart</code> 的 chart，其本省不会创建任何应用，只是作为其他 chart 的共享依赖。library chart 只能用于声明定义元素，全局范围内的非定义内容将被忽略。这使用户可以重复使用和共享可在许多chart中重复使用的代码段，从而避免了冗余并使 chart 保持简洁。</p><p>Library chart 在 Chart.yaml 的依赖指令中声明，安装和管理与其他chart一致，其表达式类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mylib</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">x.x</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">quay.io</span><br></code></pre></td></tr></table></figure><h4 id="13）Chart-yaml-的-apiVersion-升级"><a href="#13）Chart-yaml-的-apiVersion-升级" class="headerlink" title="13）Chart.yaml 的 apiVersion 升级"></a>13）Chart.yaml 的 apiVersion 升级</h4><h5 id="1⃣️-apiVersion-v1-升级至-v2"><a href="#1⃣️-apiVersion-v1-升级至-v2" class="headerlink" title="1⃣️ apiVersion v1 升级至 v2"></a>1⃣️ apiVersion v1 升级至 v2</h5><p>由于 Helm3 中新增了许多新的特性，比如支持 <code>library chart</code> 、<code>requirements.yaml</code> 合并进 <code>Chart.yaml</code>。而客户端虽然可以是别 Helm2 的包格式，却不能理解这些新的特性，因此 Helm3 中的 Chart.yaml 的 apiVersion 也从 v1 升级到可 v2。</p><p>使用 Helm3 的 <code>helm create</code> 创建的 chart 将使用新格式，默认的 apiVersion 也将使用 v2。</p><h5 id="2⃣️-ApiVersion-改为-APIVersion"><a href="#2⃣️-ApiVersion-改为-APIVersion" class="headerlink" title="2⃣️ ApiVersion 改为 APIVersion"></a>2⃣️ ApiVersion 改为 APIVersion</h5><p>Helm3 对于驼峰的命令规范进行了修改，遵循驼峰命名的典型惯例，因此将 <code>.Chart.ApiVersion</code> 更正为了 <code>.Chart.APIVersion</code>，其他诸如 <code>.Capabilities.APIVersions.Has</code> 都进行了更正处理。</p><h4 id="14）XDG-基本目录支持"><a href="#14）XDG-基本目录支持" class="headerlink" title="14）XDG 基本目录支持"></a>14）XDG 基本目录支持</h4><p><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG 基本目录规范</a> 是一个定义了配置、数据和缓存文件应该存储在文件系统什么位置的可移植标准。</p><p>在 Helm2 中，Helm 相关的信息都存储在 <code>~/.helm/</code> 目录下，可以通过设置环境变量 <code>$HELM_HOME</code> 或者 <code>--home</code> 参数指定。而在 Helm3 中，相关的环境变量则变更为了以下规范形式：</p><blockquote><ul><li>$XDG_CACHE_HOME        # 用于存放缓存文件</li><li>$XDG_CONFIG_HOME      # 用于存放配置文件</li><li>$XDG_DATA_HOME          # 用于存放数据文件</li></ul></blockquote><p>但是在 Helm3 中仍保留了 <code>$HELM_HOME</code> 作为 <code>$XDG_DATA_HOME</code> 的别名，以此来保证过渡阶段的兼容性。</p><p>Helm 插件如过要支持 Helm3，也可以用以下环境变量，来适应这种变化：</p><blockquote><ul><li>$HELM_PATH_CACHE       # 用于存放缓存文件</li><li>$HELM_PATH_CONFIG     # 用于存放配置文件</li><li>$HELM_PATH_DATA          # 用于存放数据文件</li></ul></blockquote><h5 id="各环境默认文件存放位置"><a href="#各环境默认文件存放位置" class="headerlink" title="各环境默认文件存放位置"></a>各环境默认文件存放位置</h5><blockquote><p>🚩 可以通过 <code>helm env</code> 查看</p></blockquote><table><thead><tr><th><strong>Operating System</strong></th><th><strong>Cache Path</strong></th><th><strong>Configuration Path</strong></th><th><strong>Data Path</strong></th></tr></thead><tbody><tr><td><strong>Linux</strong></td><td>$HOME/.cache/helm</td><td>$HOME/.config/helm</td><td>$HOME/.local/share/helm</td></tr><tr><td><strong>macOS</strong></td><td>$HOME/Library/Caches/helm</td><td>$HOME/Library/Preferences/helm</td><td>$HOME/Library/helm</td></tr><tr><td><strong>Windows</strong></td><td>%TEMP%\helm</td><td>%APPDATA%\helm</td><td>%APPDATA%\helm</td></tr></tbody></table><h4 id="15）CLI-命令重命名"><a href="#15）CLI-命令重命名" class="headerlink" title="15）CLI 命令重命名"></a>15）CLI 命令重命名</h4><h5 id="1⃣️-helm-delete-更改为-helm-uninstall"><a href="#1⃣️-helm-delete-更改为-helm-uninstall" class="headerlink" title="1⃣️ helm delete 更改为 helm uninstall"></a>1⃣️ <code>helm delete</code> 更改为 <code>helm uninstall</code></h5><p>在 Helm2 中，如果要清楚 release 的各种资源，必须要使用 <code>--purge</code> 参数，Helm3 中默认就会启用次功。</p><p>如果要保留历史行为数据，需执行 <code>helm uninstall --keep-history</code></p><h5 id="2⃣️-helm-inspect-更改为-helm-show"><a href="#2⃣️-helm-inspect-更改为-helm-show" class="headerlink" title="2⃣️ helm inspect 更改为 helm show"></a>2⃣️ <code>helm inspect</code> 更改为 <code>helm show</code></h5><h5 id="3⃣️-helm-fetch-更改为-helm-pull"><a href="#3⃣️-helm-fetch-更改为-helm-pull" class="headerlink" title="3⃣️ helm fetch 更改为 helm pull"></a>3⃣️ <code>helm fetch</code> 更改为 <code>helm pull</code></h5><blockquote><p>🚩 <strong>这些命令还保留了它们较旧的命令作为别名，因此您可以继续以任何一种形式使用它们。</strong></p></blockquote><h4 id="16）简化模板对象-Capabilities"><a href="#16）简化模板对象-Capabilities" class="headerlink" title="16）简化模板对象 .Capabilities"></a>16）简化模板对象 .Capabilities</h4><p><code>Capabilities</code> 是 Helm 模版可以访问的内置对象之一，其提供了关于 Kubernetes 集群支持的功能的信息，包含以下内容：</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>Capabilities.APIVersions</td><td>集群的版本信息</td></tr><tr><td>Capabilities.APIVersions.Has $version</td><td>说明集群中的版本 (例如, <code>batch/v1</code>) 或是资源 (例如, <code>apps/v1/Deployment</code>) 是否可用</td></tr><tr><td>Capabilities.KubeVersion</td><td>提供了查找 Kubernetes 版本的方法。可以获取到 <code>Major</code>，<code>Minor</code>，<code>GitVersion</code>，<code>GitCommit</code>，<code>GitTreeState</code>，<code>BuildDate</code>，<code>GoVersion</code>，<code>Compiler</code>和<code>Platform</code>。</td></tr><tr><td>Capabilities.TillerVersion</td><td>提供了查找Tiller版本的方法。可以获取到<code>SemVer</code>, <code>GitCommit</code>, and <code>GitTreeState</code>.</td></tr></tbody></table><hr><h2 id="四、Helm版本支持策略"><a href="#四、Helm版本支持策略" class="headerlink" title="四、Helm版本支持策略"></a>四、Helm版本支持策略</h2><h3 id="1、-版本形式"><a href="#1、-版本形式" class="headerlink" title="1、 版本形式"></a>1、 版本形式</h3><blockquote><p>Helm 的版本用 <code>x.y.z</code> 的形式描述，<code>x</code> 是主版本，<code>y</code> 是次版本，<code>z</code> 是补丁版本。当一个 Helm 的新版本发布时，都是针对 Kubernetes 的一个特定版本编译的，比如 <code>3.0.0</code> 基于 Kubernetes 的 <code>1.16.2</code> 的客户端API版本构建，则可以兼容 Kubernetes 1.16。</p></blockquote><h3 id="2、可支持的版本偏差"><a href="#2、可支持的版本偏差" class="headerlink" title="2、可支持的版本偏差"></a>2、可支持的版本偏差</h3><blockquote><p>相较于 Helm2 对于 Kubernetes 次版本变更支持的严格（<code>n-1</code>），Helm3 可以向下兼容 <code>n-3</code> 的次版本，比如你使用一个针对 Kubernetes 1.18 客户端 API 版本编译的 Helm3 版本，那么它可以支持的 Kubernetes 版本为 1.18、1.17、1.16、1.15 ；</p><p>如果你使用一个针对 Kubernetes 1.15 客户端 API 版本编译的 Helm2 版本，那么它可以支持的 Kubernetes 版本为 1.15、1.14。</p><p>⚠️ <strong>注意：</strong> Helm 没有向上兼容机制，故推荐安装下表进行版本选择。</p></blockquote><table><thead><tr><th>Helm 版本</th><th>支持的 Kubernetes 版本</th></tr></thead><tbody><tr><td>3.6.x</td><td>1.21.x - 1.18.x</td></tr><tr><td>3.5.x</td><td>1.20.x - 1.17.x</td></tr><tr><td>3.4.x</td><td>1.19.x - 1.16.x</td></tr><tr><td>3.3.x</td><td>1.18.x - 1.15.x</td></tr><tr><td>3.2.x</td><td>1.18.x - 1.15.x</td></tr><tr><td>3.1.x</td><td>1.17.x - 1.14.x</td></tr><tr><td>3.0.x</td><td>1.16.x - 1.13.x</td></tr><tr><td>2.16.x</td><td>1.16.x - 1.15.x</td></tr><tr><td>2.15.x</td><td>1.15.x - 1.14.x</td></tr><tr><td>2.14.x</td><td>1.14.x - 1.13.x</td></tr><tr><td>2.13.x</td><td>1.13.x - 1.12.x</td></tr><tr><td>2.12.x</td><td>1.12.x - 1.11.x</td></tr><tr><td>2.11.x</td><td>1.11.x - 1.10.x</td></tr><tr><td>2.10.x</td><td>1.10.x - 1.9.x</td></tr><tr><td>2.9.x</td><td>1.10.x - 1.9.x</td></tr><tr><td>2.8.x</td><td>1.9.x - 1.8.x</td></tr><tr><td>2.7.x</td><td>1.8.x - 1.7.x</td></tr><tr><td>2.6.x</td><td>1.7.x - 1.6.x</td></tr><tr><td>2.5.x</td><td>1.6.x - 1.5.x</td></tr><tr><td>2.4.x</td><td>1.6.x - 1.5.x</td></tr><tr><td>2.3.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.2.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.1.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.0.x</td><td>1.4.x - 1.3.x</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
