<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第4章、Chart 模版详解</title>
    <link href="/2021/07/24/%E7%AC%AC4%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/07/24/%E7%AC%AC4%E7%AB%A0%E3%80%81Chart-%E6%A8%A1%E7%89%88%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章、Chart-模版详解"><a href="#第4章、Chart-模版详解" class="headerlink" title="第4章、Chart 模版详解"></a>第4章、Chart 模版详解</h1><span id="more"></span><h2 id="一、编写第一个模版"><a href="#一、编写第一个模版" class="headerlink" title="一、编写第一个模版"></a>一、编写第一个模版</h2><h3 id="1、前期准备"><a href="#1、前期准备" class="headerlink" title="1、前期准备"></a>1、前期准备</h3><blockquote><p>🚩 <strong>写在开始之前</strong></p><p>上一章中我们说到过，Helm 出来可以安装官方或者三方提供的 <em>chart</em> 包外，更重要的是支持创建自己的 <code>chart</code>，就行 <em>docker image</em> 和 <em>dockerfile</em>，通过自定义编排，方能实现通过 Helm 来管理我们自己的应用。</p><p>从之前的学习中，我们不难得出 <code>chart</code> 的核心是资源模版 <code>templates</code> 和渲染 <code>.Values</code>，而其中的关键，则是如何写资源模版，虽然其整体声明式和 K8s 的 <em>yaml</em> 表达式是一样的，但是既然模版，自然就要为需要渲染的地方保留变量，并通过语法去获取对应的值，最终才能发生渲染的效果。这个章节我们就来学习如何通过 <code>Chart 模版</code> 的语法来写我们自己的模版。</p></blockquote><h4 id="1）创建一个空的-chart"><a href="#1）创建一个空的-chart" class="headerlink" title="1）创建一个空的 chart"></a>1）创建一个空的 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm create mychart<br></code></pre></td></tr></table></figure><h4 id="2）删除所有默认生成的模版"><a href="#2）删除所有默认生成的模版" class="headerlink" title="2）删除所有默认生成的模版"></a>2）删除所有默认生成的模版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">\rm -rf mychart/templates/*<br></code></pre></td></tr></table></figure><p>然后，我们就可以开始这一章的学习之旅了！！</p><h3 id="2、创建-ConfigMap-模版"><a href="#2、创建-ConfigMap-模版" class="headerlink" title="2、创建 ConfigMap 模版"></a>2、创建 ConfigMap 模版</h3><h4 id="1）创建文件"><a href="#1）创建文件" class="headerlink" title="1）创建文件"></a>1）创建文件</h4><p>文件路径: <code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h5 id="表达式说明"><a href="#表达式说明" class="headerlink" title="表达式说明"></a>表达式说明</h5><p>1⃣️ <code>&#123;&#123; &#125;&#125;</code> 和 <code>.</code> 是什么？</p><p>相较于经典的 yaml 声明式，我们可以发现，最大的变化在于 <code>&#123;&#123; .Release.Name &#125;&#125;</code>。<code>&#123;&#123; &#125;&#125;</code> 就是模版调用的方法，其中加上要引用的元素，模版命令就会将其对用的值作为一个对象注入模版之中，其中 <code>.</code> 用于分割每个命令空间内需要搜索元素，最前面的 <code>.</code>表示从作用域的最顶层搜索对象。模版会从最顶层的命令空间开始搜索 <code>.</code> 指定的对象。</p><p>由此，<code>&#123;&#123; .Release.Name &#125;&#125;</code> 就应当解读为 “<strong>从最顶层的命名空间开始搜索 <code>Release</code> 对象，然后在其中搜索 <code>Name</code> 对象</strong>“。<code>Relase</code> 是 Helm 的内置对象，表示发布本身。</p><p>2⃣️ 为什么要这么处理？</p><p>模版的意义在于复用。通过传入不同的值来渲染出不同的结果，才是模版存在的意义，因此针对模版我们应当坚持 “<strong>可变量化</strong>“的原则，将非通用性的字段进行变量化处理，这样才能使得我们的模版更具备泛用性，增加复用的可能。</p><blockquote><p>⚠️ <strong>注意: Release 名称的长度限制</strong>  </p><p>DNS 系统限制 <code>name</code> 字段的长度不能超过 <strong>63</strong> 个字符，因此 Helm 对 <code>Release</code> 的名称是有长度限制的，<strong>Helm3 对于其长度限制为 53 个字符</strong>。</p></blockquote><h4 id="2）发布-chart"><a href="#2）发布-chart" class="headerlink" title="2）发布 chart"></a>2）发布 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回值如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705160256966.png" alt="image-20210705160256966"></p><p>查看发布:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705161041080.png" alt="image-20210705161041080"></p><h4 id="3）查看-manifest"><a href="#3）查看-manifest" class="headerlink" title="3）查看 manifest"></a>3）查看 manifest</h4><blockquote><p>执行 <code>helm get manifest</code> 可以打印出 <code>release</code> 已经上传到 <code>api server</code> 的资源。每个文件都会以 <code>---</code> `开头，并自动生成注释。</p></blockquote><p>我们可以发现模版中的 <code>&#123;&#123; .Release.Name &#125;&#125;</code> 调用已经渲染成了 Release 的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm get manifest &lt;release_name&gt;</span><br>helm get manifest test-chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705160402893.png" alt="image-20210705160402893"></p><h4 id="4）查看渲染效果（不发布）"><a href="#4）查看渲染效果（不发布）" class="headerlink" title="4）查看渲染效果（不发布）"></a>4）查看渲染效果（不发布）</h4><h5 id="1-卸载应用"><a href="#1-卸载应用" class="headerlink" title="1. 卸载应用"></a>1. 卸载应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm uninstall test-chart<br></code></pre></td></tr></table></figure><h5 id="2-渲染测试"><a href="#2-渲染测试" class="headerlink" title="2. 渲染测试"></a>2. 渲染测试</h5><h6 id="1⃣️-dry-run"><a href="#1⃣️-dry-run" class="headerlink" title="1⃣️ --dry-run"></a>1⃣️ <code>--dry-run</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705162015141.png" alt="image-20210705162015141"></p><h6 id="2⃣️-debug"><a href="#2⃣️-debug" class="headerlink" title="2⃣️ --debug"></a>2⃣️ <code>--debug</code></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run --debug test-chart ./mychart<br></code></pre></td></tr></table></figure><p>返回如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705161728732.png" alt="image-20210705161728732"></p><h3 id="3、Values-的使用"><a href="#3、Values-的使用" class="headerlink" title="3、Values 的使用"></a>3、Values 的使用</h3><p>确切的说，<code>Values</code> 是一个对象，它提供了对于传递到 chart 模版的值的访问方法。其内容的主要来源如下:</p><blockquote><ul><li>chart 中默认的 <code>values.yaml</code> 文件</li><li>如果是<em>子 chart</em>，则为<em>父 chart</em> 的 <code>values.yaml</code> 文件</li><li>命令行使用 <code>-f</code> 指定的 values 文件</li><li>命令行使用 <code>--set</code> 传入的单个参数</li></ul><p>🚩其优先级顺序按照上述列表自下而上，依次减弱。</p></blockquote><h4 id="1）删除默认的-values-yaml"><a href="#1）删除默认的-values-yaml" class="headerlink" title="1）删除默认的 values.yaml"></a>1）删除默认的 values.yaml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f mychart/values.yaml <br></code></pre></td></tr></table></figure><h4 id="2）基本使用"><a href="#2）基本使用" class="headerlink" title="2）基本使用"></a>2）基本使用</h4><h5 id="1-创建-values-yaml"><a href="#1-创建-values-yaml" class="headerlink" title="1. 创建 values.yaml"></a>1. 创建 values.yaml</h5><p>文件路径: <code>mychart/values.yaml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aaa:</span> <span class="hljs-string">bbb</span><br></code></pre></td></tr></table></figure><h5 id="2-在-ConfigMap-模版中引用"><a href="#2-在-ConfigMap-模版中引用" class="headerlink" title="2. 在 ConfigMap 模版中引用"></a>2. 在 <code>ConfigMap</code> 模版中引用</h5><p>文件路径: <code>mychart/templates/configmap.yaml </code>，内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<span class="hljs-comment"># 追加内容</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版"><a href="#3-渲染模版" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染结果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707143605000.png" alt="image-20210707143605000"></p><h4 id="3）多结构化表达式"><a href="#3）多结构化表达式" class="headerlink" title="3）多结构化表达式"></a>3）多结构化表达式</h4><h5 id="1-创建-values-yaml-1"><a href="#1-创建-values-yaml-1" class="headerlink" title="1. 创建 values.yaml"></a>1. 创建 values.yaml</h5><p>文件路径：<code>mychart/other_values.yaml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Tareya</span><br>  <span class="hljs-attr">gender:</span> <span class="hljs-string">male</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h5 id="2-在模版中引用"><a href="#2-在模版中引用" class="headerlink" title="2. 在模版中引用"></a>2. 在模版中引用</h5><p>文件路径：<code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.person.name</span> &#125;&#125;<span class="hljs-comment"># 追加内容</span><br>  <span class="hljs-attr">gender:</span> &#123;&#123; <span class="hljs-string">.Values.person.gender</span> &#125;&#125;<br>  <span class="hljs-attr">age:</span> &#123;&#123; <span class="hljs-string">.Values.person.age</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-1"><a href="#3-渲染模版-1" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><p>你可以发现我们创建的文件名并非默认的 <code>values.yaml</code>。还记得我们之前说过，可以通过 <code>-f</code> 的方式指定 <code>Values</code> 的配置文件吗？这边我们来试验下，执行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -f mychart/other_values.yaml --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染结果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707145708150.png" alt="image-20210707145708150"></p><p>可以发现，渲染结果不但读取了默认的 <code>values.yaml</code> ，还读取了我们指定的 <code>other_values.yaml</code>。</p><h4 id="4）使用-set-指定配置参数"><a href="#4）使用-set-指定配置参数" class="headerlink" title="4）使用 --set 指定配置参数"></a>4）使用 <code>--set</code> 指定配置参数</h4><p>还记得我们上面说的 Values 的优先级吗？我们在这边做个简单的验证，上面我们已经在 <code>values.yaml</code> 中设置了 <code>aaa</code> 的值为 <code>bbb</code>，接下来，让我们执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set aaa=abcdefg --dry-run test-chart ./mychart<br></code></pre></td></tr></table></figure><p>渲染结果如下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707144128673.png" alt="image-20210707144128673"></p><p>可以发现，原本 <code>values.yaml</code> 中的默认配置被我们命令行指定的配置覆盖了。</p><h4 id="5）通过设置-null-删除默认配置"><a href="#5）通过设置-null-删除默认配置" class="headerlink" title="5）通过设置 null 删除默认配置"></a>5）通过设置 <code>null</code> 删除默认配置</h4><p>我们知道 <code>Values</code> 的配置其实就是一个 Key:Vaule 对，所以如果要从默认的 <code>Values</code> 中删除配置，其实只要将 Key 设置为 <code>null</code>，Helm 在进行渲染的过程中，就会合并并删除对应的 Key。</p><h5 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h5><p>下面我们用一个示例来说明。比如，稳定的 <code>Drupal</code> chart 允许在配置自定义镜像时配置动态探针，默认值如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如果我们想用 <code>exec</code> 来代替 <code>httpGet</code> 重写动态探针，我们可以使用 <code>--set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt]</code> ，在进行最终渲染合并后，生产的 manifest 内容会如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">exec:</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>但是，由于同时存在2个动态探针句柄，所以 K8s 在部署时会报错，这个时候可以执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null<br></code></pre></td></tr></table></figure><p>这种情况下，最终生成的 manifest 如下，<code>httpGet</code> 句柄会被删除：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">exec:</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如此，K8s 才能够正常安装。</p><hr><h2 id="二、Helm-的内置对象列表"><a href="#二、Helm-的内置对象列表" class="headerlink" title="二、Helm 的内置对象列表"></a>二、Helm 的内置对象列表</h2><h3 id="1、Release"><a href="#1、Release" class="headerlink" title="1、Release"></a>1、Release</h3><p>该对象描述了版本发布本身，内部元素对象如下：</p><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td><strong>.Release.Name</strong></td><td>release 的名称</td></tr><tr><td><strong>.Release.Namespace</strong></td><td>当次版包含的命名空间</td></tr><tr><td><strong>.Release.IsInstall</strong></td><td>如果当前操作为安装，则该值会设置为 <code>true</code></td></tr><tr><td><strong>.Release.IsUpgrade</strong></td><td>如果当前操作为升级或者回滚，则该值会设置为 <code>true</code></td></tr><tr><td><strong>.Release.Revision</strong></td><td>此次修订的版本号，初次安装时为1，每次升级或回滚操作都会自增1</td></tr><tr><td><strong>.Release.Service</strong></td><td>用于渲染当前模版的 service，Helm 中一般为 <code>helm</code></td></tr></tbody></table><h3 id="2、Files"><a href="#2、Files" class="headerlink" title="2、Files"></a>2、Files</h3><p>该对象其实是一组方法，通过其可以访问 <em>chart</em> 中文件（如，<code>.helmignore</code>），内部方法对象如下：</p><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td><strong>.Files.Get</strong></td><td>通过文件名获取文件内容的方法，使用方法如 <code>.Files.Getconfig.ini</code>，<em>config.ini</em> 为文件名</td></tr><tr><td><strong>.Files.GetBytes</strong></td><td>用字节数组代替字符串获取文件内容的方法。 对图片之类的文件很有用</td></tr><tr><td><strong>.Files.Glob</strong></td><td>用给定的 shell glob 模式匹配文件名，并返回一个列表</td></tr><tr><td><strong>.Files.Lines</strong></td><td>逐行读取文件内容的方法。迭代文件中每一行时很有用</td></tr><tr><td><strong>.Files.AsSecrets</strong></td><td>使用Base 64编码字符串返回文件体的方法</td></tr><tr><td><strong>.Files.AsConfig</strong></td><td>使用YAML格式返回文件体的方法</td></tr></tbody></table><h3 id="3、Capabilities"><a href="#3、Capabilities" class="headerlink" title="3、Capabilities"></a>3、Capabilities</h3><p>该对象提供了关于 Kubernetes 集群支持功能的信息，内部元素对象如下：</p><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td><strong>.Capabilities.APIVersions</strong></td><td>Kubernetes 内部使用的版本集合</td></tr><tr><td><strong>.Capabilities.APIVersions.Has $version</strong></td><td>说明集群中的版本 (如, <code>batch/v1</code>) 或是资源 (如, <code>apps/v1/Deployment</code>) 是否可用</td></tr><tr><td><strong>.Capabilities.KubeVersion</strong></td><td>Kubernetes的版本号</td></tr><tr><td><strong>.Capabilities.KubeVersion.Version</strong></td><td>Kubernetes的版本号</td></tr><tr><td><strong>.Capabilities.KubeVersion.Major</strong></td><td>Kubernetes的主版本</td></tr><tr><td><strong>.Capabilities.KubeVersion.Minor</strong></td><td>Kubernetes的次版本</td></tr></tbody></table><h3 id="4、Template"><a href="#4、Template" class="headerlink" title="4、Template"></a>4、Template</h3><p>该对象包含了已经被执行的当前模版的信息，内部元素对象如下:</p><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td><strong>.Template.Name</strong></td><td>当前模板的命名空间文件路径 (如， <code>mychart/templates/configmap.yaml</code>)</td></tr><tr><td><strong>.Template.BasePath</strong></td><td>当前chart模板目录的路径 (如，<code>mychart/templates</code>)</td></tr></tbody></table><h3 id="5、Values"><a href="#5、Values" class="headerlink" title="5、Values"></a>5、Values</h3><p>该对象是从 <code>values.yaml</code> 文件，用户通过 <code>-f</code> 参数指定的文件以及命令行 <code>--set</code> 参数传入的方式注入模版的。<code>Values</code> 默认为空。</p><h3 id="6、Chart"><a href="#6、Chart" class="headerlink" title="6、Chart"></a>6、Chart</h3><p>该对象表示的是 <code>Chart.yaml</code> 文件的内容。其中任意的有效数据都可以以诸诸如 <code>&#123;&#123; .Chart.Nmae &#125;&#125;-&#123;&#123; .Chart.Version&#125;&#125;</code> 这样的方式访问。</p><hr><h2 id="三、常用模版函数"><a href="#三、常用模版函数" class="headerlink" title="三、常用模版函数"></a>三、常用模版函数</h2><h3 id="1、quote-函数和-squote-函数"><a href="#1、quote-函数和-squote-函数" class="headerlink" title="1、quote 函数和 squote 函数"></a>1、quote 函数和 squote 函数</h3><p><code>quote</code> 函数是 <code>Sprig</code> 模版库提供的一种字符串函数，它的用途实际上就是用双引号将字符串扩起来（转字符串），如果需要 <code>&quot;</code> ，则需要添加 <code>\</code> 来进行转译。</p><p><code>squote</code> 函数的用途是用单引号将字符串扩起来，它和 <code>quote</code> 函数唯一的区别在于，<code>squote</code> 函数不会对内容进行转译。</p><h4 id="示例说明："><a href="#示例说明：" class="headerlink" title="示例说明："></a>示例说明：</h4><h5 id="1-模版文件"><a href="#1-模版文件" class="headerlink" title="1. 模版文件"></a>1. 模版文件</h5><p>路径: <code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<br>  <span class="hljs-attr">bbb:</span> &#123;&#123; <span class="hljs-string">quote</span> <span class="hljs-string">.Values.bbb</span> &#125;&#125;<br>  <span class="hljs-attr">ccc:</span> &#123;&#123; <span class="hljs-string">squote</span> <span class="hljs-string">.Values.ccc</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-values-文件"><a href="#2-values-文件" class="headerlink" title="2. values 文件"></a>2. values 文件</h5><p>路径: <code>mychart/values.yaml </code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aaa:</span> <span class="hljs-string">bbb</span><br><span class="hljs-attr">bbb:</span> <span class="hljs-string">ccc</span><br><span class="hljs-attr">ccc:</span> <span class="hljs-string">ddd</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-2"><a href="#3-渲染模版-2" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test_chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染效果如下：</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707180036706.png" alt="image-20210707180036706"></p><h3 id="2、upper-函数-和-title-函数"><a href="#2、upper-函数-和-title-函数" class="headerlink" title="2、upper 函数 和 title 函数"></a>2、upper 函数 和 title 函数</h3><p><code>upper</code> 函数也是 <code>Sprig</code> 模版库提供的，它的作用是将所有小写字母转成大写；<code>title</code> 函数与其类似，但是只将首字母转大写。</p><h4 id="示例说明：-1"><a href="#示例说明：-1" class="headerlink" title="示例说明："></a>示例说明：</h4><h5 id="1-模版文件-1"><a href="#1-模版文件-1" class="headerlink" title="1. 模版文件"></a>1. 模版文件</h5><p>路径: <code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">aaa:</span> &#123;&#123; <span class="hljs-string">.Values.aaa</span> &#125;&#125;<br>  <span class="hljs-attr">bbb:</span> &#123;&#123; <span class="hljs-string">upper</span> <span class="hljs-string">.Values.bbb</span> &#125;&#125;<br>  <span class="hljs-attr">ccc:</span> &#123;&#123; <span class="hljs-string">title</span> <span class="hljs-string">.Values.ccc</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-values-文件-1"><a href="#2-values-文件-1" class="headerlink" title="2. values 文件"></a>2. values 文件</h5><p>路径: <code>mychart/values.yaml </code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aaa:</span> <span class="hljs-string">bbb</span><br><span class="hljs-attr">bbb:</span> <span class="hljs-string">ccc</span><br><span class="hljs-attr">ccc:</span> <span class="hljs-string">ddd</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-3"><a href="#3-渲染模版-3" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test_chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染效果如下:</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707181049656.png" alt="image-20210707181049656"></p><h3 id="3、default-函数"><a href="#3、default-函数" class="headerlink" title="3、default 函数"></a>3、default 函数</h3><p>实际上，在模版函数中最被常用的函数就是 <code>default</code> 函数，它允许模版的编写者在模版中指定一个默认值，以防没有在 Values 中预设而导致参数被忽略。</p><h4 id="示例说明：-2"><a href="#示例说明：-2" class="headerlink" title="示例说明："></a>示例说明：</h4><h5 id="1-模版文件-2"><a href="#1-模版文件-2" class="headerlink" title="1. 模版文件"></a>1. 模版文件</h5><p>路径: <code>mychart/templates/configmap.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">service:</span> &#123;&#123; <span class="hljs-string">quote</span> <span class="hljs-string">.Values.service.name</span> &#125;&#125;<br>  <span class="hljs-attr">protocol:</span> &#123;&#123; <span class="hljs-string">.Values.service.protocol</span> <span class="hljs-string">|</span> <span class="hljs-string">default</span> <span class="hljs-string">&quot;http&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br>  <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.port</span> <span class="hljs-string">|</span> <span class="hljs-string">default</span> <span class="hljs-number">80</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-values-文件-2"><a href="#2-values-文件-2" class="headerlink" title="2. values 文件"></a>2. values 文件</h5><p>路径: <code>mychart/values.yaml </code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">protocol:</span> <span class="hljs-string">https</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-4"><a href="#3-渲染模版-4" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run test_chart ./mychart<br></code></pre></td></tr></table></figure><p><strong>渲染效果如下:</strong></p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707182537495.png" alt="image-20210707182537495"></p><h5 id="4-修改-values-文件"><a href="#4-修改-values-文件" class="headerlink" title="4. 修改 values 文件"></a>4. 修改 values 文件</h5><p>路径: <code>mychart/values.yaml </code>，去掉部分内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><p>再次渲染，渲染效果如下:</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210707182811994.png" alt="image-20210707182811994"></p><p>可以发现，在 Values 中，我们并没有做预设，而渲染结果取了默认值，使用这种方法可以比较有效的减少由于缺少参数导致的发布失败。</p><h3 id="4、管道"><a href="#4、管道" class="headerlink" title="4、管道"></a>4、管道</h3><p>有没有发现，我们在上面的模版文件中，使用了一个类似 UNIX shell 的功能 —— <code>|</code>？是的，它的功能就类似 UNIX 的 <code>管道</code>。还记得 <code>管道</code>  的作用吗？<code>将管道前执行的结果交由管道后的命令执行</code>，这里的效果也类似。下面我们再用示例说明下。</p><h4 id="示例说明：-3"><a href="#示例说明：-3" class="headerlink" title="示例说明："></a>示例说明：</h4><h5 id="1-模版文件-3"><a href="#1-模版文件-3" class="headerlink" title="1. 模版文件"></a>1. 模版文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">service:</span> &#123;&#123; <span class="hljs-string">.Values.service.name</span> <span class="hljs-string">|</span> <span class="hljs-string">title</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br>  <span class="hljs-attr">protocol:</span> &#123;&#123; <span class="hljs-string">.Values.service.protocol</span> <span class="hljs-string">|</span> <span class="hljs-string">default</span> <span class="hljs-string">&quot;http&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">upper</span>  &#125;&#125;<br>  <span class="hljs-attr">port:</span> &#123;&#123; <span class="hljs-string">.Values.service.port</span> <span class="hljs-string">|</span> <span class="hljs-string">default</span> <span class="hljs-number">80</span> &#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上，我们执行了几个管道操作，其执行的含义如下：</p><ul><li><p><code>&#123;&#123; .Values.service.name | title | quote &#125;&#125;</code></p><p>将搜索 <code>.Values.service.name</code> 的结果首字母转大写，并用双引号引起来</p></li><li><p><code>&#123;&#123; .Values.service.protocol | default "http" | upper  &#125;&#125;</code></p><p>将搜索 <code>.Values.service.protocol</code> 的结果（如果没有则默认值为 http）所有字母转大写</p></li></ul></blockquote><h5 id="2-values-文件-3"><a href="#2-values-文件-3" class="headerlink" title="2. values 文件"></a>2. values 文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">protocol:</span> <span class="hljs-string">tcp</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h5 id="3-渲染模版-5"><a href="#3-渲染模版-5" class="headerlink" title="3. 渲染模版"></a>3. 渲染模版</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run mychart ./mychart/<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210708150257165.png" alt="image-20210708150257165"></p><blockquote><p>🚩 <strong>在默认的语法规则中，虽然两种方式都可以使用，但是我们较常使用的方法为 <code>.val | quote </code> 而非使用 <code>quote .val</code></strong></p></blockquote><h3 id="5、include-函数-和-template-函数"><a href="#5、include-函数-和-template-函数" class="headerlink" title="5、include 函数 和 template 函数"></a>5、include 函数 和 template 函数</h3><h3 id="6、indent-函数-和-nindent-函数-和-plural-函数"><a href="#6、indent-函数-和-nindent-函数-和-plural-函数" class="headerlink" title="6、indent 函数 和 nindent 函数 和 plural 函数"></a>6、indent 函数 和 nindent 函数 和 plural 函数</h3><h3 id="7、lookup-函数"><a href="#7、lookup-函数" class="headerlink" title="7、lookup 函数"></a>7、lookup 函数</h3><hr><h2 id="四、流程控制"><a href="#四、流程控制" class="headerlink" title="四、流程控制"></a>四、流程控制</h2>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第3章、初识 Chart</title>
    <link href="/2021/07/24/%E7%AC%AC3%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Chart%20/"/>
    <url>/2021/07/24/%E7%AC%AC3%E7%AB%A0%E3%80%81%E5%88%9D%E8%AF%86-Chart%20/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章、初识-Chart"><a href="#第3章、初识-Chart" class="headerlink" title="第3章、初识 Chart"></a>第3章、初识 Chart</h1><span id="more"></span><h2 id="一、Chart-是什么？"><a href="#一、Chart-是什么？" class="headerlink" title="一、Chart 是什么？"></a>一、Chart 是什么？</h2><p>还记得我们在第一章节时介绍 Helm 的三大概念时是如何介绍 <code>chart</code> 这个概念的吗？是的，<code>chart</code> 就像许多语言封装的源码包一样，它是 Helm 使用的封装包的总称。</p><p>我们知道，Kubernetes 将其管理的对象称为资源，例如 deployment、service、ingress 等。而 Helm 作为 K8s 的包管理器，其最大的作用就是通过 chart 的方式整合需要管理的 K8s 中的资源，再通过 Helm 客户端 <strong>统一交由</strong> K8s api server 去执行。</p><hr><h2 id="二、Chart-基础使用"><a href="#二、Chart-基础使用" class="headerlink" title="二、Chart 基础使用"></a>二、Chart 基础使用</h2><h3 id="1、查找-Chart"><a href="#1、查找-Chart" class="headerlink" title="1、查找 Chart"></a>1、查找 Chart</h3><blockquote><p>Helm 提供了2种搜索命令，可用用来从两种来源中进行搜索：</p><ul><li><code>helm search hub</code>：从 <a href="https://artifacthub.io/">Artifact Hub</a> 中查找并列出 helm charts。 Artifact Hub中存放了大量不同的仓库。</li><li><code>helm search repo</code>：从你添加（使用 <code>helm repo add</code>）到本地 helm 客户端中的仓库中进行查找。该命令基于本地数据进行搜索，无需连接互联网。</li></ul></blockquote><h4 id="1）搜索所有公开可用的-charts"><a href="#1）搜索所有公开可用的-charts" class="headerlink" title="1）搜索所有公开可用的 charts"></a>1）搜索所有公开可用的 <code>charts</code></h4><p>执行以下命令从 <code>Artifact Hub</code> 中搜索所有的 <code>wordpress</code> charts：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search hub &lt;chart_name&gt;</span> <br>helm search hub wordpress<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629102731888.png" alt="image-20210629102731888"></p><h4 id="2）搜索本地-stable-源中可用的-charts"><a href="#2）搜索本地-stable-源中可用的-charts" class="headerlink" title="2）搜索本地 stable 源中可用的 charts"></a>2）搜索本地 <code>stable</code> 源中可用的 <code>charts</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search repo &lt;repo_name&gt;</span><br>helm search repo stable<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210628152107519.png" alt="image-20210628152107519"></p><h4 id="3）模糊匹配搜索"><a href="#3）模糊匹配搜索" class="headerlink" title="3）模糊匹配搜索"></a>3）模糊匹配搜索</h4><p>Helm 的搜素使用模糊字符串匹配算法，只需要输入名字的一部分就可以从本地仓库记录中进行搜索，如下搜索 <code>word</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm search repo &lt;string&gt;</span><br>helm search repo word<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629103454469.png" alt="image-20210629103454469"></p><h3 id="2、安装-Chart"><a href="#2、安装-Chart" class="headerlink" title="2、安装 Chart"></a>2、安装 Chart</h3><blockquote><p>使用 <code>helm search</code> 找到你想要安装的 helm包后，就可以使用 <code>helm install</code> 来进行安装。最简单使用方案只需要传入两个参数：<code>release的名字</code> 和 <code>chart的名称</code>。</p></blockquote><h4 id="1）安装helm包"><a href="#1）安装helm包" class="headerlink" title="1）安装helm包"></a>1）安装helm包</h4><p>执行以下命令，即创建了一个新的 <code>release</code> 对象，命名为 <code>happy-panda</code> ，如果想要自动生成一名名称，可以使用<code>--generate-name</code> 参数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm install &lt;release_name&gt; &lt;chart_name&gt; （chart名称须具体，如 bitnami/wordpress。不能只是关键字）</span><br>helm install happy-panda bitnami/wordpress<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210629104631960.png" alt="image-20210629104631960"></p><h4 id="2）查看运行状态"><a href="#2）查看运行状态" class="headerlink" title="2）查看运行状态"></a>2）查看运行状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm list<br></code></pre></td></tr></table></figure><p>返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME     NAMESPACEREVISIONUPDATED                                STATUS  CHART            APP VERSION<br>happy-pandadefault  1       2021-06-29 10:51:13.437131205 +0800 CSTdeployedwordpress-11.0.165.7.2  <br></code></pre></td></tr></table></figure><h4 id="3）查看发布状态"><a href="#3）查看发布状态" class="headerlink" title="3）查看发布状态"></a>3）查看发布状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm status &lt;release_name&gt;</span><br>helm status happy-panda<br></code></pre></td></tr></table></figure><p>返回值和安装时的返回一样。</p><h4 id="4）卸载helm包"><a href="#4）卸载helm包" class="headerlink" title="4）卸载helm包"></a>4）卸载helm包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm uninstall &lt;release_name&gt;</span><br>helm uninstall happy-panda<br></code></pre></td></tr></table></figure><h3 id="3、下载-Chart"><a href="#3、下载-Chart" class="headerlink" title="3、下载 Chart"></a>3、下载 Chart</h3><blockquote><p>Helm 的 chart 同时也支持下载，下载下来的是一个tar包，解压后即可获得官方的 chart 目录，基于目录中提供的文件，我们可以对其中的内容进行修改，进行自定义的发布，同时也可以学习其语法。</p></blockquote><h4 id="1）下载"><a href="#1）下载" class="headerlink" title="1）下载"></a>1）下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm pull &lt;chart_name&gt; （chart名称须具体，如 bitnami/kong。不能只是关键字）</span><br>helm pull bitnami/kong<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701103804465.png" alt="image-20210701103804465"></p><h4 id="2）解压"><a href="#2）解压" class="headerlink" title="2）解压"></a>2）解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf kong-3.7.5.tgz <br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701103958115.png" alt="image-20210701103958115"></p><h4 id="3）目录结构"><a href="#3）目录结构" class="headerlink" title="3）目录结构"></a>3）目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">kong<br>├── Chart.lock<br>├── charts# kong 的 chart 依赖的其他 chart，数据库<br>│   ├── cassandra<br>│   ├── common<br>│   └── postgresql<br>├── Chart.yaml# 包含了chart信息的YAML文件<br>├── ci<br>│   ├── values-editing-containers.yaml<br>│   ├── values-external-cassandra.yaml<br>│   ├── values-external-postgresql.yaml<br>│   ├── values-ingress.yaml<br>│   └── values-metrics-hpa-pdb.yaml<br>├── crds# 自定义资源<br>│   └── custom-resource-definitions.yaml<br>├── README.md<br>├── templates# 资源模版，配置 values 进行渲染，生产有效的 K8s manifest<br>│   ├── dep-ds.yaml<br>│   ├── external-database-secret.yaml<br>│   ├── extra-list.yaml<br>│   ├── _helpers.tpl<br>│   ├── hpa.yaml<br>│   ├── ingress-controller-rbac.yaml<br>│   ├── ingress.yaml<br>│   ├── kong-prometheus-rolebinding.yaml<br>│   ├── kong-prometheus-role.yaml<br>│   ├── kong-script-configmap.yaml<br>│   ├── metrics-exporter-configmap.yaml<br>│   ├── metrics-script-configmap.yaml<br>│   ├── metrics-service.yaml<br>│   ├── migrate-job.yaml<br>│   ├── NOTES.txt<br>│   ├── pdb.yaml<br>│   ├── servicemonitor.yaml<br>│   ├── service.yaml<br>│   └── tls-secrets.yaml<br>└── values.yaml# chart 默认的配置值<br><br></code></pre></td></tr></table></figure><h3 id="4、自建-Chart"><a href="#4、自建-Chart" class="headerlink" title="4、自建 Chart"></a>4、自建 Chart</h3><blockquote><p>除了从远程 helm 仓库中获取官方或三方的 chart 外，Helm 更加重要的功能在于自建 chart，它会创建一个 chart 需要的最小化目录结构以及各必要文件的模版。chart 的整体构造比较类似 ansible 的 roles。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm create &lt;chart_name&gt;</span><br>helm create test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701180328092.png" alt="image-20210701180328092"></p><h3 id="5、检查-Chart"><a href="#5、检查-Chart" class="headerlink" title="5、检查 Chart"></a>5、检查 Chart</h3><blockquote><p>Helm 自动了语法检查工具，其作用类似 <code>nginx -t</code>，会对 chart 的格式或者一些信息进行自检，并返回检查结果，在发布前，进行语法检查是很好的选择。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm lint &lt;chart_name&gt;</span><br>helm lint test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210705142216832.png" alt="image-20210705142216832"></p><h3 id="6、上传-Chart"><a href="#6、上传-Chart" class="headerlink" title="6、上传 Chart"></a>6、上传 Chart</h3><h4 id="1）打包-Chart"><a href="#1）打包-Chart" class="headerlink" title="1）打包 Chart"></a>1）打包 Chart</h4><blockquote><p>在上面的一系列操作中我们知道，Helm 仓库中存放的是一个个的 tar 包，而不是目录，因此如果你想上传自建的 chart，就需要将其先行打包。Helm 提供了这样一个命名来将你自建的 chart 打包出 Helm 可识别的格式。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令: helm package &lt;chart_name&gt;</span><br>helm package test_chart<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701111357599.png" alt="image-20210701111357599"></p><blockquote><p>🚩 <strong>为什么版本是 0.1.0？</strong></p><p>这是由 Chart.yaml 中的 <code>version</code> 字段决定的。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210701111524833.png" alt="image-20210701111524833"></p></blockquote><h4 id="2）上传至私有仓库"><a href="#2）上传至私有仓库" class="headerlink" title="2）上传至私有仓库"></a>2）上传至私有仓库</h4><blockquote><p><strong>四个步骤：</strong></p><p>1）自建私有仓库</p><p>2）生成、更新 chart 索引文件</p><p>3）上传 chart 和索引文件</p><p>4）更新本地 chart 仓库</p></blockquote><h4 id="3）上传至-Helm-Hub"><a href="#3）上传至-Helm-Hub" class="headerlink" title="3）上传至 Helm Hub"></a>3）上传至 Helm Hub</h4><blockquote><p>🚩 <strong>参考文档:</strong></p><p><a href="https://blog.csdn.net/jeffzhesi/article/details/106565173">https://blog.csdn.net/jeffzhesi/article/details/106565173</a></p></blockquote><hr><h2 id="三、Chart-语法释义"><a href="#三、Chart-语法释义" class="headerlink" title="三、Chart 语法释义"></a>三、Chart 语法释义</h2><h3 id="1、chart-基本元素释义："><a href="#1、chart-基本元素释义：" class="headerlink" title="1、chart 基本元素释义："></a>1、chart 基本元素释义：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_chart<br>├── charts# 可选: 本 chart 依赖的其他 chart<br>├── Chart.yaml# 必需: 用于描述 chart 相关信息，包括名称、描述信息、api版本等<br>├── templates# 必需: 做用于 K8s 资源的 yaml 模版<br>│   ├── deployment.yaml# 用于生成 K8s deployment 资源的 yaml 模版，发布应用的基本元素<br>│   ├── _helpers.tpl# 用于定义一些可重用的模板片断，在此文件中的定义在任何资源定义模板中都可用<br>│   ├── hpa.yaml# 用于生成 K8s hpa 的 yaml 模版，如服务需要弹性伸缩策略，则在该模版中定义<br>│   ├── ingress.yaml# 用于生成 K8s ingress 的 yaml 模版，如果服务需要对外放出，则在该模版中定义 ingress<br>│   ├── NOTES.txt# 必需: 用于介绍 chart 部署后的一些信息，比如如何使用这个 chart、列出缺省设置等<br>│   ├── serviceaccount.yaml# 用于生成 K8s serviceaccount 资源的 yaml 模版，如需要创建特定认证对象，则在该模版中定义<br>│   ├── service.yaml# 用于生成 K8s service 资源的 yaml 模版，发布应用的基本元素<br>│   └── tests# helm 的测试钩子<br>│       └── test-connection.yaml<br>└── values.yaml# 必需: 用于存储要渲染至 templates/ 下模版文件中的值<br></code></pre></td></tr></table></figure><h3 id="2、Chart-yaml"><a href="#2、Chart-yaml" class="headerlink" title="2、Chart.yaml"></a>2、Chart.yaml</h3><p>一个标准的 Chart.yaml 包含以下字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-comment"># 必需: chart API 版本, v2 版本为 helm3 语法，v1 版本仍然保留使用</span><br><span class="hljs-attr">name:</span> <span class="hljs-comment"># 必需: chart名称</span><br><span class="hljs-attr">version:</span> <span class="hljs-comment"># 必需: chart 的版本控制标识</span><br><span class="hljs-attr">kubeVersion:</span> <span class="hljs-comment"># 可选: 兼容Kubernetes版本的语义化版本，可以使用运算符，形式如 &gt;= 1.13.0 &lt; 1.15.0</span><br><span class="hljs-attr">description:</span> <span class="hljs-comment"># 可选: 对于这个 chart 的描述信息</span><br><span class="hljs-attr">type:</span> <span class="hljs-comment"># 可选: chart类型, 支持2种类型，application 和 library，默认使用 application</span><br><span class="hljs-attr">keywords:</span><span class="hljs-comment"># 可选: 关于项目的一组关键字</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">home:</span> <span class="hljs-comment"># 可选: 项目home页面的URL</span><br><span class="hljs-attr">sources:</span><span class="hljs-comment"># 可选: 项目源码的URL列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">dependencies:</span> <span class="hljs-comment"># 可选: chart 的依赖项，执行 `helm dep up &lt;chart_name&gt;` 更新依赖，依赖的 chart包 会下载至 charts/ </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-comment"># chart名称, 如 nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-comment"># chart版本, 如 &quot;1.2.3&quot;</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-comment"># 可选: 仓库的完整URL (&quot;https://example.com/charts&quot;) 或别名 (&quot;@repo-name&quot;)</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-comment"># 可选: 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled )</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-comment"># 可选: 用于一次启用/禁用 一组chart的tag</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">import-values:</span>  <span class="hljs-comment"># 可选: 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ImportValue</span>  <br>    <span class="hljs-attr">alias:</span> <span class="hljs-comment"># 可选: 依赖 chart 的别名。当你要多次添加相同的chart时会很有用</span><br><span class="hljs-attr">maintainers:</span> <span class="hljs-comment"># 可选: 维护者信息</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-comment"># 维护者名字 （每个维护者都需要）</span><br>    <span class="hljs-attr">email:</span> <span class="hljs-comment"># 维护者邮箱 （每个维护者可选）</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-comment"># 维护者URL （每个维护者可选）</span><br><span class="hljs-attr">icon:</span> <span class="hljs-comment"># 可选: 用做icon的SVG或PNG图片URL</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-comment"># 可选: 与版本控制的 version 无关，用于指定应用的版本</span><br><span class="hljs-attr">deprecated:</span> <span class="hljs-comment"># 可选: 标记该 chart 已废弃，使用方法为布尔值</span><br><span class="hljs-attr">annotations:</span><br>  <span class="hljs-attr">example:</span> <span class="hljs-comment"># 可选: 按名称输入的批注列表</span><br></code></pre></td></tr></table></figure><h4 id="1）使用-dependencies-表达式管理依赖"><a href="#1）使用-dependencies-表达式管理依赖" class="headerlink" title="1）使用 dependencies 表达式管理依赖"></a>1）使用 dependencies 表达式管理依赖</h4><h5 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><p>Helm3 中，弃用了 <code>requeirements.yaml</code> ，<code>dependencies</code> 字段被合并至了 <code>Chart.yaml</code> 中，但是就语法表达式来说，和之前没有太大的变化。使用方式比较类似 ansible 的 playbook 或 docker compose，其表达式如下，是一个列表形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://example.com/charts</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">3.2</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">https://another.example.com/charts</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><p><code>name</code> 字段：所需依赖 chart 的名称</p></li><li><p><code>version</code> 字段：所需依赖 chart 的版本</p></li><li><p><code>repository</code> 字段：chart 仓库的完整 URL 或者 仓库的名称</p><p>使用 URL ：<code>https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</code></p><p>使用 仓库名称：<code>@stable</code></p></li></ul><p>🚩  仓库必须事先使用 <code>helm repo add</code> 添加，执行类似如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br></code></pre></td></tr></table></figure></blockquote><h5 id="2-示例说明"><a href="#2-示例说明" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><h6 id="1⃣️-添加仓库"><a href="#1⃣️-添加仓库" class="headerlink" title="1⃣️ 添加仓库"></a>1⃣️ 添加仓库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo add bitnami https://charts.bitnami.com/bitnami  <br></code></pre></td></tr></table></figure><h6 id="2⃣️-写依赖表达式"><a href="#2⃣️-写依赖表达式" class="headerlink" title="2⃣️ 写依赖表达式"></a>2⃣️ 写依赖表达式</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">9.3</span><span class="hljs-number">.3</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">&quot;@bitnami&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mariadb</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2.1</span><span class="hljs-number">.6</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">&quot;@bitnami&quot;</span><br></code></pre></td></tr></table></figure><h6 id="3⃣️-更新依赖"><a href="#3⃣️-更新依赖" class="headerlink" title="3⃣️ 更新依赖"></a>3⃣️ 更新依赖</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm dependency update<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210702105136710.png" alt="image-20210702105136710"></p><p>依赖的 chart 包 会被下载到 <code>charts/</code> 目录下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210702105157112.png" alt="image-20210702105157112"></p><h4 id="2）通过-charts-目录手动管理依赖"><a href="#2）通过-charts-目录手动管理依赖" class="headerlink" title="2）通过 charts/ 目录手动管理依赖"></a>2）通过 charts/ 目录手动管理依赖</h4><p>Helm 提供了两种管理依赖的方式，一种是如上所述的 <code>dependencies</code> 表达式，它会遵循语法原则，自动的管理依赖，依赖包会被下载到 <code>charts/</code> 中；另一种方式就是通过 <code>charts/</code> 目录来手动管理依赖，这种方式可以对依赖的 chart 做更多的自定义设置。</p><h5 id="1-基本原则-1"><a href="#1-基本原则-1" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><blockquote><ul><li><code>charts/</code> 下管理的依赖必须是一个 <strong>chart 包</strong> （<code>xxx-1.0.1.tgz</code>）或是一个解压的 <strong>chart 目录</strong></li><li><strong>依赖的名称不能以 <code>_</code> 或 <code>.</code> 开头</strong>，否则会被 chart 加载器忽略</li><li>可以使用 <code>helm pull</code> 将依赖下载到 <code>charts/</code>下</li></ul></blockquote><h5 id="2-示例说明-1"><a href="#2-示例说明-1" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><p>比如 WordPress 的 chart 依赖 Apache 和 mariadb，其目录形式应该如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">wordpress:<br>  Chart.yaml<br><span class="hljs-meta">  #</span><span class="bash"> ...</span><br>  charts/<br>    apache/<br>      Chart.yaml<br>      # ...<br>    mariadb/<br>      Chart.yaml<br>      # ...<br>    memcached/<br>    Chart.yaml<br>      # ...<br></code></pre></td></tr></table></figure><h4 id="3）dependencies-中-condition-和-tags-使用释义"><a href="#3）dependencies-中-condition-和-tags-使用释义" class="headerlink" title="3）dependencies 中 condition 和 tags 使用释义"></a>3）dependencies 中 condition 和 tags 使用释义</h4><h5 id="1-基本原则："><a href="#1-基本原则：" class="headerlink" title="1. 基本原则："></a>1. 基本原则：</h5><blockquote><ul><li><p>条件（condition）优先</p><p>当设置 value 时，如果同时存在 <code>condition</code> 和 <code>tags</code> 的值，那么 <code>condition</code> 的效果会覆盖 <code>tags</code> 的效果。</p></li><li><p>标签（tags）最小化元素</p><p>当 <code>tags</code> 中的任意一个元素的值被设置为 <code>true</code> 时，带有该 <code>tags</code> 的 chart 就会被启用。</p></li><li><p><code>condition</code> 和 <code>tags</code> 在 values.yaml 中必需在缩进的最顶层</p></li><li><p><code>tags</code> 在 values.yaml 中需以以下形式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-string">xxx</span><br>  <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="2-示例说明："><a href="#2-示例说明：" class="headerlink" title="2. 示例说明："></a>2. 示例说明：</h5><p>文件: <code>test_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart1</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-string">subchart1.enabled,</span> <span class="hljs-string">global.subchart1.enabled</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-end</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">subchart1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart2</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">condition:</span> <span class="hljs-string">subchart2.enabled,global.subchart2.enabled</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-end</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">subchart2</span><br></code></pre></td></tr></table></figure><p>文件: <code>test_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">subchart1:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式表示，<code>condition</code> 中带有 <code>subchart1</code> 的 chart 会被启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-attr">front-end:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">back-end:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式表示，<code>tags</code> 中带有 <code>back-end</code> 的 chart 会被启动，而带有 <code>front-end</code> 的则不会被启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">subchart1:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-attr">front-end:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">back-end:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如上表达式，当 <code>condition</code> 和 <code>tags</code> 一起使用时，是会发生效果覆盖的，比如，虽然 <code>front-end</code> 设置为了 <code>false</code>，但是由于 <code>subchart1.enabled</code> 设置为 <code>true</code>，条件发生覆盖，所以 chart <code>subchart1</code> 还是会被启用。</p><p>而当 <code>back-end</code> 设置为 <code>true</code> 的时候，条件读取的就是 <code>back-end: true</code> ，因此，即使没有设置 <code>subchart2.enabled</code> 为 <code>true</code>，chart <code>subchart2</code> 也会被启用。</p><h4 id="4）dependencies-中的-alias-使用释义（了解）"><a href="#4）dependencies-中的-alias-使用释义（了解）" class="headerlink" title="4）dependencies  中的 alias 使用释义（了解）"></a>4）dependencies  中的 alias 使用释义（了解）</h4><h5 id="1-基本原则-2"><a href="#1-基本原则-2" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><p>在 <code>dependencies</code> 的表达式中，可以使用 <code>alias</code> 对需求项添加别名，当存在依赖多次复用的时候就可以通过别名的方式来访问该需求项，以此加以区分。（比如 数据库的主从、集群等使用场景）</p><h5 id="2-示例说明-2"><a href="#2-示例说明-2" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><p>文件: <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">alias:</span> <span class="hljs-string">new-subchart-1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">alias:</span> <span class="hljs-string">new-subchart-2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">subchart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>如上情况，<code>parent_chart</code> 中相当于有 3 个依赖项，<code>subchart</code>、<code>new-subchart-1</code> 、<code>new-subchart-2</code> ，虽然他们是基于同一个 chart 的，但是可以被区别对待。</p><h4 id="5）dependencies-中的-import-values-使用释义（了解）"><a href="#5）dependencies-中的-import-values-使用释义（了解）" class="headerlink" title="5）dependencies  中的 import-values 使用释义（了解）"></a>5）dependencies  中的 import-values 使用释义（了解）</h4><p>从上文中，我们知道，在 <code>charts/</code> 目录下面管理的其实也是 chart，那么它就会遵循 chart 的原则，那么这种情况下，目录结构就是一种  <code>父-子</code> 的关系。在某些场景中，我们可能会需要读取 <em>子 char</em> 的值，Helm 则提供了 <code>import-values</code> 这样一种实现方式。</p><h5 id="1-基本原则-3"><a href="#1-基本原则-3" class="headerlink" title="1. 基本原则"></a>1. 基本原则</h5><blockquote><ul><li><p>目录结构和文件关系如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">parent_chart:# 父 chart<br>  Chart.yaml# dependencies - child_chart - import-values - Key<br><span class="hljs-meta">  #</span><span class="bash"> ...</span><br>  charts/<br>    child_chart/# 子 chart<br>      Chart.yaml<br>      values.yaml# exports - Key - value<br>      # ...<br></code></pre></td></tr></table></figure></li><li><p>加载器会根据 <code>dependencies - name</code> 找 <em>子 chart</em>，根据 <code>dependencies - import-values</code> 的 key 解析 <em>子 chart</em> 中对应的值</p></li><li><p>加载器默认识别 <code>exports</code></p></li><li><p>没有 <code>exports</code> ，需要以 <code>parent-child</code> 方式明确指明要注入的 <em>子 chart</em> 的值的 Key 和 要被注入的 <em>父 chart</em> 的值的名称</p></li><li><p>import <em>子 chart</em> 所得的值最终会被合并入 <em>父 chart</em> 的 values 中，并会覆盖原有键值</p></li></ul></blockquote><h5 id="2-示例说明-3"><a href="#2-示例说明-3" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h5><h6 id="1⃣️-使用-exports-的方式"><a href="#1⃣️-使用-exports-的方式" class="headerlink" title="1⃣️ 使用 exports 的方式"></a>1⃣️ 使用 <code>exports</code> 的方式</h6><p>文件:  <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">child_chart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">import-values:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data</span><span class="hljs-comment"># 引用子 chart 的变量 - data</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/charts/child_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">exports:</span><span class="hljs-comment"># 声明变量 data</span><br><span class="hljs-attr">data:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>Helm 会在 <code>import-values</code> 的列表到入内容时，将其中的元素作为 Key，并以此到 <em>子 chart</em> 的 <code>exports</code> 字段查找对应的 Key，并将对应的 value 注入 <em>父 chart</em>  的 values 中，所以最终我们可以在 <em>父 chart</em> 中可获取到的值为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><h6 id="2⃣️-使用-parent-—-child-的方式"><a href="#2⃣️-使用-parent-—-child-的方式" class="headerlink" title="2⃣️ 使用 parent — child 的方式"></a>2⃣️ 使用 <code>parent — child</code> 的方式</h6><blockquote><p>⚠️ <strong>注意:</strong></p><p>如果在 <em>子 chart</em> 的 values.yaml 中没有使用 <code>exports</code> ，就必须指定要注入的 <em>子 chart</em> 值的 源Key 以及 被注入的 <em>父 chart</em> 的值的名称。</p></blockquote><p>文件: <code>parent_chart/Chart.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">child_chart</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">http://localhost:10191</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-attr">import-values:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">child:</span> <span class="hljs-string">default.data</span><br>        <span class="hljs-attr">parent:</span> <span class="hljs-string">myimports</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/charts/child_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">default:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">myint:</span> <span class="hljs-number">999</span><br>    <span class="hljs-attr">mybool:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>文件: <code>parent_chart/values.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">myimports:</span><br>  <span class="hljs-attr">myint:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">mybool:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mystring:</span> <span class="hljs-string">&quot;helm tests!&quot;</span><br></code></pre></td></tr></table></figure><p>如上述示例，<code>import-values</code> 的加载器，根据 <code>child</code> 去 child_chart 的 values.yaml 中找 <code>default - data</code> ，并解析出其值，并将其注入到 <em>父 chart</em> 中，并会覆盖原有的键值，由此 <em>父 chart</em> 最终的 values 会合并如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">myimports:</span><br>  <span class="hljs-attr">myint:</span> <span class="hljs-number">999</span><br>  <span class="hljs-attr">mybool:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mystring:</span> <span class="hljs-string">&quot;helm tests!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3、templates-和-values-yaml"><a href="#3、templates-和-values-yaml" class="headerlink" title="3、templates/ 和 values.yaml"></a>3、templates/ 和 values.yaml</h3><h4 id="1）Values-的生效机制"><a href="#1）Values-的生效机制" class="headerlink" title="1）Values 的生效机制"></a>1）Values 的生效机制</h4><p>Values 通过模板中<code>.Values</code>对象可访问的<code>values.yaml</code>文件，也可以通过 <code>.Chart</code> 对象可访问的 <code>Chart.yaml</code> ，以此类推。另外 ，Helm 中有一些预定义的 values，可以将其视为环境变量，具体如下:</p><blockquote><ul><li><p><strong>Release</strong></p><p>该对象描述了版本发布本身。</p><p>使用方法如，<code>&#123;&#123; .Release.Name &#125;&#125;</code> (获取 release 的名称)</p></li><li><p><strong>.Values</strong></p><p>访问 <code>values.yaml</code> 的内容。</p><p>使用方法如，<code>&#123;&#123; .Values.image.repository &#125;&#125;</code> (获取 values.yaml 中 <code>image - repository</code> 的值)</p></li><li><p><strong>.Chart</strong></p><p>访问 <code>Chart.yaml</code> 的内容。</p><p>使用方法如， <code>&#123;&#123; .Chart.Version &#125;&#125;</code> (获得 chart 的版本)、<code>&#123;&#123; .Chart.Maintainers &#125;&#125;</code> (获取 chart 的维护者) </p><p>语法风格遵循 go 模版规则，类似 jinja2。是一种层级检索的方式，<code>.</code> 表示层级，最顶层的 <code>.</code> 即 <code>根</code> 。</p></li><li><p><strong>.Files</strong></p><p>访问 chart 中存在的文件的内容 (<code>.helmignore</code> 除外)。</p><p>使用方法如，<code>&#123;&#123; index .Files "file.name" &#125;&#125;</code> (获取该文件中 <code>name</code>的值)，它等效于 <code>&#123;&#123; .Files.Get name &#125;&#125;</code> 方法。</p><p><code>&#123;&#123; .Files.GetBytes &#125;&#125;</code> 方法等效于访问文件中的 <code>[]byte</code> 对象</p></li><li><p><strong>.Capabilities</strong></p><p>访问 K8s 的 <code>Capabilities</code> 对象。</p><p>使用方法如，<code>&#123;&#123; .Capabilities.KubeVersion &#125;&#125;</code> (获取 K8s 版本)、<code>&#123;&#123; .Capabilities.APIVersions.Has "batch/v1" &#125;&#125;</code>(获取支持的 K8s API 版本)</p></li></ul></blockquote><h4 id="2）templates-中的模版"><a href="#2）templates-中的模版" class="headerlink" title="2）templates/ 中的模版"></a>2）templates/ 中的模版</h4><p>模板文件遵守书写Go模板的标准惯例（查看 <a href="https://golang.org/pkg/text/template/">文本/模板 Go 包文档</a>了解更多）。以发布一个 nginx 的 <code>templates/deployment.yaml</code> 的示例模版为例，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span>  &#125;&#125;<br><span class="hljs-attr">spec:</span><br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">if</span> <span class="hljs-string">not</span> <span class="hljs-string">.Values.autoscaling.enabled</span> &#125;&#125;<br>  <span class="hljs-attr">replicas:</span> &#123;&#123; <span class="hljs-string">.Values.replicaCount</span> &#125;&#125;<br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Chart.Name</span> &#125;&#125;<br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> &#123;&#123; <span class="hljs-string">.Values.image.pullPolicy</span> &#125;&#125;<br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> &#123;&#123; <span class="hljs-string">.Values.service.port</span> &#125;&#125;<br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.Values.resources</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">12</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.nodeSelector</span> &#125;&#125;<br>      <span class="hljs-attr">nodeSelector:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.affinity</span> &#125;&#125;<br>      <span class="hljs-attr">affinity:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">with</span> <span class="hljs-string">.Values.tolerations</span> &#125;&#125;<br>      <span class="hljs-attr">tolerations:</span><br>        &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">toYaml</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">nindent</span> <span class="hljs-number">8</span> &#125;&#125;<br>      &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="3）取值-values-yaml-渲染模版"><a href="#3）取值-values-yaml-渲染模版" class="headerlink" title="3）取值 values.yaml 渲染模版"></a>3）取值 values.yaml 渲染模版</h4><p>根据如上模版的变量关系，进行对应文件 value 的配置，涉及到 <code>Chart.yaml</code> 和 <code>values.yaml</code> 两个文件：</p><h5 id="1-Chart-yaml-的必要值"><a href="#1-Chart-yaml-的必要值" class="headerlink" title="1. Chart.yaml 的必要值"></a>1. <code>Chart.yaml</code> 的必要值</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Helm</span> <span class="hljs-string">chart</span> <span class="hljs-string">for</span> <span class="hljs-string">Kubernetes</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">application</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br><span class="hljs-attr">appVersion:</span> <span class="hljs-string">&quot;1.16.0&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-values-yaml-的必要值"><a href="#2-values-yaml-的必要值" class="headerlink" title="2. values.yaml 的必要值"></a>2. <code>values.yaml</code> 的必要值</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">replicaCount:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;stable&quot;</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br>  <span class="hljs-comment"># targetMemoryUtilizationPercentage: 80</span><br><br><span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br><br><span class="hljs-attr">tolerations:</span> []<br><br><span class="hljs-attr">affinity:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-验证渲染效果"><a href="#3-验证渲染效果" class="headerlink" title="3. 验证渲染效果"></a>3. 验证渲染效果</h5><p>我们可以通过在 <code>helm install</code> 时使用 <code>--dry-run</code> 参数来只渲染模版，而进行直接部署，这样我们就可以验证效果了。执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --dry-run demo test_chart/<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;nginx:stable&quot;</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><h4 id="4）-set-指定参数渲染"><a href="#4）-set-指定参数渲染" class="headerlink" title="4）--set 指定参数渲染"></a>4）<code>--set</code> 指定参数渲染</h4><p>当我们在执行 <code>helm install</code> 或者 <code>helm upgrade</code> 时，除了直接通过 <em>values.yaml</em> 渲染外，也支持直接在命令行通过 <code>--set</code> 参数传参，<strong>传入的参数会覆盖 <em>values.yaml</em> 中的预设值</strong>。</p><h5 id="示例：通过-set-修改-镜像版本-和-端口"><a href="#示例：通过-set-修改-镜像版本-和-端口" class="headerlink" title="示例：通过 --set 修改 镜像版本 和 端口"></a>示例：通过 <code>--set</code> 修改 <code>镜像版本</code> 和 <code>端口</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set image.tag=&quot;1.16.0&quot; --set service.port=9999 --dry-run demo test_chart/<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;nginx:1.16.0&quot;</span><span class="hljs-comment"># 镜像版本由原来的 stable 更改为 1.16.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9999</span><span class="hljs-comment"># 端口由原来的 80 更改为 9999</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><h4 id="5）通过-f-指定-Values-文件"><a href="#5）通过-f-指定-Values-文件" class="headerlink" title="5）通过 -f 指定 Values 文件"></a>5）通过 <code>-f</code> 指定 Values 文件</h4><p>chart 默认的 Values 文件命名为 <code>values.yaml</code>，当你在执行 <code>helm install</code> 或 <code>helm upgrade</code> 时，如果名称不是 <code>values.yaml</code>，执行就会出错。<strong>通过命令行 <code>-f</code> 参数，可以指定 Values 文件</strong>，这样文件的名称就不受限制了。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>创建文件 <code>test_chart/demo.yaml</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">replicaCount: 1<br><br>image:<br>  repository: mysql<br>  tag: &quot;8.7.0&quot;<br>  pullPolicy: IfNotPresent<br><br>service:<br>  type: ClusterIP<br>  port: 3306<br><br>resources:<br>  limits:<br>    cpu: 100m<br>    memory: 128Mi<br>  requests:<br>    cpu: 100m<br>    memory: 128Mi<br><br>autoscaling:<br>  enabled: false<br>  minReplicas: 1<br>  maxReplicas: 100<br>  targetCPUUtilizationPercentage: 80<br><span class="hljs-meta">  #</span><span class="bash"> targetMemoryUtilizationPercentage: 80</span><br><br>nodeSelector: &#123;&#125;<br><br>tolerations: []<br><br>affinity: &#123;&#125;<br></code></pre></td></tr></table></figure><p>执行如下命令，进行渲染测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install -f test_chart/demo.yaml --dry-run demo test_chart<br></code></pre></td></tr></table></figure><p>渲染后的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test_chart</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harborsecret</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_chart</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;mysql:8.7.0&quot;</span><span class="hljs-comment"># 镜像已更改</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><span class="hljs-comment"># 端口已更改</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">128Mi</span><br><br></code></pre></td></tr></table></figure><h3 id="4、架构文件-values-schema-json"><a href="#4、架构文件-values-schema-json" class="headerlink" title="4、架构文件 values.schema.json"></a>4、架构文件 <code>values.schema.json</code></h3><p>是否还记得，在第1章中我们介绍过 Helm3 的新功能中增加了 <code>使用JSON Schema</code> 来验证 Chart 的 Values 的机制？事实上，它在 Chart 的表现就是 <code>values.schema.json</code> 文件。在其中<code>required</code> 可以用于定义哪些字段是必须的，<code>type</code> 可用用于定义哪些字段需要是什么字段类型等。</p><blockquote><p>🚩 <strong>当我们在执行如下命令时，Helm 将会以该 Json 定义的架构格式去验证 .Values 对象是否符合规格，只有当验证通过后，才能正常发送给 K8s 执行。</strong></p><ul><li>helm install</li><li>helm upgrade</li><li>helm lint</li><li>helm template</li></ul></blockquote><h4 id="1）格式示例"><a href="#1）格式示例" class="headerlink" title="1）格式示例"></a>1）格式示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://json-schema.org/draft-07/schema#&quot;</span>,<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;image&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Container Image&quot;</span>,<br>      <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;repo&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;tag&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Service name&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;port&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Port&quot;</span>,<br>      <span class="hljs-attr">&quot;minimum&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;required&quot;</span>: [<br>    <span class="hljs-string">&quot;protocol&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;Values&quot;</span>,<br>  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）示例说明"><a href="#2）示例说明" class="headerlink" title="2）示例说明"></a>2）示例说明</h4><p><code>required</code> 字段定义了 Values 中必要的字段，如上例所示，即 <code>protocol</code> 和 <code>port</code> 。另外，<code>name</code> 默也是必须的，因为 <code>service name</code> 是一个 <code>Release</code> 的必要元素，因此，一个符合该架构要求的最精简 <em>values.yaml</em> 应该如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">http</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>上面有提到过，架构文件验证的对象是 <code>.Values 对象</code>，而不是 <em>values.yaml</em> ，也就是说，使用 <code>--set</code> 指定的参数也属于其检测的范畴，因此，如下这种情况也是可以的通过检查的：</p><p><strong>values.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">fronend</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">https</span><br></code></pre></td></tr></table></figure><p><strong>命令行指定 port</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm install --set port=443<br></code></pre></td></tr></table></figure></blockquote><h3 id="5、用户自定义资源-——-CRD"><a href="#5、用户自定义资源-——-CRD" class="headerlink" title="5、用户自定义资源 —— CRD"></a>5、用户自定义资源 —— CRD</h3><p><strong>CRD</strong>（<code>Custom Resource Definition</code>）是 K8s 提供的一种自定义资源对象的机制。在 Helm3 中，使用 <code>crds/</code> 目录来对其进行管理，Helm3 会在安装 <em>chart</em> 之前检查该目录是否存在 CRD 的 yaml 文件，如果存在，则会先加载该目录下的 <strong>所有yaml文件</strong>至 K8s，然后再进行 <em>chart</em> 的发布。</p><blockquote><p>⚠️ <strong>注意以下几点:</strong></p><ul><li>多个 CRD 的表达式可以写在一个 yaml 文件中，但需要以 <strong>开始结束符 “ <code>---</code> “</strong> 进行分割</li><li>CRD文件<strong>无法套用 Helm 模版</strong>，必须是普通的 yaml 格式文件</li><li>安装 chart 时，会先上传 CRD（如有），并同时暂停安装，直到 CRD 被 api server 调用，才会开始后续 chart 渲染步骤。</li></ul></blockquote><h4 id="1）使用示例"><a href="#1）使用示例" class="headerlink" title="1）使用示例"></a>1）使用示例</h4><p>如果要创建一个针对 <code>crontab</code> 的 CRD，需要遵循以下目录结构和语法规则：</p><h5 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_chart/<br>  Chart.yaml<br>  crds/<br>    crontab.yaml<br>  templates/<br>    mycrontab.yaml<br></code></pre></td></tr></table></figure><h5 id="2-crontab-yaml-的写法"><a href="#2-crontab-yaml-的写法" class="headerlink" title="2. crontab.yaml 的写法"></a>2. crontab.yaml 的写法</h5><blockquote><p>⚠️ <strong>注意:</strong> CRD 不支持 Helm 模版指令，所以 crontab.yaml 只能使用 K8s 经典声明表达式。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">crontabs.stable.example.com</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">stable.example.com</span><br>  <span class="hljs-attr">versions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attr">served:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">crontabs</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">crontab</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">CronTab</span><br></code></pre></td></tr></table></figure><h5 id="3-mycrontab-yaml-模版文件"><a href="#3-mycrontab-yaml-模版文件" class="headerlink" title="3. mycrontab.yaml 模版文件"></a>3. mycrontab.yaml 模版文件</h5><p>CRD 的信息在被加载至 K8s 后，就会在 Helm 模版的 <code>.Capabilities</code> 中生效，指定 <code>apiVersion</code> 就可以引用。和其他资源对象一样，你需要通过创建模版，并通过 Values 渲染来创建实例。CRD 的模版文件同其他 template 文件一样。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">stable.example.com</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronTab</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Values.name</span> &#125;&#125;<br><span class="hljs-attr">spec:</span><br>   <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h4 id="2）CRD-的限制"><a href="#2）CRD-的限制" class="headerlink" title="2）CRD 的限制"></a>2）CRD 的限制</h4><p>和大部分的 K8s 资源对象不同，CRD 是全局性的，故 Helm 对其的管理较为慎重，并对其设置了一下限制：</p><blockquote><ul><li><p><strong>不会重复安装</strong></p><p>如果 <code>crds/</code> 目录下的 CRD已存在，无论是否有版本区别，都不会重新安装覆盖，不会自动升级</p></li><li><p><strong>不会在升级、回滚时安装</strong></p><p>只有在第一次 <code>helm install</code> 时才会被安装</p></li><li><p><strong>不会被自动删除</strong></p><p>自动删除 CRD 会删除所有 <code>namespace</code> 中的所有 <code>CRD</code> ，故不能通过 Helm 删除</p><p>希望升级或删除 CRD，需要进行手动操作，操作需谨慎</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第2章、Helm3 安装部署</title>
    <link href="/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/07/24/%E7%AC%AC2%E7%AB%A0%E3%80%81Helm3-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章、Helm3-安装部署"><a href="#第2章、Helm3-安装部署" class="headerlink" title="第2章、Helm3 安装部署"></a>第2章、Helm3 安装部署</h1><span id="more"></span><h2 id="一、各环境安装部署"><a href="#一、各环境安装部署" class="headerlink" title="一、各环境安装部署"></a>一、各环境安装部署</h2><h3 id="1、Linux"><a href="#1、Linux" class="headerlink" title="1、Linux"></a>1、Linux</h3><h4 id="1）二进制包安装"><a href="#1）二进制包安装" class="headerlink" title="1）二进制包安装"></a>1）二进制包安装</h4><h5 id="1⃣️-下载二进制包"><a href="#1⃣️-下载二进制包" class="headerlink" title="1⃣️ 下载二进制包"></a>1⃣️ 下载二进制包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2⃣️-下载校验文件"><a href="#2⃣️-下载校验文件" class="headerlink" title="2⃣️ 下载校验文件"></a>2⃣️ 下载校验文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://github.com/helm/helm/releases#:~:text=Linux%20amd64%20(-,checksum,-/%20a8ddb4e30435b5fd45308ecce5eaad676d64a5de9c89660b56face3fe990b318)<br></code></pre></td></tr></table></figure><h5 id="3⃣️-md5校验"><a href="#3⃣️-md5校验" class="headerlink" title="3⃣️ md5校验"></a>3⃣️ md5校验</h5><blockquote><p>如果没有<code>shasum</code>命令，需先行安装，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y perl-Digest-SHA <br></code></pre></td></tr></table></figure><p>安装完成后，进行校验</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shasum -a 256 -c helm-v3.5.4-linux-amd64.tar.gz.sha256sum <br></code></pre></td></tr></table></figure><p>如果验证通过，返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm-v3.5.4-linux-amd64.tar.gz: OK<br></code></pre></td></tr></table></figure><p>如果验证失败，返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm-v3.5.4-linux-amd64.tar.gz: FAILED<br>shasum: WARNING: 1 computed checksum did NOT match<br></code></pre></td></tr></table></figure><h5 id="4⃣️-解压安装"><a href="#4⃣️-解压安装" class="headerlink" title="4⃣️ 解压安装"></a>4⃣️ 解压安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf helm-v3.5.4-linux-amd64.tar.gz &amp;&amp; \<br>cd linux-amd64 &amp;&amp; \<br>install -o root -g root -m 0755 helm /usr/local/bin/helm<br></code></pre></td></tr></table></figure><h5 id="5⃣️-验证版本"><a href="#5⃣️-验证版本" class="headerlink" title="5⃣️ 验证版本"></a>5⃣️ 验证版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm version<br></code></pre></td></tr></table></figure><p>正常返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">version.BuildInfo&#123;Version:&quot;v3.5.4&quot;, GitCommit:&quot;1b5edb69df3d3a08df77c9902dc17af864ff05d1&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.15.11&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="2）Apt-安装（Debian-Ubuntu）"><a href="#2）Apt-安装（Debian-Ubuntu）" class="headerlink" title="2）Apt 安装（Debian/Ubuntu）"></a>2）Apt 安装（Debian/Ubuntu）</h4><blockquote><p>官方提供了针对Apt的一个 <code>Helm包</code>，可以使用 <code>Apt命令</code> 自动安装最新版本的 helm。</p></blockquote><h5 id="1⃣️-添加镜像源"><a href="#1⃣️-添加镜像源" class="headerlink" title="1⃣️ 添加镜像源"></a>1⃣️ 添加镜像源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -<br>sudo apt-get install apt-transport-https --yes<br>echo &quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list<br></code></pre></td></tr></table></figure><h5 id="2⃣️-更新缓存"><a href="#2⃣️-更新缓存" class="headerlink" title="2⃣️ 更新缓存"></a>2⃣️ 更新缓存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><h5 id="3⃣️-安装"><a href="#3⃣️-安装" class="headerlink" title="3⃣️ 安装"></a>3⃣️ 安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install helm<br></code></pre></td></tr></table></figure><h4 id="3）自动脚本安装"><a href="#3）自动脚本安装" class="headerlink" title="3）自动脚本安装"></a>3）自动脚本安装</h4><blockquote><p>官方提供了一个可以自动在本地安装最新版本 Helm 的脚本，在版本库的 <code>helm/scripts</code> 下：</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210628144033780.png" alt="image-20210628144033780"></p><p>🚩 <strong>该脚本会自动识别系统环境，进行下载安装，其他系统环境也可以使用。</strong></p></blockquote><p>执行如下命令，直接自动安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash<br></code></pre></td></tr></table></figure><h4 id="4）添加命令补全"><a href="#4）添加命令补全" class="headerlink" title="4）添加命令补全"></a>4）添加命令补全</h4><p>安装命令补全功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y bash-completion<br></code></pre></td></tr></table></figure><p>新增文件 <code>/etc/profile.d/helm.sh</code>，编辑以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source &lt;(helm completion bash)<br></code></pre></td></tr></table></figure><p>生效环境变量配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/helm.sh<br></code></pre></td></tr></table></figure><h3 id="2、macOS"><a href="#2、macOS" class="headerlink" title="2、macOS"></a>2、macOS</h3><h4 id="使用-Homebrew-安装"><a href="#使用-Homebrew-安装" class="headerlink" title="使用 Homebrew 安装"></a>使用 Homebrew 安装</h4><blockquote><p>官方提供了针对 <code>Homebrew</code> 构建 Helm 的方案，可以使用 <code>brew命令</code> 自动安装最新版本的 helm。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install helm<br></code></pre></td></tr></table></figure><h3 id="3、Windows"><a href="#3、Windows" class="headerlink" title="3、Windows"></a>3、Windows</h3><h4 id="使用-Chocolatey-安装"><a href="#使用-Chocolatey-安装" class="headerlink" title="使用 Chocolatey 安装"></a>使用 Chocolatey 安装</h4><blockquote><p>官方提供了针对 <code>Chocolatey</code> 的一个 <code>Helm包</code>，可以使用 <code>choco命令</code> 自动安装最新版本的 helm。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">choco install kubernetes-helm<br></code></pre></td></tr></table></figure><hr><h2 id="二、添加公共仓库"><a href="#二、添加公共仓库" class="headerlink" title="二、添加公共仓库"></a>二、添加公共仓库</h2><blockquote><p>⚠️ <strong>注意:</strong></p><p>首次安装 Helm3 是没有指定默认仓库的，需要手动添加仓库才可以正常使用。</p></blockquote><h3 id="1、添加常用仓库"><a href="#1、添加常用仓库" class="headerlink" title="1、添加常用仓库"></a>1、添加常用仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> helm repo add stable https://charts.helm.sh/stable<span class="hljs-comment"># Helm 官方源</span></span><br>helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts# 阿里云国内源(用于加速)<br>helm repo add bitnami https://charts.bitnami.com/bitnami# Helm 官方源（Helm3默认使用）<br>helm repo add incubator https://charts.helm.sh/incubator<br>helm repo add jetstack https://charts.jetstack.io<br></code></pre></td></tr></table></figure><blockquote><p>微软也提供了 stable 的镜像仓库，地址为 <code>http://mirror.azure.cn/kubernetes/charts/</code></p></blockquote><h3 id="2、删除仓库"><a href="#2、删除仓库" class="headerlink" title="2、删除仓库"></a>2、删除仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo remove stable<br></code></pre></td></tr></table></figure><h3 id="3、更新仓库"><a href="#3、更新仓库" class="headerlink" title="3、更新仓库"></a>3、更新仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo update<br></code></pre></td></tr></table></figure><h3 id="4、查看仓库"><a href="#4、查看仓库" class="headerlink" title="4、查看仓库"></a>4、查看仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo list<br></code></pre></td></tr></table></figure><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/image-20210630154956853.png" alt="image-20210630154956853"></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第1章、Helm 简介</title>
    <link href="/2021/07/24/%E7%AC%AC1%E7%AB%A0%E3%80%81Helm-%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/07/24/%E7%AC%AC1%E7%AB%A0%E3%80%81Helm-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章、Helm-简介"><a href="#第1章、Helm-简介" class="headerlink" title="第1章、Helm 简介"></a>第1章、Helm 简介</h1><span id="more"></span><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/helm3.jpg" alt="helm logo"></p><p><a href="https://helm.sh/">Helm 官网</a></p><p><a href="https://github.com/helm/helm">Helm 官方GitHub</a></p><h2 id="一、什么是-Helm？"><a href="#一、什么是-Helm？" class="headerlink" title="一、什么是 Helm？"></a>一、什么是 Helm？</h2><p>就像 Java 使用 maven；node 使用 npm；python 使用 pip；Linux 使用 yum 或 Apt 一样，不管是什么样的工作，技术人员都会希望有一种资源管理器/包管理器，以此来方便得查找、下载、安装、使用和分发软件包。</p><p>所以 Helm 即可以说是 <code>K8S的包管理器</code>，它使得我们对于 K8S 的操作不再需要细化到资源对象，而是可以作为一个实例进行管理。不再需要去写 <code>deployment</code> 、<code>service</code> 、<code>ingress</code> 的 yaml，而是可以直接通过 <code>install</code> 命令实现服务实例的安装。</p><h3 id="Helm-的主要功能总结："><a href="#Helm-的主要功能总结：" class="headerlink" title="Helm 的主要功能总结："></a>Helm 的主要功能总结：</h3><blockquote><ul><li>查找要安装和使用的预打包软件</li><li>轻松创建和托管自己的软件包</li><li>将软件包安装到任何 K8S 集群中</li><li>查询集群以查看已安装和正在运行的程序包</li><li>更新、删除、回滚或查看已安装软件包的历史记录</li></ul></blockquote><hr><h2 id="二、Helm-中的基本概念"><a href="#二、Helm-中的基本概念" class="headerlink" title="二、Helm 中的基本概念"></a>二、Helm 中的基本概念</h2><h3 id="1、Chart"><a href="#1、Chart" class="headerlink" title="1、Chart"></a>1、<em>Chart</em></h3><p>Helm 使用的包格式称为 <code>chart</code>，它是一个描述 Kubernetes 相关资源对象的文件集合。它的技术特点类似 jinja模版，以渲染模版的方式，生成运行一个服务实例所需的一系列资源对象文件，并以此进行服务的发布。通过这种方式，我们也可以十分简单的制作自定义的 chart。</p><p>Chart 有自已特定的目录布局，我们以官方提供的 <code>wordpress</code>为例说明，chart 的文件目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">wordpress/<br>  Chart.yaml          # 包含了chart信息的YAML文件<br>  LICENSE             # 可选: 包含chart许可证的纯文本文件<br>  README.md           # 可选: 可读的README文件<br>  values.yaml         # chart 默认的配置值<br>  values.schema.json  # 可选: 一个使用JSON结构的values.yaml文件<br>  charts/             # 包含chart依赖的其他chart<br>  crds/               # 自定义资源的定义<br>  templates/          # 模板目录， 当和values 结合时，可生成有效的Kubernetes manifest文件<br>  templates/NOTES.txt # 可选: 包含简要使用说明的纯文本文件<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意:</strong></p><p>Helm Chart 基本元素为 <code>charts/</code>、<code>Chart.yaml </code>、<code>templates/</code>、<code>values.yaml</code>，并保留 <code>crds/</code> ，要正确的使用 chart 进行发布，该元素是必不可少的。</p></blockquote><h3 id="2、Repos"><a href="#2、Repos" class="headerlink" title="2、Repos"></a>2、<em>Repos</em></h3><p>Helm chart 可以被存储在专用的 HTTP 服务器上，称为 <code>chart 仓库（repositories)</code>，和 <code>yum repository</code>类似，chart 仓库提供了一个 <code>index.yaml</code> 来描述一批 chart，并且提供了每个 chart 的下载地址信息。</p><p>Helm 客户端可以指向多个 chart 仓库，默认情况下是没有配置仓库的，需要使用 <code>helm repo add</code> 来进行添加。helm3 中对于一些常用服务的下载安装，用 <code>bitnami 仓库</code>  取代了原来的<code>stable 仓库</code>，但是仍保留了 <code>stable 仓库</code>的使用。</p><h3 id="3、Release"><a href="#3、Release" class="headerlink" title="3、Release"></a>3、<em>Release</em></h3><p>当 chart 被发布后，Helm 库会创建一个 <code>release</code> 来跟踪这个发布的对象，它的实质是在 Kubernetes 中运行的各种资源，<code>service</code>、<code>deployment</code>、<code>configmap</code>、<code>secret</code> 等，在 K8S 集群中的直接的表现就是一个或多个 pod。</p><blockquote><p>⚠️ <strong>注意:</strong>  </p><p>Helm 的 release 是允许启动多个不同服务的，且每个服务之间遵循依赖关系，这点就比较类似 docker compose。</p></blockquote><hr><h2 id="三、从-Helm2-到-Helm3-的变化"><a href="#三、从-Helm2-到-Helm3-的变化" class="headerlink" title="三、从 Helm2 到 Helm3 的变化"></a>三、从 Helm2 到 Helm3 的变化</h2><h3 id="1、Helm3-新增的功能"><a href="#1、Helm3-新增的功能" class="headerlink" title="1、Helm3 新增的功能"></a>1、Helm3 新增的功能</h3><p>Helm3 有很多新的功能，有个重要功能需要特别指出：</p><blockquote><ul><li>release 的信息以新的形式存储</li><li>移除了 Tiller 组件</li><li>Helm3 包含了对新版本 Helm charts （Charts v2）的支持</li><li>Helm3 支持 <code>library charts</code> —— 一种作为其他 charts 元素的 charts</li><li>将 Chart 推送保存到 OCI 注册中心（类似 DockerRegistry ），以进行复用</li><li>升级Kubernetes资源时将应用3向战略合并补丁</li><li>支持使用 JSON Schema 对 charts 的 values 进行校验</li><li>为了使Helm更安全，可用和健壮，已进行了许多小的改进。</li></ul></blockquote><h3 id="2、重要变化概述"><a href="#2、重要变化概述" class="headerlink" title="2、重要变化概述"></a>2、重要变化概述</h3><h4 id="1）移除-Tiller"><a href="#1）移除-Tiller" class="headerlink" title="1）移除 Tiller"></a>1）移除 Tiller</h4><p><code>Tiller</code> 在 Helm2 中是一个重要的组成部分。Helm2 使用它和 <code>GRPC</code> 来处理 <code>Helm chart</code> 的安装和管理，呈现 <code>chart</code> 并将其推送到 Kubernetes API Server。<code>Tiller</code> 允许团队共享一个 Kubernetes 集群，多个 operator 可以使用同一组发行版，团队成员通过它就可以在一个共享的 Kubernetes 集群中管理复杂的应用发布。</p><p>但是从 Kubernetes 1.6 开始，考虑到安全性，集群默认会开启角色访问控制（<code>RBAC</code>），这使得管理和配置Tiller会变得非常复杂，因为可能的安全策略数量太多了。为了简化安全模型实现方式，并使管理员/SRE不需要去深入研究 Kubernetes 的安全组件，helm 提供了一个不需要太过关注安全规则的默认配置，但是这又会使得授权变得宽松，这反而会导致安全隐患。</p><p>因此在 Helm3 中干脆移除了 Tiller，而是选择从 Kubernetes API Server 中获取信息来渲染 Charts 客户端，并在 Kubernetes 中存在安装记录，这些过程既是没有 Tiller 也可以实现。</p><p>Helm3 可以支持所有的 Kubernetes 认证及鉴权等全部安全特性。Helm和本地的 kubeconfig flie 中的配置使用一致的权限。管理员可以按照自己认为合适的粒度来管理用户权限。</p><p><img src="http://uniondrug-devops.oss-cn-hangzhou.aliyuncs.com/blog_images/helm3%E5%8F%98%E5%8C%96.png" alt="helm3变化"></p><h4 id="2）Chart-仓库升级"><a href="#2）Chart-仓库升级" class="headerlink" title="2）Chart 仓库升级"></a>2）Chart 仓库升级</h4><p>在 Helm3 中，<code>helm search</code> 除了支持本地 repository 搜索外，还支持 <code>helm search hub</code> 搜索 Artifact Hub 中所有公开的 charts。</p><h4 id="3）改进升级策略：使用三路策略合并补丁"><a href="#3）改进升级策略：使用三路策略合并补丁" class="headerlink" title="3）改进升级策略：使用三路策略合并补丁"></a>3）改进升级策略：使用三路策略合并补丁</h4><p>在 Helm2 中，使用了双路策略合并补丁，简单来说就是在使用 <code>helm upgrade</code> 更新过程中，会比对本次发布的 chart manifest 和 最近一次发布的 chart manifest  的差异，以此来决定哪些更改被应用到 Kubernetes 的资源中去。并且，Helm 只会将最后一次应用的 chart manifest 作为 release 的当前状态，如果 chart 状态没有更改，资源的活动状态就不会更改，也就是说使用诸如 <code>kubectl edit</code> 、<code>kubectl scale</code> 这种外部方式进行的修改不会被 Helm 识别的，这种情况下如果发生回滚操作，Helm 会由于 chart 并没有发生变化而导致回滚失败。</p><p>而在 Helm3 中，这种策略被升级成了三路策略合并，Helm 在生成一个补丁时，也会考虑之前老的 manifest 的活动状态。也就是说，在使用老的 chart manifest 生成新的补丁时，Helm 还会考虑当前的活动状态，并将其与之前老的 manifest 进行比对，并再比对新的 manifest 是否有改动，并进行自动补全，以此来生成最终的更新补丁。</p><h6 id="示例说明："><a href="#示例说明：" class="headerlink" title="示例说明："></a>示例说明：</h6><p>用 Chart 渲染生成的 manifest 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.0.0</span><br></code></pre></td></tr></table></figure><p>通过非 Helm 的方式将应用的活动状态修改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.0.0</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sidecar</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">dump_handler:1.0.0</span><br></code></pre></td></tr></table></figure><p>而现在我们想要将应用的镜像升级到 <code>2.1.0</code>，通过 chart 进行升级操作。</p><p>在 Helm2 中，由于不会考虑 chart 之外的修改，而是检测 chart 生成的 manifest 之间的区别，因此修改后的状态如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.1.0</span><br></code></pre></td></tr></table></figure><p>而在 Helm3 中，通过三路合并策略，会检查到除了 chart 的修改外，还多了一个 sidecar 容器，因此会进行补全，最终修改状态如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">my_app:2.1.0</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sidecar</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">dump_handler:1.0.0</span><br></code></pre></td></tr></table></figure><h4 id="4）release-名称存储位置改变"><a href="#4）release-名称存储位置改变" class="headerlink" title="4）release 名称存储位置改变"></a>4）release 名称存储位置改变</h4><p>在 Helm2 中，release 的相关信息都被保存在 Tiller 的 namespace下，所以 release 的名称必须是唯一的；而随着 Tiller 组件的移除， Helm3 中release 相关的信息都被保存在了应用自己相对应的 namespace 下，因此根据 namespace 的隔离性质，在不同的 ns 下，release 的名称可以重复。</p><blockquote><p>⚠️ <strong>注意:</strong></p><p>Helm3 中，在执行 <code>helm list</code> 时需要添加 <code>--all-namespaces</code> 参数才能获取到 Helm2 中同样的结果</p></blockquote><h4 id="5）默认存储驱动程序更改为-Secrets"><a href="#5）默认存储驱动程序更改为-Secrets" class="headerlink" title="5）默认存储驱动程序更改为 Secrets"></a>5）默认存储驱动程序更改为 Secrets</h4><p>Helm 2 默认情况下使用 ConfigMaps 存储发行信息，直到 Helm 2.7.0 中，才使用 Secrets 用作存储驱动程序。而在 Helm 3 中默认就使用 Secrets。</p><p><a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/">静态加密密钥</a> 在Kubernetes 1.7中作为alpha特性可以使用了，在Kubernetes 1.13中变成了稳定特性。 这允许用户静态加密Helm的发布元数据，同时也是一个类似Vault的以后可扩展的良好起点。</p><h4 id="6）Go-导入路径更改"><a href="#6）Go-导入路径更改" class="headerlink" title="6）Go 导入路径更改"></a>6）Go 导入路径更改</h4><p>在 Helm3 中，Go 导入路径从<code>k8s.io/helm</code> 切换为 <code>helm.sh/helm/v3</code>。 如果打算升级到Helm 3 Go客户端库，请确保更改导入路径。</p><h4 id="7）使用-JSONSchema-验证-Chart-的-values"><a href="#7）使用-JSONSchema-验证-Chart-的-values" class="headerlink" title="7）使用 JSONSchema 验证 Chart 的 values"></a>7）使用 JSONSchema 验证 Chart 的 values</h4><p>Helm3 支持用<code> JSONSchema</code>  来校验 Chart 的 values，它会自动检查所有输入的变量格式。这样可以确保用户提供的值遵循 Chart 维护者设计的架构，当用户为 Chart 提供一组错误值时，也能提供更好的错误报告。</p><p>当调用一下命令时会进行 JSON 格式验证：</p><blockquote><ul><li>helm install</li><li>helm upgrade</li><li>helm template</li><li>helm lint</li></ul></blockquote><h4 id="8）requirements-yaml合并入-Chart-yaml"><a href="#8）requirements-yaml合并入-Chart-yaml" class="headerlink" title="8）requirements.yaml合并入 Chart.yaml"></a>8）requirements.yaml合并入 Chart.yaml</h4><p>动态依赖关系的chart 依赖从 <code>requirements.yaml</code> 和 <code>requirements.lock</code> 移至 <code>Chart.yaml</code> 和 <code>Chart.lock</code>。 推荐在 Helm3 的新 chart 中使用 Chart API v2 的新格式，但是 Helm3 中依然可以识别 v1 版本，并且会自动加载已有的 <code>requirements.yaml</code> 文件。</p><p>在 Helm2 中，<code>requirements.yaml</code> 的表达式类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mariadb</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">5.</span><span class="hljs-string">x.x</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://charts.helm.sh/stable</span><br>  <span class="hljs-attr">condition:</span> <span class="hljs-string">mariadb.enabled</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">database</span><br></code></pre></td></tr></table></figure><p>而在 Helm3 中，表达式的形式并没有变化，但是现在需要写在 <code>Chart.yaml</code> 中。Chart 依然会下载和放置在 <code>charts/</code> 目录，所以 <code>charts/</code> 目录中的子 chart 不需要做任何修改，可以沿用 Helm2 的。</p><h4 id="9）指定名称和命名空间"><a href="#9）指定名称和命名空间" class="headerlink" title="9）指定名称和命名空间"></a>9）指定名称和命名空间</h4><h5 id="1⃣️-发布时必须指定-release-名称"><a href="#1⃣️-发布时必须指定-release-名称" class="headerlink" title="1⃣️ 发布时必须指定 release 名称"></a>1⃣️ 发布时必须指定 release 名称</h5><p>在 Helm2 中，在发布时如果未提供 release 的名称，Helm 会自动生成一个，但是在 Helm3 中，如果未指定 release 名称，安装就会报错，如果仍然希望 Helm 能够自动生成 release 名称，可以使用 <code>--generate-name</code> 参数。</p><h5 id="2⃣️-不再自动创建-namespace"><a href="#2⃣️-不再自动创建-namespace" class="headerlink" title="2⃣️ 不再自动创建 namespace"></a>2⃣️ 不再自动创建 namespace</h5><p>在 Helm2 中，如果在创建版本时，命名空间不存在，Helm2 会自动创建一个命名空间，但是在 Helm3 中，如果命名空间不存在就会报错，需要明确指定 <code>--create-namespace</code> 参数，Helm3 才会自动创建一个命名空间。</p><h4 id="10）将-Chart-推送到-OCI-注册中心"><a href="#10）将-Chart-推送到-OCI-注册中心" class="headerlink" title="10）将 Chart 推送到 OCI 注册中心"></a>10）将 Chart 推送到 OCI 注册中心</h4><p>这是一个 Helm3 中的试验性特性，使用时需要设置环境变量 <code>HELM_EXPERIMENTAL_OCI=1</code>。</p><p>查看 <code>helm help chart</code> 和 <code>helm help registry</code> 了解如何打包chart并推送到Docker注册中心的更多信息。</p><h4 id="11）移除-helm-serve"><a href="#11）移除-helm-serve" class="headerlink" title="11）移除 helm serve"></a>11）移除 <code>helm serve</code></h4><p>在 Helm2 中，可以通过 <code>helm serve</code> 命令在本地临时搭建 <code>Chart Repository </code>，但是由于并没有被开发工具接受，且在设计方面存在较多问题，故在 Helm3 中被删除了。</p><h4 id="12）支持-library-chart"><a href="#12）支持-library-chart" class="headerlink" title="12）支持 library chart"></a>12）支持 library chart</h4><p>Helm3 支持一类称为 <code>library chart</code> 的 chart，其本省不会创建任何应用，只是作为其他 chart 的共享依赖。library chart 只能用于声明定义元素，全局范围内的非定义内容将被忽略。这使用户可以重复使用和共享可在许多chart中重复使用的代码段，从而避免了冗余并使 chart 保持简洁。</p><p>Library chart 在 Chart.yaml 的依赖指令中声明，安装和管理与其他chart一致，其表达式类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mylib</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">x.x</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">quay.io</span><br></code></pre></td></tr></table></figure><h4 id="13）Chart-yaml-的-apiVersion-升级"><a href="#13）Chart-yaml-的-apiVersion-升级" class="headerlink" title="13）Chart.yaml 的 apiVersion 升级"></a>13）Chart.yaml 的 apiVersion 升级</h4><h5 id="1⃣️-apiVersion-v1-升级至-v2"><a href="#1⃣️-apiVersion-v1-升级至-v2" class="headerlink" title="1⃣️ apiVersion v1 升级至 v2"></a>1⃣️ apiVersion v1 升级至 v2</h5><p>由于 Helm3 中新增了许多新的特性，比如支持 <code>library chart</code> 、<code>requirements.yaml</code> 合并进 <code>Chart.yaml</code>。而客户端虽然可以是别 Helm2 的包格式，却不能理解这些新的特性，因此 Helm3 中的 Chart.yaml 的 apiVersion 也从 v1 升级到可 v2。</p><p>使用 Helm3 的 <code>helm create</code> 创建的 chart 将使用新格式，默认的 apiVersion 也将使用 v2。</p><h5 id="2⃣️-ApiVersion-改为-APIVersion"><a href="#2⃣️-ApiVersion-改为-APIVersion" class="headerlink" title="2⃣️ ApiVersion 改为 APIVersion"></a>2⃣️ ApiVersion 改为 APIVersion</h5><p>Helm3 对于驼峰的命令规范进行了修改，遵循驼峰命名的典型惯例，因此将 <code>.Chart.ApiVersion</code> 更正为了 <code>.Chart.APIVersion</code>，其他诸如 <code>.Capabilities.APIVersions.Has</code> 都进行了更正处理。</p><h4 id="14）XDG-基本目录支持"><a href="#14）XDG-基本目录支持" class="headerlink" title="14）XDG 基本目录支持"></a>14）XDG 基本目录支持</h4><p><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG 基本目录规范</a> 是一个定义了配置、数据和缓存文件应该存储在文件系统什么位置的可移植标准。</p><p>在 Helm2 中，Helm 相关的信息都存储在 <code>~/.helm/</code> 目录下，可以通过设置环境变量 <code>$HELM_HOME</code> 或者 <code>--home</code> 参数指定。而在 Helm3 中，相关的环境变量则变更为了以下规范形式：</p><blockquote><ul><li>$XDG_CACHE_HOME        # 用于存放缓存文件</li><li>$XDG_CONFIG_HOME      # 用于存放配置文件</li><li>$XDG_DATA_HOME          # 用于存放数据文件</li></ul></blockquote><p>但是在 Helm3 中仍保留了 <code>$HELM_HOME</code> 作为 <code>$XDG_DATA_HOME</code> 的别名，以此来保证过渡阶段的兼容性。</p><p>Helm 插件如过要支持 Helm3，也可以用以下环境变量，来适应这种变化：</p><blockquote><ul><li>$HELM_PATH_CACHE       # 用于存放缓存文件</li><li>$HELM_PATH_CONFIG     # 用于存放配置文件</li><li>$HELM_PATH_DATA          # 用于存放数据文件</li></ul></blockquote><h5 id="各环境默认文件存放位置"><a href="#各环境默认文件存放位置" class="headerlink" title="各环境默认文件存放位置"></a>各环境默认文件存放位置</h5><blockquote><p>🚩 可以通过 <code>helm env</code> 查看</p></blockquote><table><thead><tr><th><strong>Operating System</strong></th><th><strong>Cache Path</strong></th><th><strong>Configuration Path</strong></th><th><strong>Data Path</strong></th></tr></thead><tbody><tr><td><strong>Linux</strong></td><td>$HOME/.cache/helm</td><td>$HOME/.config/helm</td><td>$HOME/.local/share/helm</td></tr><tr><td><strong>macOS</strong></td><td>$HOME/Library/Caches/helm</td><td>$HOME/Library/Preferences/helm</td><td>$HOME/Library/helm</td></tr><tr><td><strong>Windows</strong></td><td>%TEMP%\helm</td><td>%APPDATA%\helm</td><td>%APPDATA%\helm</td></tr></tbody></table><h4 id="15）CLI-命令重命名"><a href="#15）CLI-命令重命名" class="headerlink" title="15）CLI 命令重命名"></a>15）CLI 命令重命名</h4><h5 id="1⃣️-helm-delete-更改为-helm-uninstall"><a href="#1⃣️-helm-delete-更改为-helm-uninstall" class="headerlink" title="1⃣️ helm delete 更改为 helm uninstall"></a>1⃣️ <code>helm delete</code> 更改为 <code>helm uninstall</code></h5><p>在 Helm2 中，如果要清楚 release 的各种资源，必须要使用 <code>--purge</code> 参数，Helm3 中默认就会启用次功。</p><p>如果要保留历史行为数据，需执行 <code>helm uninstall --keep-history</code></p><h5 id="2⃣️-helm-inspect-更改为-helm-show"><a href="#2⃣️-helm-inspect-更改为-helm-show" class="headerlink" title="2⃣️ helm inspect 更改为 helm show"></a>2⃣️ <code>helm inspect</code> 更改为 <code>helm show</code></h5><h5 id="3⃣️-helm-fetch-更改为-helm-pull"><a href="#3⃣️-helm-fetch-更改为-helm-pull" class="headerlink" title="3⃣️ helm fetch 更改为 helm pull"></a>3⃣️ <code>helm fetch</code> 更改为 <code>helm pull</code></h5><blockquote><p>🚩 <strong>这些命令还保留了它们较旧的命令作为别名，因此您可以继续以任何一种形式使用它们。</strong></p></blockquote><h4 id="16）简化模板对象-Capabilities"><a href="#16）简化模板对象-Capabilities" class="headerlink" title="16）简化模板对象 .Capabilities"></a>16）简化模板对象 .Capabilities</h4><p><code>Capabilities</code> 是 Helm 模版可以访问的内置对象之一，其提供了关于 Kubernetes 集群支持的功能的信息，包含以下内容：</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>Capabilities.APIVersions</td><td>集群的版本信息</td></tr><tr><td>Capabilities.APIVersions.Has $version</td><td>说明集群中的版本 (例如, <code>batch/v1</code>) 或是资源 (例如, <code>apps/v1/Deployment</code>) 是否可用</td></tr><tr><td>Capabilities.KubeVersion</td><td>提供了查找 Kubernetes 版本的方法。可以获取到 <code>Major</code>，<code>Minor</code>，<code>GitVersion</code>，<code>GitCommit</code>，<code>GitTreeState</code>，<code>BuildDate</code>，<code>GoVersion</code>，<code>Compiler</code>和<code>Platform</code>。</td></tr><tr><td>Capabilities.TillerVersion</td><td>提供了查找Tiller版本的方法。可以获取到<code>SemVer</code>, <code>GitCommit</code>, and <code>GitTreeState</code>.</td></tr></tbody></table><hr><h2 id="四、Helm版本支持策略"><a href="#四、Helm版本支持策略" class="headerlink" title="四、Helm版本支持策略"></a>四、Helm版本支持策略</h2><h3 id="1、-版本形式"><a href="#1、-版本形式" class="headerlink" title="1、 版本形式"></a>1、 版本形式</h3><blockquote><p>Helm 的版本用 <code>x.y.z</code> 的形式描述，<code>x</code> 是主版本，<code>y</code> 是次版本，<code>z</code> 是补丁版本。当一个 Helm 的新版本发布时，都是针对 Kubernetes 的一个特定版本编译的，比如 <code>3.0.0</code> 基于 Kubernetes 的 <code>1.16.2</code> 的客户端API版本构建，则可以兼容 Kubernetes 1.16。</p></blockquote><h3 id="2、可支持的版本偏差"><a href="#2、可支持的版本偏差" class="headerlink" title="2、可支持的版本偏差"></a>2、可支持的版本偏差</h3><blockquote><p>相较于 Helm2 对于 Kubernetes 次版本变更支持的严格（<code>n-1</code>），Helm3 可以向下兼容 <code>n-3</code> 的次版本，比如你使用一个针对 Kubernetes 1.18 客户端 API 版本编译的 Helm3 版本，那么它可以支持的 Kubernetes 版本为 1.18、1.17、1.16、1.15 ；</p><p>如果你使用一个针对 Kubernetes 1.15 客户端 API 版本编译的 Helm2 版本，那么它可以支持的 Kubernetes 版本为 1.15、1.14。</p><p>⚠️ <strong>注意：</strong> Helm 没有向上兼容机制，故推荐安装下表进行版本选择。</p></blockquote><table><thead><tr><th>Helm 版本</th><th>支持的 Kubernetes 版本</th></tr></thead><tbody><tr><td>3.6.x</td><td>1.21.x - 1.18.x</td></tr><tr><td>3.5.x</td><td>1.20.x - 1.17.x</td></tr><tr><td>3.4.x</td><td>1.19.x - 1.16.x</td></tr><tr><td>3.3.x</td><td>1.18.x - 1.15.x</td></tr><tr><td>3.2.x</td><td>1.18.x - 1.15.x</td></tr><tr><td>3.1.x</td><td>1.17.x - 1.14.x</td></tr><tr><td>3.0.x</td><td>1.16.x - 1.13.x</td></tr><tr><td>2.16.x</td><td>1.16.x - 1.15.x</td></tr><tr><td>2.15.x</td><td>1.15.x - 1.14.x</td></tr><tr><td>2.14.x</td><td>1.14.x - 1.13.x</td></tr><tr><td>2.13.x</td><td>1.13.x - 1.12.x</td></tr><tr><td>2.12.x</td><td>1.12.x - 1.11.x</td></tr><tr><td>2.11.x</td><td>1.11.x - 1.10.x</td></tr><tr><td>2.10.x</td><td>1.10.x - 1.9.x</td></tr><tr><td>2.9.x</td><td>1.10.x - 1.9.x</td></tr><tr><td>2.8.x</td><td>1.9.x - 1.8.x</td></tr><tr><td>2.7.x</td><td>1.8.x - 1.7.x</td></tr><tr><td>2.6.x</td><td>1.7.x - 1.6.x</td></tr><tr><td>2.5.x</td><td>1.6.x - 1.5.x</td></tr><tr><td>2.4.x</td><td>1.6.x - 1.5.x</td></tr><tr><td>2.3.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.2.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.1.x</td><td>1.5.x - 1.4.x</td></tr><tr><td>2.0.x</td><td>1.4.x - 1.3.x</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Helm3 快速入门手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
